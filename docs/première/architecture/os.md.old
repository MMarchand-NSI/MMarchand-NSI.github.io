# Systèmes d'exploitation

EN CONSTRUCTION

## Introduction

Un système d’exploitation est un logiciel essentiel qui gère l’ensemble des ressources d’un ordinateur (processeur, mémoire, stockage) et permet aux utilisateurs d’interagir avec la machine. Il assure le bon fonctionnement des applications, la sécurité, et la gestion efficace des tâches. Dans ce chapitre, nous aborderons ses principales fonctions et découvrirons les types de systèmes d’exploitation courants.


# Démarrage de l'ordinateur:

Lorsque vous démarrez un ordinateur, son unique objectif est de charger le système d'exploitation.

Ceci peut se découper en 4 étapes:

1. Alimentation et auto-test matériel (POST) : L'ordinateur s'allume, et le BIOS (Basic Input/Output System) ou UEFI (Unified Extensible Firmware Interface) effectue un Power-On Self-Test (POST). Ce test vérifie les composants matériels essentiels (mémoire, processeur, carte graphique, etc.) pour s'assurer qu'ils fonctionnent correctement.

2. Chargement du BIOS/UEFI : Le BIOS ou UEFI initialise le matériel de base, en activant la mémoire et les périphériques nécessaires pour lancer le système d'exploitation. Il identifie également le périphérique de démarrage (disque dur, SSD, clé USB) où est installé l'OS.

3. Chargement du chargeur d'amorçage (Bootloader) : Une fois le périphérique de démarrage identifié, le BIOS ou UEFI passe le contrôle au chargeur d'amorçage, souvent GRUB pour Linux ou Bootmgr pour Windows. Le bootloader est un petit programme qui charge le noyau du système d'exploitation en mémoire.

4. Chargement du noyau : Le chargeur d'amorçage charge ensuite le noyau du système d'exploitation en mémoire et lui passe le contrôle. Le noyau initialise les fonctions essentielles : gestion de la mémoire, création de processus initiaux, et prise en charge des pilotes matériels de base.

A partir de ce moment, c'est le système d'exploitation qui va prendre la main et servir à faire le lien entre le matériel et les applications.

```mermaid
graph TD
    A[Démarrage de l'ordinateur] --> B[POST (Power-On Self-Test)]
    B --> C[Chargement du BIOS/UEFI]
    C --> D[Identification du périphérique de démarrage]
    D --> E[Chargement du chargeur d'amorçage (Bootloader)]
    E --> F[Chargement du noyau du système d'exploitation]
```

## A quoi sert un système d'exploitation

<iframe width="560" height="315" src="https://www.youtube.com/embed/qza9V9ad7nc?si=_RwgafPcuO7JaL8H" title="YouTube video player" frameborder="0" allow="accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture; web-share" referrerpolicy="strict-origin-when-cross-origin" allowfullscreen></iframe>

Visionnez cette vidéo, et résumez la en une introduction et 3 parties.

## Interagir avec le système d'exploitation

Un système d'exploitation ne nécessite pas forcément une interface graphique avancée comme celle de Windows. Certains OS, notamment les systèmes utilisés sur des serveurs, des appareils embarqués (comme ceux dans les routeurs ou appareils industriels) ou dans des environnements professionnels, fonctionnent uniquement avec une interface en ligne de commande (CLI). Ces OS, comme certaines versions de Linux, offrent un contrôle précis des fonctions système sans nécessiter d'interface visuelle.

L'absence d'interface graphique permet souvent de réduire l'utilisation des ressources (comme la mémoire et le processeur) et d'améliorer la stabilité et la sécurité, ce qui est essentiel dans les environnements où chaque ressource est précieuse, où l'efficacité est prioritaire.

Lorsque le système d'exploitation n'a pas d'interface graphique, l'interaction se fait via une interface en ligne de commande (CLI = Command Line Interface). Dans ce type d’interface, l’utilisateur entre des commandes textuelles dans un terminal pour exécuter des actions, comme la gestion de fichiers, le contrôle des processus, ou la configuration du réseau.

L’utilisateur doit connaître des commandes spécifiques, comme celles utilisées sous Linux (par exemple, ls pour lister les fichiers, cd pour changer de répertoire, ou top pour surveiller les processus en cours). Ces commandes permettent une interaction directe avec le système, souvent de manière plus rapide et précise que par une interface graphique, bien que cela nécessite des connaissances en syntaxe et en structure de commandes.

Dans un système d'exploitation avec une interface graphique avancée, il est toujours possible d'accéder au CLI via un terminal.

Par exemple pour windows:

![alt text](image.png)


## TP Installation d'un système d'exploitation dans une machine virtuelle.

Nous allons installer un tout petit système d'exploitation basé sur le noyau linux: TinyCoreLinux.
Cette installation est très technique en comparaison à une installation d'un Full Linux, qui se fait en quelques clicks.
Mais:
- Ca vous habitue à la ligne de commande
- On voit bien toutes les étapes
- Les ordinateurs ne sont pas assez puissants

1. Créer un disque dur virtuel pour notre OS
`qemu-img create -f qcow2 tinycore.img 50M`

2. On démarre une machine virtuelle. Un ordinateur dans votre ordinateur. Ici on lui donne comme disque dur le disque virtuel qu'on vient de créer, on y insère le cd-rom d'installation du système d'exploitation, et on lui demande de booter sur le cdrom. On l'autorise à utiliser 256M de RAM sur la machine physique.
`qemu-system-x86_64 -boot d -cdrom TinyCorePure64-15.0.iso -hda tinycore.img -m 256`

3. Au bout d'un moment, des options s'offrent à vous. Sélectionnez la dernière avec les flèches et appuyez sur entrée.
Le système d'exploitation se charge.


4. Le clavier n'est pas en français, c'est toujours la même chose pour les français, il faut tatonner pour trouver les bonnes touches pour le mettre en français:
```
tce-load -wi kmaps
sudo loadkmap < /usr/share/kmap/azerty/fr-pc.kmap
```
`
Ouf, maintenant c'est plus facile.

5. On va maintenant télécharger le programme d'installation de TinyCoreLinux. Puis on lance l'installation. (Faites vous confiance, lisez bien les options, vous ne pouvez rien casser)
```
tce-load -wi tc-install
sudo tc-install.sh
```
    On veut installer:
    - Depuis le CDROM qu'on a inséré dans la machine virtuelle. Afin d'avoir le clavier en français, rajouter aux options de boot:
    `kmap=azerty/fr-pc`
    - L'installation Frugal
    - Sur le disque entier, qui est sda (sda est le disque virtuel que nous avons créé)
    - On veut installer un bootloader
    - On ne veut pas installer d'extensions pour l'instant, donc on appuie sur entrée juste après.
    - On veut formatter le disque entier en ext4
    - On veut le clavier azerty, donc on entre kmap=azerty/fr-pc dans les boot options (voir image suivante)
    - A ce stade l'écran devrait ressembler à ça: 

![alt text](image-1.png)

    - Confirmez et l'installation commence. Une fois avoir appuyé sur entrée comme c'est demandé, il faut éteindre la machine:
    `sudo poweroff`

6. Maintenant on peut redémarrer la machine sans le CD d'installation du système d'exploitation, en lui demandant de booter sur le disque dur.
`qemu-system-x86_64 -boot c -hda tinycore.img -m 256`

7. Alors je ne vous l'ai pas dit tout à l'heure, mais il va falloir refaire les manipulations pour le clavier une dernière fois. En effet. tout à l'heure, il n'y avait pas encore de disque pour faire persister la configuration. Il faut donc le refaire une dernière fois.
```
tce-load -wi kmaps
sudo loadkmap < /usr/share/kmap/azerty/fr-pc.kmap
```

8. Eteignez votre machine, puis rallumez-la afin de vérifier que ça a bien été pris en compte.

9. Bravo, vous avez installé vous même en ligne de commandes un OS basé sur le noyau Linux.

!!! question "Commandes linux"
    Liste de questions sur la ligne de commande


Vidéo commandes linux


De retour à notre interface:

`tce-load -wi Xvesa.tcz Xlibs.tcz Xprogs.tcz aterm.tcz flwm_topside.tcz wbar.tcz`


