{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"","text":"<p>Hal Abelson, 1986</p> <p>Computer science is not really about computers -- and it's not about computers in the same sense that physics is not really about particle accelerators, and biology is not about microscopes and Petri dishes...and geometry isn't really about using surveying instruments. Now the reason that we think computer science is about computers is pretty much the same reason that the Egyptians thought geometry was about surveying instruments: when some field is just getting started and you don't really understand it very well, it's very easy to confuse the essence of what you're doing with the tools that you use.</p>"},{"location":"les-outils/","title":"Outils pour d\u00e9velopper","text":"<p>Cette s\u00e9lection d'outils a \u00e9t\u00e9 choisie pour \u00eatre \u00e0 la fois r\u00e9aliste et abordable. </p> <p>L'installation propos\u00e9e se fait dans l'invite de commandes windows gr\u00e2ce \u00e0 l'outil winget qui est d\u00e9j\u00e0 pr\u00e9sent.</p> <p>Il aussi est tout \u00e0 fait possible d'installer la plupart de ces outils en les t\u00e9l\u00e9chargeant et en ex\u00e9cutant leur programme d'installation depuis leur site internet, mais c'est plus long. </p>"},{"location":"les-outils/#vs-code","title":"VS Code","text":"<p>Le couteau suisse de la programmation.</p> <pre><code>winget install Microsoft.VisualStudioCode\n</code></pre>"},{"location":"les-outils/#uv","title":"UV","text":"<p>Le tout nouveau couteau suisse de python. Ex\u00e9cutez cette ligne dans un terminal.</p> <p><pre><code>powershell -ExecutionPolicy ByPass -c \"irm https://astral.sh/uv/install.ps1 | iex\"\n</code></pre> Red\u00e9marrez votre ordinateur.</p>"},{"location":"les-outils/#git","title":"GIT","text":"<p>Un outil de base pour g\u00e9rer \"le stockage\" de ses fichiers.</p> <pre><code>winget install Git.Git\n</code></pre> <p>Puis dans une ligne de commande, en imaginant avoir cr\u00e9\u00e9 un compte github bidule avec l'adresse email truc@gmail.com:</p> <pre><code>git config --global user.name \"bidule\"\n\ngit config --global user.email \"truc@gmail.com\"\n</code></pre> <p>Pour la facilit\u00e9 d'utilisation au quotidien (pour utiliser git comme une cl\u00e9 usb):</p> <p>Dans les settings de VSCode, recherchez <code>post commit command</code> et mettez le param\u00e8tre \u00e0 <code>sync</code></p>"},{"location":"les-outils/#graphviz","title":"Graphviz","text":"<p>Un utilitaire pour dessiner des graphes depuis python.</p> <pre><code>winget install Graphviz.Graphviz\n</code></pre>"},{"location":"les-outils/#dbeaver","title":"DBeaver","text":"<p>DBeaver permet d'interagir avec des syst\u00e8mes de gestion de bases de donn\u00e9es.</p> <pre><code>winget install dbeaver.dbeaver\n</code></pre>"},{"location":"les-outils/#miniforge","title":"Miniforge","text":"<p>Si python est install\u00e9 sur votre machine, d\u00e9sinstallez-le. Nous allons utiliser ce gestionnaire d'environnements \u00e0 la place.</p> <pre><code>winget install CondaForge.Miniforge3\n</code></pre>"},{"location":"les-outils/#msys2","title":"MSYS2","text":"<p>Cet outil simule l'environnement linux et vous permettra m\u00eame de programmer dans d'autres langages de programmation <pre><code>winget install MSYS2.MSYS2\n</code></pre></p>"},{"location":"les-outils/git/","title":"Git et Github","text":"<p>Les fonctionnalit\u00e9s de Git et de Github sont pl\u00e9thoriques. Nous n'utiliserons que 2 fonctionnalit\u00e9s de base.</p> <p>Pr\u00e9-requis</p> <ul> <li>Avoir cr\u00e9\u00e9 un compte Github</li> <li>Avoir install\u00e9 Git comme indiqu\u00e9.</li> </ul>"},{"location":"les-outils/git/#cest-quoi-un-repository","title":"C'est quoi un repository?","text":"<p>Il faut consid\u00e9rer que c'est un r\u00e9pertoire distant.</p>"},{"location":"les-outils/git/#creer-un-repository","title":"Cr\u00e9er un repository","text":"<p>Sur github</p> <p></p> <p>Cliquez sur new.</p> <p>Donnez un nom \u00e0 votre repo </p> <p>Dites que vous voulez ignorer les fichers techniques g\u00e9n\u00e9r\u00e9s par python. Ces fichiers sont de toute fa\u00e7on g\u00e9n\u00e9r\u00e9s par votre code \u00e0 votre insue quand il y en a besoin, vous n'avez pas besoin de les stocker.</p> <p></p> <p>Ignorez les autres champs et cliquez sur </p>"},{"location":"les-outils/git/#cloner-un-repository","title":"Cloner un repository","text":"<p>Lorsque vous n'avez aucun folder d'ouvert, VSCode vous propose ceci:</p> <p></p> <p>La premi\u00e8re fois que vous vous connectez \u00e0 github depuis vscode,  VSCode enclenche une communication avec votre navigateur internet pour s'y authentifier \u00e0 github.  Dites oui partout et autorisez tout \u00e0 chaque fois. Une fois ce processus termin\u00e9, vous pourrez choisir votre repository dans une liste d\u00e9roulante.</p> <p>VSCode veut maintenant savoir o\u00f9 vous voulez le cloner.</p> <p>Par exemple, j'ai toujours un r\u00e9pertoire github o\u00f9 je clone tous mes repos.</p> <p>S\u00e9lectionnez un r\u00e9pertoire et validez.</p> <p>Dites oui pour que VSCode ouvre ce r\u00e9pertoire clon\u00e9.</p>"},{"location":"les-outils/git/#travailler-avec-git","title":"Travailler avec Git","text":"<p>Travaillez normalement, mais au d\u00e9but de chaque session de travail, faites un Pull</p> <p></p> <p>A la fin d'une session de travail, faite un Commit &amp; Sync. Git oblige \u00e0 faire un commentaire Lorsqu'on fait Commit &amp; Sync. Il faut remplir le champ message juste au dessus du bouton bleu avec quelques mots descriptifs du travail r\u00e9alis\u00e9.</p>"},{"location":"les-outils/git/#au-quotidien","title":"Au quotidien","text":"<ul> <li> <p>Je travaille chez moi, je pull mes modifs du lyc\u00e9e, je bosse, je sync.</p> </li> <li> <p>J'arrive au lyc\u00e9e, je pull mes modifs de chez moi, je bosse, je sync.</p> </li> </ul> <p>Plus besoin de cl\u00e9 USB</p>"},{"location":"les-outils/setup-vscode/","title":"Setup vscode","text":""},{"location":"les-outils/setup-vscode/#setup-de-vscode","title":"Setup de VSCode","text":"<p>Un IDE (environnement de d\u00e9veloppement int\u00e9gr\u00e9) est un logiciel qui aide les programmeurs \u00e0 d\u00e9velopper.</p> <p>VSCode est de loin l'IDE le plus utilis\u00e9 (73,6% des d\u00e9veloppeurs et 77% des \u00e9tudiants du monde entier en 2024 d'apr\u00e8s la c\u00e9l\u00e8bre enqu\u00eate annuelle de stackoverflow)</p>"},{"location":"les-outils/setup-vscode/#pre-requis","title":"Pr\u00e9-requis","text":"<p>Vous avez install\u00e9 les outils recommand\u00e9s avec winget</p>"},{"location":"les-outils/setup-vscode/#configurer-vscode-pour-developper-en-python","title":"Configurer VSCode pour d\u00e9velopper en python.","text":"<p>Cliquez sur l'ic\u00f4ne des extensions </p> <p>Recherchez <code>nsi-dev</code> dans la petite barre de recherche. Cliquez sur le petit bouton bleu \"install\"</p> <p></p> <p>Ca-y-est, c'est configur\u00e9.</p>"},{"location":"les-outils/setup-vscode/#comment-travailler-avec-vscode","title":"Comment travailler avec VSCode?","text":"<p>Attention, sinon \u00e7a ne fonctionnera pas</p> <p>Dans VSCode, on ouvre TOUJOURS un r\u00e9pertoire, JAMAIS un fichier.</p> <p>File &gt; Open Folder</p> <p>Quand vous rouvrez VSCode, vous retrouvez tout comme vous l'avez laiss\u00e9 la derni\u00e8re fois que vous l'avez ouvert.</p> <p>Lorsque vous ouvrez un r\u00e9pertoire pour la premi\u00e8re fois, VSCode vous demande s'il peut avoir confiance en ce r\u00e9pertoire. Cochez la case et cliquez sur le bouton bleu, \"Yes i trust\". Il ne vous le redemandera plus pour ce r\u00e9pertoire ni pour le r\u00e9pertoire parent.</p> <p></p>"},{"location":"les-outils/setup-vscode/#gerer-les-fichiers-du-repertoire","title":"G\u00e9rer les fichiers du r\u00e9pertoire.","text":"<p>Vous pouvez directement cr\u00e9er des fichiers et des dossiers dans L'explorer de VSCode \u00e0 l'aide de ces boutons </p>"},{"location":"les-outils/setup-vscode/#gerer-vos-environnements-python","title":"G\u00e9rer vos environnements Python","text":"<p>L'extension NSI-DEV vous fournit une mani\u00e8re simplifi\u00e9e de g\u00e9rer vos environnements python. Il ne faut pas que vous ayez install\u00e9 python sur votre machine, c'est miniforge qui va se charger de faire coexister une ou pusieurs installations de python.</p> <p></p> <p>Sur l'image ci-dessus, on voit 2 environnements python utilisables que j'ai appel\u00e9 py312 (pour la version 12 de python) et py313 (pour la version 13 de python).</p> <p>Lorsque vous l'utiliserez pour la premi\u00e8re fois, il n'y en aura pas, il faudra en cr\u00e9er un en appuyant sur le bouton +</p> <p>On vous demandera alors de valider une version de python pour votre environnement, puis un nom.</p> <p>A l'heure o\u00f9 j'\u00e9cris ces lignes, je vous conseille de demander la version 3.13 et d'appeler cet environnement py313.</p> <p>Apr\u00e8s quelques instants (\u00e7a peut \u00eatre un peu long), vous verrez appara\u00eetre votre environnement.</p>"},{"location":"les-outils/setup-vscode/#programmer-en-python","title":"Programmer en Python","text":"<p>VSCode doit savoir quel environnement python utiliser pour ex\u00e9cuter vos programme, \u00e9tant donn\u00e9 qu'il peut en exister plusieurs.</p> <p>Lorsque vous avez un fichier python ouvert, il faut cliquer sur la barre d'\u00e9tat en bas \u00e0 droite, \u00e0 l'emplacement o\u00f9 vous voyez sur l'image 3.12.7('py312': conda). Une liste d\u00e9roulante va alors s'afficher o\u00f9 vous pourrez s\u00e9lectionner votre environnement. Si c'est la premi\u00e8re fois que vous ouvrez VS code, vous verrez peut-\u00eatre un bouton \"Select interpreter\" \u00e0 la place.</p> <p></p> <p>Jamais dans base</p> <p>Il existe un environnement par d\u00e9faut qui s'appelle base. L'extension le masque volontairement. N'utilisez jamais cet environnement.</p>"},{"location":"les-outils/setup-vscode/#ajouter-des-modules-python","title":"Ajouter des modules python","text":"<p>Lorsque vous voulez installer un module python, il faut ouvrir un terminal configur\u00e9 pour votre environnement. Ca se fait directement en appuyant sur le petit cube de l'image ci-dessous. (La poubelle vous permet de supprimer l'environnement)</p> <p></p> <p>Un terminal MSYS2 appara\u00eet.</p> <p>Imaginons que vous vouliez installer le module pyxel, vous pouvez alors y ex\u00e9cuter cette commande:</p> <p><code>pip install pyxel</code></p> <p>Ca y est, vous pouvez maintenant \u00e9crire <code>import pyxel</code> dans vos programmes.</p> <p>Au quotidien</p> <p>Une fois que tout \u00e7a est fait, au quotidien, il faut juste s'assurer qu'on est sur le bon environnement en bas \u00e0 droite de VSCode, \u00e9crire ses programmes et les ex\u00e9cuter avec le bouton play en haut \u00e0 droite de l'\u00e9cran.</p>"},{"location":"premi%C3%A8re/IHM/flet/","title":"Interface Homme machine","text":"<p>D\u00e9fintion</p> <p>Une Interface Homme-Machine (IHM) est un syst\u00e8me qui permet l'interaction entre un utilisateur humain et une machine, souvent un ordinateur ou un appareil num\u00e9rique. Elle joue un r\u00f4le essentiel dans la communication, facilitant la compr\u00e9hension des commandes de l'utilisateur et le retour d'informations de la machine. Les IHM incluent divers \u00e9l\u00e9ments comme des interfaces graphiques (boutons, menus, ic\u00f4nes), vocales, tactiles ou gestuelles. Leur conception vise \u00e0 \u00eatre intuitive, ergonomique et accessible, pour am\u00e9liorer l'exp\u00e9rience utilisateur et optimiser l'efficacit\u00e9 de l'interaction.</p>"},{"location":"premi%C3%A8re/IHM/flet/#flet","title":"Flet","text":"<p>Flet est un framework open-source permettant de cr\u00e9er des applications web, desktop et mobiles \u00e0 l'aide de Python. Il simplifie le d\u00e9veloppement d'interfaces utilisateur interactives sans n\u00e9cessiter de connaissances approfondies en HTML, CSS ou JavaScript. Bas\u00e9 sur le framework Flutter de Google, Flet offre des composants modernes et adaptatifs pour concevoir des applications performantes et r\u00e9actives. Id\u00e9al pour les d\u00e9veloppeurs cherchant \u00e0 rapidement prototyper ou d\u00e9ployer des applications multiplateformes.</p>"},{"location":"premi%C3%A8re/IHM/flet/#installation","title":"Installation","text":"<p>Ouvrez le terminal de votre environnement et ex\u00e9cutez cette commande pour y installer flet:</p> <pre><code>pip install flet\n</code></pre>"},{"location":"premi%C3%A8re/IHM/flet/#verifier-que-ca-marche-avec-une-fenetre-vide","title":"V\u00e9rifier que \u00e7a marche avec une fen\u00eatre vide","text":"<p>Dans un nouveau r\u00e9pertoire que vous ouvrirez dans VSCode, cr\u00e9ez un fichier app.py avec le code suivant:</p> <pre><code>import flet as ft\n\ndef main(page: ft.Page):\n    page.title = \"Page Flet Vide\"\n    # \u00e0 chaque fois qu'un ou plusieurs \u00e9l\u00e9ments visuels sont modifi\u00e9s, il faut appeler page.update()\n    page.update() \n\n# Lancer l'application\nft.app(target=main)\n</code></pre>"},{"location":"premi%C3%A8re/IHM/flet/#une-application-simple","title":"Une application simple","text":"<pre><code># type: ignore\nimport flet as ft\n\ndef fois_2(x: int) -&gt; int:\n    return 2*x\n\ndef main(page: ft.Page):\n    page.title = \"Multiplication par 2\"\n    page.vertical_alignment = ft.MainAxisAlignment.START  # Alignement au sommet\n    page.window.width = 300  # Largeur minimale\n    page.window.height = 200  # Hauteur ajust\u00e9e automatiquement\n\n    # 1. D\u00e9finir les Controls\n    input_text = ft.TextField(label=\"Entrez un nombre\")\n    result_label = ft.Text(value=\"\", color=\"blue\")\n\n    # 2. D\u00e9finir le bouton et son callback dans la fonction main\n    def bouton_click(e: ft.Control):\n        result_label.value=f\"R\u00e9sultat: {fois_2(int(input_text.value))}\"\n        page.update()\n\n    bouton = ft.ElevatedButton(\n        text=\"Multiplier par 2\",\n        on_click=bouton_click) \n\n    #bouton_click est une fonction qui est appel\u00e9e lorsque le bouton est cliqu\u00e9.\n    #On appelle cette fonction un CALLBACK.\n\n    # 3. Ajouter les widgets \u00e0 la page\n    page.add(\n        ft.Text(\"Application de multiplication par 2\", size=20),\n        input_text,\n        bouton,\n        result_label,\n    )\n\nft.app(target=main)\n</code></pre>"},{"location":"premi%C3%A8re/IHM/flet/#lancer-en-tant-quapplication-web","title":"Lancer en tant qu'application web","text":"<p>En ligne de commande, \u00e9crire: <pre><code>flet run --web app.py\n</code></pre></p> <p>Le navigateur devrait se lancer \u00e0 l'adresse http://127.0.0.1:53283  (le port peut changer)</p> <p>Comme vous l'avez appris l'ann\u00e9e derni\u00e8re, tout ordinateur est connu sur un r\u00e9seau via son adresse IP qui est unique.</p> <p>Quelle que soit son adresse IP, tout ordinateur se conna\u00eet lui-m\u00eame sous l'adresse 127.0.0.1, ou localhost.</p> <p>C'est un peu lors de la communication entre humains. Si vous vous appelez Bob et que vous avez faim, vous dites \"J'ai faim\", et pas \"Bob a faim\".</p> <p>127.0.0.1, c'est un peu le \"Je\" des machines sur un r\u00e9seau. Tout le monde a son \"Je\", qui s'appelle ici localhost (boucle locale).</p> <p>Flet a lanc\u00e9 un serveur HTTP sur lequel il sert l'application flet que vous avez cr\u00e9\u00e9 sur le PORT 53283.</p> <p>Votre ordinateur est un peu comme un immeuble. Il a une adresse certes, mais il existe plusieurs services qui ont chacun un num\u00e9ro de porte.</p> <p>Ici, flet s'est lanc\u00e9 \u00e0 la porte 53283 de l'immeuble.</p> <p>Lorsque vous allez sur internet, vous ne sp\u00e9cifiez pas de port. C'est parce qu'il y a des ports par d\u00e9faut.</p> <ul> <li>Allez sur www.google.fr:443</li> <li>Ca marche, car 443 est le port par d\u00e9fuat pour https, il n'y a pas besoin de le mettre.</li> </ul>"},{"location":"premi%C3%A8re/IHM/flet/#documentation-officielle","title":"Documentation officielle","text":"<p>La documentation officielle est tr\u00e8s bien faite et permet de tester divers contr\u00f4les.</p> <p>Lien doc flet</p> <p>Pendu</p> <p>Donnez une IHM flet \u00e0 votre pendu</p>"},{"location":"premi%C3%A8re/logique/","title":"Logique","text":""},{"location":"premi%C3%A8re/logique/#histoire","title":"Histoire","text":"<p>En 1703, Gottfried Wilhelm Leibniz fut le premier occidental \u00e0 formaliser un syst\u00e8me d\u2019op\u00e9rations \u00e0 partir de 0 et de 1, le binaire, dans son article \u201dExplication de l\u2019Arithm\u00e9tique Binaire\u201d. On retrouve des traces de pr\u00e9c\u00e9dentes tentatives en Chine dans le Yi Jing, le livre des mutations, au 9\u00e8me si\u00e8cle avant notre \u00e8re. </p> <p>Les nombres binaires \u00e9taient au centre de la th\u00e9ologie de Leibniz. Il croyait que les nombres binaires \u00e9taient symboliques de l\u2019id\u00e9e chr\u00e9tienne de creatio ex ni-hilo ou de cr\u00e9ation \u00e0 partir de rien. Leibniz essayait de trouver un syst\u00e8me qui convertisse les d\u00e9clarations verbales de la logique en un syst\u00e8me purement math\u00e9matique.</p> <p></p> <p>A partir de 1847, George Boole propose un mode de calcul permettant de traduire des raisonnements logiques par des op\u00e9rations math\u00e9matiques. Il cr\u00e9\u00e9 ainsi une branche des math\u00e9matiques qui d\u00e9finit des op\u00e9rations dans un ensemble qui ne contient que 2 \u00e9l\u00e9ments.</p> <p></p> <p>En 1938, Claude Shannon prouve que des circuits \u00e9lectroniques peuvent r\u00e9soudre tous les probl\u00e8mes que la logique de Boole peut r\u00e9soudre.</p> <p></p> <p>Avec les travaux d'Alan Turing de 1936, ceci constitue le fondement de ce qui deviendra l\u2019informatique.</p>"},{"location":"premi%C3%A8re/logique/#les-booleens","title":"Les bool\u00e9ens","text":"<p>Les bool\u00e9ens sont au nombre de 2 : au choix, \\(\\{ Vrai, Faux\\}\\) ou \\(\\{0, 1\\}\\).</p> <p>On peut utiliser l\u2019une ou l\u2019autre des repr\u00e9sentations, c\u2019est justement le principe de mod\u00e9lisation.</p> <p>D\u2019ailleurs, en python, ces 2 op\u00e9rations valent True:</p> <pre><code>0 == False\n1 == True\n</code></pre>"},{"location":"premi%C3%A8re/logique/#les-operateurs-logiques","title":"Les op\u00e9rateurs logiques","text":""},{"location":"premi%C3%A8re/logique/#et","title":"ET","text":"<p>R\u00e9pond \u00e0 la question \u201dEst-ce que les 2 sont vrais ?\u201d</p> <p>Exemple : Pour qu'une lampe s'allume dans un circuit de s\u00e9curit\u00e9, il faut que l'interrupteur ET la porte soient ferm\u00e9s.</p> <p>Si l'interrupteur est ON (ferm\u00e9) ET la porte est ferm\u00e9e, alors la lampe s'allume.</p> <p>Si l\u2019un des deux (ou les deux) est ouvert, la lampe reste \u00e9teinte.</p>"},{"location":"premi%C3%A8re/logique/#ou-inclusif","title":"OU (inclusif)","text":"<p>R\u00e9pond \u00e0 la question \u201dEst-ce qu\u2019au moins un des deux est vrai ?\u201d</p> <p>Pour qu'une alarme se d\u00e9clenche, il suffit que l\u2019une des conditions suivantes soit vraie : une fen\u00eatre OU une porte est ouverte. Si la fen\u00eatre est ouverte, l\u2019alarme sonne. Si la porte est ouverte, l\u2019alarme sonne. Si les deux sont ouvertes, l\u2019alarme sonne \u00e9galement. Si les deux sont ferm\u00e9es, l\u2019alarme ne sonne pas.</p>"},{"location":"premi%C3%A8re/logique/#non","title":"NON","text":"<p>R\u00e9pond \u00e0 la question \u201dEst-ce que c\u2019est Faux ?\u201d</p> <p>Imaginons une porte avec un voyant lumineux. Si la porte est ferm\u00e9e, le voyant lumineux est \u00e9teint. Si la porte est ouverte, le voyant lumineux s\u2019allume. En logique, cela revient \u00e0 dire : si la porte est NON ferm\u00e9e, alors le voyant est allum\u00e9.</p>"},{"location":"premi%C3%A8re/logique/#ou-exclusif","title":"OU EXCLUSIF","text":"<p>R\u00e9pond \u00e0 la question \u201dEst-ce que les deux sont diff\u00e9rents?\u201d</p> <p>Imaginons deux interrupteurs pour une lampe : un interrupteur \u00e0 l\u2019entr\u00e9e et un autre pr\u00e8s du lit. La lampe s\u2019allume seulement si les interrupteurs ne sont pas dans la m\u00eame position.</p> <ul> <li>Si les deux interrupteurs sont en position OFF ou les deux en position ON, la lampe reste \u00e9teinte.</li> <li>Si un interrupteur est ON et l\u2019autre est OFF, alors la lampe s\u2019allume.</li> </ul> <p>Il existe d'autres op\u00e9rateurs, mais qui peuvent \u00eatre construits \u00e0 partir des pr\u00e9c\u00e9dents. D'ailleurs, il ne suffit que de 2 op\u00e9rateurs pour construire tous les autres.</p>"},{"location":"premi%C3%A8re/logique/#tables-de-verite","title":"Tables de v\u00e9rit\u00e9","text":"<p>Dans une table de v\u00e9rit\u00e9, on \u00e9num\u00e8re toutes les combinaisons possibles de vrais et de faux avec les variables en entr\u00e9e (ici a et b), puis on r\u00e9pond \u00e0 la question pos\u00e9e.</p>"},{"location":"premi%C3%A8re/logique/#table-non","title":"Table NON","text":"<p>\"NON a\" renvoie le \"contraire\" de a.</p> a \\(\\bar{a}\\) 0 1 1 0"},{"location":"premi%C3%A8re/logique/#table-et","title":"Table ET","text":"<p>La table de v\u00e9rit\u00e9 donne toutes les possibilit\u00e9s de r\u00e9sultats.</p> <p>\\(a.b\\) ne r\u00e9pond Vrai que lorsque les deux sont vrais.</p> \\(a\\) \\(b\\) \\(a.b\\) 0 0 0 0 1 0 1 0 0 1 1 1"},{"location":"premi%C3%A8re/logique/#table-ou","title":"Table OU","text":"\\(a\\) \\(b\\) \\(a+b\\) 0 0 0 0 1 1 1 0 1 1 1 1"},{"location":"premi%C3%A8re/logique/#table-ou-exclusif","title":"Table OU EXCLUSIF","text":"<p>\\(a\\oplus b\\) n'est vrai que lorsque les deux sont diff\u00e9rents.</p> \\(a\\) \\(b\\) \\(a\\oplus b\\) 0 0 0 0 1 1 1 0 1 1 1 0"},{"location":"premi%C3%A8re/logique/#tables-de-verite-dexpressions","title":"Tables de v\u00e9rit\u00e9 d'expressions","text":"<p>Lorsqu'on demande d'\u00e9tablir la table de v\u00e9rit\u00e9 d'une expression bool\u00e9enne, on commence par \u00e9crire toutes les combinaisons possibles de 0 et de 1, puis on d\u00e9compose l'expression pour trouver progressivement le r\u00e9sultat.</p> <p>Afin de montrer que deux expressions logiques sont \u00e9quivalentes, on peut dresser la table de l'une et de l'autre, et conclure selon qu'elles ont la m\u00eame table de v\u00e9rit\u00e9 ou non.</p> <p>Lois de de Morgan</p> <p>1- Dresser la table de v\u00e9rit\u00e9 de \\(\\overline{a+b}\\) ainsi que de  \\(\\bar{a}.\\bar{b}\\)</p> \\(a\\) \\(b\\) \\(a+b\\) \\(\\color{red}\\overline{a+b}\\) \\(\\bar{a}\\) \\(\\bar{b}\\) \\(\\color{red}\\bar{a}.\\bar{b}\\) 0 0 0 1 1 0 1 1 <p>2- Conclure sur une \u00e9galit\u00e9</p> <p>3- Montrer que  \\(\\overline{a.b} = \\bar{a}+\\bar{b}\\)</p> <p>Ces \u00e9galit\u00e9s \u00e0 conna\u00eetre sont connues sous le nom de lois de de Morgan</p> <p>Propri\u00e9t\u00e9s de base</p> <p>Que valent les expressions suivantes?</p> <ol> <li>\\(1+a\\)</li> <li>\\(1.a\\)</li> <li>\\(0+a\\)</li> <li>\\(0.a\\)</li> <li>\\(a.\\bar{a}\\)</li> <li>\\(a+\\bar{a}\\)</li> </ol>"},{"location":"premi%C3%A8re/logique/#un-peu-delectronique","title":"Un peu d'\u00e9lectronique","text":""},{"location":"premi%C3%A8re/logique/#le-transistor","title":"Le transistor","text":"<p>Le fonctionnement d'un ordinateur r\u00e9side presque essentiellement sur un composant invent\u00e9 en 1947 et qui ne cesse de se perfectionner et de se miniaturiser encore aujourd'hui: le transistor.</p> <p>Il existe des transistors de diverses technologies. Ici je vous pr\u00e9sente le PNP.</p> <p>C'est un composant \u00e9lectronique dot\u00e9 de 3 pattes:</p> <ul> <li>(C) Le collecteur</li> <li>(B) La base</li> <li>L'\u00e9metteur</li> </ul> <p>Voici son symbole \u00e9lectrique et ce \u00e0 quoi \u00e7a ressemble: </p> <p>L'objet n'est pas ici d'\u00eatre expert en transistors mais de saisir un de ses usages fondamentaux: L'interrupteur command\u00e9.</p> <p>Si la tension \u00e0 la base n\u2019est pas suffisamment forte, le courant entre le collecteur et l\u2019\u00e9metteur est coup\u00e9.</p>"},{"location":"premi%C3%A8re/logique/#une-operation-logique-avec-des-transistors-et","title":"Une op\u00e9ration logique avec des transistors : ET","text":"<p>La LED ne s\u2019allumera que si la tension est suffisante \u00e0 la base de Q1 et de Q2. Si l\u2019une ou l\u2019autre des bases n\u2019est pas aliment\u00e9e, le courant est coup\u00e9 et la LED s\u2019\u00e9teint.</p>"},{"location":"premi%C3%A8re/logique/#portes-et-circuits-logiques","title":"Portes et Circuits logiques","text":"<p>Le circuit \u00e9lecttronique pr\u00e9c\u00e9dent se r\u00e9sume enti\u00e8rement \u00e0 la porte logique ET suivante, suivie des repr\u00e9sentations d'autres portes.</p> <p></p> <p>Interrupteurs et lampe</p> <p>On donne le circuit logique suivant avec les interrupteurs a (en haut) et b (en bas). L'interrupteur est \u00e0 1 s'il est ferm\u00e9.</p> <p></p> <p>On note la lampe S. La lampe est \u00e0 1 si elle est allum\u00e9e.</p> <ul> <li>Exprimez S en fonction de a et de b.</li> <li>Etudiez la table de v\u00e9rit\u00e9 de S</li> <li>Proposez une simplification drastique de ce circuit.</li> </ul> <p>Porte NAND</p> <p>La porte NAND r\u00e9alise l'op\u00e9ration NON(A ET B), i.e. \\(\\overline{a.b}\\)</p> <ul> <li>Dressez la table de v\u00e9rit\u00e9 de la porte NAND </li> </ul> <p>Voici son comment elle est repr\u00e9sent\u00e9e sur un circuit: </p> <p></p> <p>Turing Complete</p> <p>Ces exercices sont les premiers niveaux d'un jeu nomm\u00e9 \"turing complete\". Ce jeu, partant de la simple porte NAND, vous emm\u00e8ne jsuqu'\u00e0 construire un ordinateur entier.</p> <p>Au d\u00e9but des exercices, seule la porte NAND est utilisable. A chaque fois que vous arrivez \u00e0 cr\u00e9er une nouvelle porte, elle devient utilisable.</p> <p>R\u00e9alisez chacun de ces exercices les uns sous les autres dans l'interface suivante et sauvegardez votre travail avec le bouton \"t\u00e9l\u00e9charger le circuit\".</p> <ul> <li>Cr\u00e9er une porte NOT. Seule porte autoris\u00e9e: NAND</li> <li>Cr\u00e9er une porte AND</li> <li>Cr\u00e9er une porte OR</li> <li>Cr\u00e9er une porte NOR</li> <li>Cr\u00e9er une porte XOR</li> </ul> <p>Pourquoi appelle-t-on une porte NAND une porte universelle?</p> <p> </p>"},{"location":"premi%C3%A8re/logique/#circuit-demi-additionneur","title":"Circuit demi-additionneur","text":"<p>Ce circuit prend 2 bits en entr\u00e9e et les additionne, comme s'il s'agissait d'entiers binaires dont on pose l'addition.</p> <p>Le circuit prend en entr\u00e9e deux bits \\(a\\) et \\(b\\). Il renvoie la somme \\(S\\), ainsi que la retenue \\(C_{out}\\)</p> <p>Ainsi, on peut directement construire la table de v\u00e9rit\u00e9 du circuit r\u00e9sultant:</p> \\(a\\) \\(b\\) \\(S\\) \\(C_{out}\\) Commentaire 0 0 0 0 0+0=0 et je retiens 0 0 1 1 0 0+1=1 et je retiens 0 1 0 1 0 1+0=1 et je retiens 0 1 1 0 1 1+1=0 et je retiens 1 <ul> <li>En observant la colonne \\(s\\), on reconna\u00eet la table de v\u00e9rit\u00e9 de la porte XOR.</li> <li>En observant la colonne \\(C_{out}\\), on reconna\u00eet la table de v\u00e9rit\u00e9 de la porte AND.</li> </ul> <p>R\u00e9alisation du demi-additionneur</p> <p>R\u00e9alisez le circuit demi-additionneur dans l'interface et t\u00e9l\u00e9chargez le r\u00e9sultat.</p>"},{"location":"premi%C3%A8re/logique/#circuit-additionneur-complet-full-adder","title":"Circuit additionneur complet (Full Adder)","text":"<p>Le circuite additionneur prend en entr\u00e9e deux bits \\(a\\) et \\(b\\) ainsi qu'une retenue \\(C_{in}\\).</p> <p>Il \u00e9met 2 informations en sortie, la somme obtenue \\(S\\), ainsi que la retenue \\(C_{out}\\)</p> <p>Full-Adder</p> <ul> <li>Compl\u00e9tez la table de v\u00e9rit\u00e9 suivante pour l'additionneur complet.</li> </ul> \\(a\\) \\(b\\) \\(C_{in}\\) \\(S\\) \\(C_{out}\\) Commentaire 0 0 0 0 0 0+0+0=0 et je retiens 0 0 0 1 0 1 0 0 1 1 1 0 0 1 0 1 1 1 0 1 1 1 <ul> <li>Montrer que \\(S = a \\oplus b \\oplus C_{in}\\)</li> <li>Montrer que \\(C_{out} = (a \\oplus b) . C_{in} + a . b\\)</li> <li>R\u00e9alisez alors le circuit de l'additionneur complet et sauvegardez-le.</li> </ul> <p>Additionneur 4 bits</p> <p>Un additionneur 4 bits est compos\u00e9 d'un Half-Adder et de 3 Full-Adders en cha\u00eene. Le but est d'additionner le nombre form\u00e9 par les bits de la premi\u00e8re colonne avec le nombre form\u00e9 par les bits de la deuxi\u00e8me colonne.</p> <p>Les composants d'affichage en bas vous permettent de visualiser sous forme d\u00e9cimale chaque nombre, et il y en a aussi un pour le r\u00e9sultat.</p> <p>R\u00e9alisez ce circuit et sauvegardez-le</p> <p> </p>"},{"location":"premi%C3%A8re/prog/exercices/","title":"Exercices Algorithmique","text":""},{"location":"premi%C3%A8re/prog/exercices/#accumulation-types-primitifs","title":"Accumulation - types primitifs","text":"<p>Mode op\u00e9ratoire</p> <ul> <li>Cr\u00e9ez un fichier exos_accumulation.py</li> </ul> <p>Attention</p> <p>En informatique, on ne met jamais d'espace ni de caract\u00e8re sp\u00e9cial (accents, etc) dans un nom de fichier ou de r\u00e9pertoire.</p> <p>Pour chacun de ces exercices, il s'agit :</p> <ul> <li>d'initialiser une variable r\u00e9sultat</li> <li>de le remplir \u00e0 l'aide d'un parcours d'it\u00e9rable</li> <li>de renvoyer le r\u00e9sultat</li> </ul> <p>Cette mani\u00e8re de faire est extr\u00eamement fr\u00e9quente et constitue la base de ce que vous devez savoir faire en algorithmique. On dit qu'on accumule progressivement dans le r\u00e9sultat afin de pouvoir le renvoyer. La premi\u00e8re \u00e9tape est toujours de bien mod\u00e9liser le probl\u00e8me en \u00e9crivant une signature de fonction appropri\u00e9e, avec des noms de fonction et de param\u00e8tres choisis judicieusement pour qu'ils soient \u00e0 la fois \u00e9vocateurs de ce qu'ils repr\u00e9sentent, ni trop courts, ni trop longs.</p> <p>La premi\u00e8re chose \u00e0 consid\u00e9rer lorsqu'on travaille sur une variable est toujours: \"de quelle type est-elle?\" La r\u00e9ponse nous informe sur ce qu'on peut faire ou pas avec cette variable d'apr\u00e8s le cours. Ca devient naturel et instantan\u00e9 avec de la pratique, mais pour l'instant, vous devez faire l'effort d'y penser.</p> <p>Toute fonction devra \u00eatre test\u00e9e.</p> <p>Somme des entiers</p> <p>\u00c9crire et tester une fonction qui renvoie la somme des nombres entiers de 1 jusque n.</p> <p>Produit des entiers &gt; 0</p> <p>\u00c9crire et tester une fonction qui renvoie le produit des nombres entiers de 1 jusque n.</p> <p>On appelle ce nombre \\(n!\\) qui se lit \"n factorielle\", avec \\(0! = 1\\)</p> <p>Nombre de voyelles</p> <p>\u00c9crire une fonction qui lit une cha\u00eene de caract\u00e8res et affiche le nombre de voyelles pr\u00e9sentes dans cette cha\u00eene.</p> <p>Inverser</p> <p>Ecrire une fonction qui renvoie les caract\u00e8res d'une cha\u00eene de caract\u00e8res dans l'autre sens. inverser(\"banane\") renvoie \"enanab\".</p> <p>1 sur 2</p> <p>Ecrire une fonction qui prend une cha\u00eene de caract\u00e8re en param\u00e8tre. Elle renvoie une cha\u00eene de caract\u00e8res o\u00f9 seulement 1 caract\u00e8re sur 2 est pr\u00e9sent.</p> <p>contient</p> <p>Ecrire une fonction qui renvoie True si une cha\u00eene contient un caract\u00e8re, False sinon. On n'utilisera pas l'op\u00e9rateur <code>in</code>.</p> <p>Nombre d'occurences</p> <p>\u00c9crire une fonction qui prend en param\u00e8tres une cha\u00eene de caract\u00e8re et un caract\u00e8re et renvoie le nombre de fois o\u00f9 le caract\u00e8re appara\u00eet dans la cha\u00eene de caract\u00e8re.</p> <p>Take</p> <p>Ecrire une fonction qui renvoie les n premiers caract\u00e8res d'une cha\u00eene de caract\u00e8res. Si n est sup\u00e9rieur au nombre de caract\u00e8res, renvoyer la cha\u00eene de caract\u00e8res enti\u00e8re.</p> <p>Drop</p> <p>Ecrire une fonction qui renvoie une cha\u00eene amput\u00e9e de ses n premiers caract\u00e8res. Si n est sup\u00e9rieur au nombre de caract\u00e8re, renvoyer la cha\u00eene vide.</p>"},{"location":"premi%C3%A8re/prog/exercices/#listes","title":"Listes","text":"<p>Somme</p> <p>Ecrire et tester une fonction <code>somme</code> qui prend en param\u00e8tres une liste de floats et qui renvoie leur somme.</p> <p>Moyenne</p> <p>Ecrire et tester une fonction <code>moyenne</code> qui prend en param\u00e8tres ue liste de floats et qui renvoie leur moyenne.</p> <p>Minimum</p> <p>Ecrire et tester une fonction <code>minimum</code> qui prend en param\u00e8tres une liste d'entiers et qui renvoie le minimum.</p> <p>Il faut initialiser le minimum au premier \u00e9l\u00e9ment de la liste, et pour chaque \u00e9l\u00e9ment parcouru, mettre \u00e0 jour le minimum si c'est n\u00e9cessaire.</p> <p>Maximum</p> <p>Ecrire et tester une fonction <code>maximum</code> qui prend en param\u00e8tres une liste d'entiers et qui renvoie le minimum, sur le m\u00eame principe.</p> <p>Indice Minimum</p> <p>Ecrire et tester une fonction <code>i_minimum</code> qui prend en param\u00e8tres une liste d'entiers et qui renvoie l'index du minimum.</p> <p>Il faut initialiser le minimum au premier \u00e9l\u00e9ment de la liste, et pour chaque \u00e9l\u00e9ment parcouru, mettre \u00e0 jour le minimum si c'est n\u00e9cessaire.</p> <p>Indice Minimum \u00e0 partir de</p> <p>Ecrire et tester une fonction <code>i_minimum_partiel</code> qui prend en param\u00e8tres une liste d'entiers et un indice i_dep et qui renvoie l'index du minimum \u00e0 partir de l'indice i_dep.</p> <p>Tri</p> <p>Le probl\u00e8me du tri est fondamental en informatique. Beaucoup d'algorithmes commencent par trier les donn\u00e9es afin de pouvoir utiliser des techniques efficaces.</p> <p>Si on ne pr\u00e9cise pas l'ordre du tri, on parle de tri par ordre croissant.</p> <p>Une liste est tri\u00e9e si chaque \u00e9l\u00e9ment est plus grand que le precedent.</p> <p>Ecrire et tester une fonction <code>est_triee(lst: list[int]) -&gt; bool</code> qui prend en param\u00e8tres une liste et qui renvoie True si la liste est tri\u00e9e, False sinon.</p> <p>Echanger</p> <p>Ecrire et tester une fonction <code>echange(lst: list[int], i: int, j: int)</code> qui prend en param\u00e8tres une liste et deux indices et qui echange les valeurs des deux indices.</p> <p>Suite de syracuse</p> <p>On part d'un nombre entier \\(a&gt;0\\). Si \\(a\\) est pair, on le divise par 2 pour obtenir la prochaine valeur Si \\(a\\) est impair, on le multiplie par 3 et on ajoute 1 pour obtenir la prochaine valeur.</p> <p>Voici les diff\u00e9rentes valeurs prises, en prenant au d\u00e9part \\(a=15\\)</p> <p></p> <ul> <li> <p>\u00c9crire la suite de nombres correspondante pour \\(a=7\\).</p> </li> <li> <p>\u00c9crire une fonction <code>syracuse(a: int, n: int)</code> qui affiche les n premiers nombres de la suite pour le nombre de d\u00e9part a.</p> </li> <li> <p>Modifier la fonction pour qu'elle renvoie la liste des n premiers nombres de la suite.</p> </li> <li> <p>Modifier la fonction en <code>syracuse(a: int)-&gt; list[int]</code> pour qu'elle s'arr\u00eate d'alimenter la liste r\u00e9sultat d\u00e8s que la nouvelle valeur est 1. Testez pour a=15 et a=7. Les questions suivantes portent sur cette suite g\u00e9n\u00e9r\u00e9e se terminant par 1.</p> </li> </ul> <p>Pour un nombre de d\u00e9part a, on appelle \"temps de vol\" de la suite l'indice du dernier \u00e9l\u00e9ment de la liste.</p> <ul> <li>Quel est le temps de vol pour \\(a=15\\)? Pour \\(a=7\\)?</li> </ul> <p>On appelle altitude maximum de la suite la valeur maximum de la suite d'entier.</p> <ul> <li>Quelle est l'altitude pour \\(a=15\\)? Pour \\(a = 7\\)?</li> <li>\u00c9crire les fonctions <code>temps_de_vol(a: int) -&gt; int</code> et <code>altitude_max(a: int) -&gt; int</code>.</li> </ul> <p>Recherche: </p> <ul> <li>Qu'est-ce que la conjecture de Collatz? A-t-elle \u00e9t\u00e9 prouv\u00e9e?</li> <li>Qui est Paul Erd\u0151s? </li> <li>Il a prononc\u00e9 une phrase c\u00e9l\u00e8bre sur la conjecture de Collatz. Laquelle?</li> </ul> <p>Recherche sur le tri</p> <p>A l'aide des fonctions <code>i_miniminium_partiel</code> et <code>echanger</code>, imaginer une fonction <code>tri_selection(lst: list[int])</code> qui trie en place une liste dans l'ordre croissant.</p> <pre><code>def tri_selection(lst: list[int]):\n    for i in range(0, len(lst)-1):\n        ...\n        ...\n</code></pre> <ul> <li>Etudier ce qu'il se passe si on essaye de trier la liste vide</li> <li>Etudier ce qu'il se passe si on essaye de trier une liste \u00e0 1 \u00e9l\u00e9ment</li> </ul> <p>Compression par diff\u00e9rence</p> <p>Le codage par diff\u00e9rence (delta encoding en anglais) permet de compresser un tableau de donn\u00e9es en indiquant pour chaque donn\u00e9e, sa diff\u00e9rence avec la pr\u00e9c\u00e9dente (plut\u00f4t que la donn\u00e9e elle-m\u00eame). On se retrouve alors avec un tableau de donn\u00e9es assez petites n\u00e9cessitant moins de place en m\u00e9moire. Cette m\u00e9thode se r\u00e9v\u00e8le efficace lorsque les valeurs cons\u00e9cutives sont proches.</p> <p>Programmer la fonction <code>compresse</code> qui prend en param\u00e8tre un tableau non vide de nombres entiers et qui renvoie un tableau contenant les valeurs enti\u00e8res compress\u00e9es \u00e0 l\u2019aide cette technique.</p> <p>Exemples:</p> <pre><code>&gt;&gt;&gt; compresse([1000, 800, 802, 1000, 1003])\n[1000, -200, 2, 198, 3]\n&gt;&gt;&gt; compresse([42])\n[42] \n</code></pre> <p>D\u00e9compression</p> <p>Ecrivez une fonction <code>decompresse</code> qui d\u00e9compresse un tableau de donn\u00e9es compress\u00e9e par la m\u00e9thode pr\u00e9c\u00e9dente</p> <p>Exemples :</p> <pre><code>&gt;&gt;&gt; decompresse([1000, -200, 2, 198, 3])\n[1000, 800, 802, 1000, 1003]\n\n&gt;&gt;&gt; decompresse([42])\n[42] \n</code></pre> <p>ADN</p> <p>On donne la s\u00e9quence de nul\u00e9otide d'un brin de l'ADN sous la forme d'une cha\u00eene de caract\u00e8res. Ecrivez une fonction <code>complementaire</code> qui renvoie la sequence du brin complementaire sachant que:</p> <ul> <li>le complementaire de A est T</li> <li>le complementaire de G est C</li> <li>le complementaire de T est A</li> <li>le complementaire de C est G</li> </ul> <p>Exemple:</p> <pre><code>&gt;&gt;&gt;complementaire(\"ATTTCCGGTAAACATGT\")\n'TAAAGGCCATTTGTACA'\n</code></pre>"},{"location":"premi%C3%A8re/prog/listes/","title":"Le type list (et tuple)","text":"<p>Qu'est-ce qu'une liste?</p> <p>C'est un type de donn\u00e9e qui permet de stocker plusieurs informations de n'importe quel type.</p> <p>En Python, on peut cr\u00e9er une liste en utilisant des crochets.</p> <p>Par exemple, la liste <code>[1, 2, 3]</code> contient trois entiers, <code>1</code>, <code>2</code> et <code>3</code>.</p> <p>Une liste est mutable, ce qui signifie qu'on peut modifier son contenu une fois qu'elle est cr\u00e9\u00e9e.</p> <p>Une liste est une s\u00e9quence</p> <p>Une liste est une s\u00e9quence, comme les <code>str</code>. Tout ce qui a \u00e9t\u00e9 vu pour les str est aussi vrai pour les listes. (sauf les m\u00e9thodes sp\u00e9cifiques aux chaines de caract\u00e8re, comme is_alpha, etc...)</p> <p>Le premier indice d'une s\u00e9quence de taille \\(n\\) est 0, le deuxieme est 1, ... , et le dernier est \\(n-1\\).</p> <p>Cr\u00e9ation d'une liste</p> <p><pre><code>ma_liste = [1, 2, 3]\n</code></pre> Ici, la liste <code>ma_liste</code> contient trois \u00e9l\u00e9ments, <code>1</code>, <code>2</code> et <code>3</code>.</p> <p>Acc\u00e8s aux \u00e9l\u00e9ments d'une liste - Identique aux str</p> <p><pre><code>ma_liste = [\"ok\", \"ko\", \"truc\"]\nprint(ma_liste[0])  # Affiche ok\nprint(ma_liste[1])  # Affiche ko\nprint(ma_liste[2])  # Affiche truc  \n</code></pre> Ici, nous accedons aux \u00e9l\u00e9ments de la liste <code>ma_liste</code> en utilisant des indices.</p> <p><code>t[i]</code> est l'element num\u00e9ro <code>i</code> de la liste <code>t</code>.</p> <p>Modifier les \u00e9l\u00e9ments d'une liste</p> <p>On ne pouvait pas faire ceci avec les str car ils sont immuables. <pre><code>ma_liste = [1, 2, 3]\nma_liste[0] = 4\nprint(ma_liste)  # Affiche [4, 2, 3]\n\nma_liste[-1] = 42\nprint(ma_liste)  # Affiche [4, 2, 42]\n\nma_liste[3] = 77 # IndexError: list assignment index out of range\n</code></pre></p> <p>Concat\u00e9ner des listes</p> <p><pre><code>liste1 = [1, 2, 3]\nliste2 = [4, 5, 6]\nliste1 = liste1 + liste2\n</code></pre> Ici, nous concat\u00e9nons les listes <code>liste1</code> et <code>liste2</code>.</p> <p>Cette syntaxe ne veut pas dire qu'on modifie la liste contenue dans la variable <code>liste1</code>, ni qu'on lui ajoute des \u00e9l\u00e9ments. Ce qu'il se passe r\u00e9ellement, c'est que <code>liste1 + liste2</code> est calcul\u00e9, puis la valuer de la variable <code>liste1</code> est remplac\u00e9e par cette nouvelle liste.</p> <p>On souhaite b\u00e9n\u00e9ficier du caract\u00e8re mutable des listes, afin de ne pas avoir \u00e0 recr\u00e9er l'int\u00e9gralit\u00e9 en m\u00e9moire \u00e0 chaque fois.</p> <p>Pour ceci on dispose de m\u00e9thodes dites \"en place\", qui modifient directement la liste sans passer par une cr\u00e9ation de nouvelle liste en m\u00e9moire. Ici la m\u00e9thode extend.</p> <pre><code>ma_liste = [1, 2, 3]\nma_liste.extend([4, 5, 6])       # la m\u00e9thode extend ne renvoie rien (None)\nprint(ma_liste)  # Affiche [1, 2, 3, 4, 5, 6]\n</code></pre> <p>Ici, ma_liste a \u00e9t\u00e9 modifi\u00e9e directement en m\u00e9moire, sans avoir recours \u00e0 un calcul interm\u00e9diaire.</p> <p>Ajouter un \u00e9l\u00e9ment \u00e0 une liste</p> <p>La m\u00e9thode append est utilis\u00e9e pour ajouter un \u00e9l\u00e9ment en fin de liste.</p> <pre><code>ma_liste = [1, 2, 3]\nma_liste.append(4)             # la m\u00e9thode append ne renvoie rien (None)\nprint(ma_liste)  # Affiche [1, 2, 3, 4]\n</code></pre> <p>Attention \u00e0 ne pas confondre</p> <p>Il est tr\u00e8s important de bien diff\u00e9rencier ajouter un \u00e9l\u00e9ment (append) et concat\u00e9ner une liste \u00e0 une autre liste (extend)</p> <p>Fonctions g\u00e9n\u00e9riques aux s\u00e9quences</p> <p>Avec les tuples, on peut utiliser toutes les fonctionns disponibles pour les s\u00e9quences, comme <code>len()</code>.</p> <pre><code>lst = [1, 4, 2]  # tuple de taille 3\nprint(len(lst))  # Affiche 3\n</code></pre> <p>Parcourir une liste</p> <p>Une liste est une s\u00e9quence, tout comme unn str. Les algorithmes sont strictement identiques.</p> <p>Parcours par \u00e9l\u00e9ment: <pre><code>liste1 = [2, 9, 3]\nfor element in liste1:\n    print(element)\n</code></pre></p> <p>Ici, nous it\u00e9rons sur tous les \u00e9l\u00e9ments de la liste <code>liste1</code> et affichons chacun d'entre eux successivement.</p> <p>Parcours par indice:</p> <p><pre><code>liste1 = [1, 2, 3]\nfor i in range(len(liste1)):\n    print(liste1[i])\n</code></pre> Ici, nous it\u00e9rons sur tous les indices de la liste <code>liste1</code> et affichons chacun d'entre eux successivement.</p> <p>Algo - Accumulation</p> <p>Le principe d'accumulation est identique.</p> <p>Construire la liste des carr\u00e9s des n premiers entiers</p> <pre><code>res = []  # Liste vide\nn = 5\nfor i in range(n):\n    res.append(i**2)\nprint(res) # Affiche [0, 1, 4, 9, 16]\n</code></pre> <p>Les tuples</p> <p>C'est aussi une collection d'\u00e9l\u00e9ments, comme les listes:</p> <pre><code>t = (\"ok\", 2, \"bidule\")\nprint(t[0])  # Affiche ok\nprint(t[1])  # Affiche 2\nprint(t[2])  # Affiche bidule\nprint(t[3])  # IndexError\n</code></pre> <p>Les tuples sont, comme les str, immuables. On ne peut pas les modifier une fois cr\u00e9\u00e9s.</p> <p>Il faut consid\u00e9rer qu'on peut faire exactement la m\u00eame chose avec des tuples qu'avec des str, sauf qu'au lieu de caract\u00e8res, on manipule des valeurs de n'importe quel type.</p> <p>La seule particularit\u00e9 est le tuple \u00e0 un seul \u00e9l\u00e9ment, qui se termine par une virgule, pour ne pas le confondre avec des expressions arithm\u00e9tiques:</p> <pre><code>t = (1,)\nprint(t[0])  # Affiche 1\n\nt = (1)\nprint(t[0]) # Erreur, car t est l'int 1\n</code></pre> <p>Tuple ou liste?</p> <p>En Python, les tuples et les listes sont des structures de donn\u00e9es qui permettent de stocker plusieurs \u00e9l\u00e9ments dans une seule variable, mais ils ont des cas d'utilisation diff\u00e9rents en fonction de leurs propri\u00e9t\u00e9s.</p>"},{"location":"premi%C3%A8re/prog/listes/#les-tuples","title":"Les tuples","text":"<ul> <li>Immutables : Une fois cr\u00e9\u00e9s, leurs \u00e9l\u00e9ments ne peuvent pas \u00eatre modifi\u00e9s.</li> <li>Usage typique : Utilis\u00e9s pour repr\u00e9senter des collections de donn\u00e9es qui ne doivent pas changer, comme :</li> <li>Les coordonn\u00e9es (x, y, z).</li> <li>Les retours de fonction contenant plusieurs valeurs.</li> <li>Des ensembles de donn\u00e9es \"constantes\" (par exemple, des jours de la semaine).</li> <li>Performance : Plus rapides que les listes pour certaines op\u00e9rations, en raison de leur immutabilit\u00e9.</li> <li>Syntaxe : Les tuples sont d\u00e9finis avec des parenth\u00e8ses, par exemple : <code>mon_tuple = (1, 2, 3)</code>.</li> </ul>"},{"location":"premi%C3%A8re/prog/listes/#les-listes","title":"Les listes","text":"<ul> <li>Mutables : Leurs \u00e9l\u00e9ments peuvent \u00eatre ajout\u00e9s, modifi\u00e9s ou supprim\u00e9s apr\u00e8s leur cr\u00e9ation.</li> <li>Usage typique : Utilis\u00e9es pour des collections de donn\u00e9es qui doivent \u00eatre modifi\u00e9es, comme :</li> <li>Une liste de t\u00e2ches ou de noms d'utilisateurs.</li> <li>Des donn\u00e9es \u00e0 trier, filtrer ou parcourir.</li> <li>Des structures dynamiques qui \u00e9voluent au cours de l'ex\u00e9cution du programme.</li> <li>Performance : Plus flexibles que les tuples, mais l\u00e9g\u00e8rement plus lentes pour certaines op\u00e9rations en raison de leur mutabilit\u00e9.</li> <li>Syntaxe : Les listes sont d\u00e9finies avec des crochets, par exemple : <code>ma_liste = [1, 2, 3]</code>.</li> </ul>"},{"location":"premi%C3%A8re/prog/listes/#choisir-entre-tuple-et-liste","title":"Choisir entre tuple et liste","text":"<ul> <li>Si vous avez besoin d'une structure fixe ou d'un contenu non modifiable, utilisez un tuple.</li> <li>Si vous avez besoin d'une structure modulable ou de donn\u00e9es dynamiques, optez pour une liste.</li> </ul>"},{"location":"premi%C3%A8re/prog/strings/","title":"Cha\u00eenes de caract\u00e8res (str)","text":"<p>Les cha\u00eenes de caract\u00e8res (strings, ou <code>str</code>) en Python sont des s\u00e9quences immuables de caract\u00e8res utilis\u00e9es pour manipuler du texte.</p>"},{"location":"premi%C3%A8re/prog/strings/#creation-dune-chaine","title":"Cr\u00e9ation d'une cha\u00eene","text":"<ul> <li>Les cha\u00eenes peuvent \u00eatre entour\u00e9es de guillemets simples (<code>'</code>) ou doubles (<code>\"</code>).   <pre><code>s1 = 'Hello'\ns2 = \"World\"\n</code></pre></li> <li>Pour des cha\u00eenes multi-lignes, utilisez des triples guillemets.   <pre><code>s3 = \"\"\"Ceci\nest une cha\u00eene multi-lignes.\"\"\"\n</code></pre></li> </ul>"},{"location":"premi%C3%A8re/prog/strings/#proprietes-principales","title":"Propri\u00e9t\u00e9s principales","text":"<ul> <li>Immutabilit\u00e9 : Une cha\u00eene ne peut pas \u00eatre modifi\u00e9e apr\u00e8s sa cr\u00e9ation. Toute op\u00e9ration qui semble \"modifier\" une cha\u00eene retourne une nouvelle cha\u00eene.</li> <li>Indexation : Les caract\u00e8res sont accessibles via leur position (index).   <pre><code>s = \"Python\"\nprint(s[0])   # 'P'\nprint(s[2])   # 't'\nprint(s[-1])  # 'n' (index n\u00e9gatif pour acc\u00e9der \u00e0 la fin)\nprint(s[12])  # IndexError\n</code></pre></li> </ul>"},{"location":"premi%C3%A8re/prog/strings/#operations-courantes","title":"Op\u00e9rations courantes","text":"<ol> <li> <p>Concat\u00e9nation et r\u00e9p\u00e9tition :    <pre><code>s1 = \"Hello\"\ns2 = \"World\"\nprint(s1 + \" \" + s2)  # 'Hello World'\nprint(s1 * 3)  # 'HelloHelloHello'\n</code></pre></p> </li> <li> <p>Slicing (super pratique) : Extraire une sous-cha\u00eene.    <pre><code>s = \"Python\"\nprint(s[1:4])  # 'yth' (index 1 \u00e0 3)\nprint(s[:3])   # 'Pyt' (d\u00e9but \u00e0 index 2)\nprint(s[3:])   # 'hon' (index 3 \u00e0 la fin)\n</code></pre></p> </li> <li> <p>Longueur :    <pre><code>print(len(\"Hello\"))  # 5\n</code></pre></p> </li> <li> <p>Appartenance :    <pre><code>print('P' in \"Python\")  # True\nprint('z' not in \"Python\")  # True\n</code></pre></p> </li> </ol>"},{"location":"premi%C3%A8re/prog/strings/#formattage-de-chaines-avec-des-f-strings","title":"Formattage de cha\u00eenes avec des <code>f-strings</code>","text":"<pre><code>name = \"Alice\"\nage = 25\nprint(f\"Je m'appelle {name} et j'ai {age} ans.\")  # 'Je m'appelle Alice et j'ai 25 ans.'\n</code></pre>"},{"location":"premi%C3%A8re/prog/strings/#quelques-methodes-utiles-specifiques-aux-str-ne-pas-apprendre-par-coeur","title":"Quelques m\u00e9thodes utiles sp\u00e9cifiques aux str (ne pas apprendre par coeur)","text":"<p>Les cha\u00eenes disposent de nombreuses m\u00e9thodes int\u00e9gr\u00e9es utiles comme par exemple:    </p> <ul> <li> <p>Manipulation : <pre><code>s = \"  Python  \"\nprint(s.lower())  # '  python  '\nprint(s.upper())  # '  PYTHON  '\nprint(s.strip())  # 'Python' (supprime les espaces)\nprint(s.replace(\"Py\", \"My\"))  # '  Mython  '\n</code></pre></p> </li> <li> <p>Test de contenu :   <pre><code>s = \"123\"\nprint(s.isdigit())  # True\nprint(\"abc\".isalpha())  # True\nprint(\"abc123\".isalnum())  # True\n</code></pre></p> </li> </ul>"},{"location":"projets/intro-pyxel/","title":"Introduction \u00e0 pyxel - POO","text":"<p>L'objectif est de cr\u00e9er une classe Pixel capable de se dessiner et de se d\u00e9placer en fonction de son vecteur directionnel (dx, dy). Nous utiliserons \u00e9galement une classe App pour g\u00e9rer l'application et les \u00e9v\u00e9nements utilisateur, permettant de d\u00e9placer le pixel.</p> <pre><code>import pyxel as px\n\nclass Pixel:\n    def __init__(self, x:float, y: float, dx: float=0, dy:float=0, color:float=0):\n        \"\"\"\n        Initialise un pixel avec une position (x, y), un vecteur directeur (dx, dy) et une couleur.\n        \"\"\"\n        self.x = x\n        self.y = y\n        self.dx = dx\n        self.dy = dy\n        self.color = color\n\n    def update(self):\n        \"\"\"\n        Le pyxel se d\u00e9place toujours de son vecteur directeur\n        \"\"\"\n        pass\n\n\n    def draw(self):\n        \"\"\"\n        Dessine le pixel sur l'\u00e9cran.\n        \"\"\"\n        px.pset(int(self.x), int(self.y), self.color)\n\n\nclass Jeu:\n    def __init__(self):\n        \"\"\"\n        Un jeu g\u00e8re un Pixel.\n        \"\"\"\n        self.pixel = Pixel(px.width/2, px.height/2)\n\n    def update(self):\n        \"\"\"\n        G\u00e8re les \u00e9v\u00e9nements utilisateur pour d\u00e9placer le pixel.\n        \"\"\"\n        # Modification du vecteur directeur selon les touches fl\u00e9ch\u00e9es\n        if px.btn(px.KEY_RIGHT):\n            self.pixel.dx += 1\n        elif px.btn(px.KEY_LEFT):\n            self.pixel.dx -= 1\n        if px.btn(px.KEY_DOWN):\n            self.pixel.dy += 1\n        elif px.btn(px.KEY_UP):\n            self.pixel.dy -= 1\n\n        # Le jeu demande au pixel de se mettre \u00e0 jour\n        self.pixel.update()\n\n    def draw(self):\n        \"\"\"\n        Efface l'\u00e9cran et dessine le pixel.\n        \"\"\"\n        # Remplir l'\u00e9cran en noir\n        px.cls(0)\n        # Le jeu demande au pixel de se dessiner\n        self.pixel.draw()\n\n\nif __name__ == \"__main__\":\n    # D\u00e9marre l'application\n    pyxel.init(30, 30, title=\"Pixel en Mouvement\", fps = 10)\n    appli = Jeu()\n    pyxel.run(appli.update, appli.draw)\n</code></pre> <p>Exercices de base</p> <ol> <li>Compl\u00e9tez la m\u00e9thode update de la classe Pixel (2 lignes). Testez</li> <li>Modifiez le framerate. Testez</li> <li>Remplacez le 3\u00e8me if de la m\u00e9thode update par un elif. Analysez la diff\u00e9rence. R\u00e9tablissez le if</li> <li>Modifiez la m\u00e9thode update pour que le pixel s'arr\u00eate lorsqu'on l\u00e2che les touches.</li> <li>Le jeu g\u00e8re maintenant un groupe de Pixels. A chaque fois que l'utilisateur appuie sur la barre espace, un nouveau Pixel spawn al\u00e9atoirement avec une couleur al\u00e9atoire. Lorsque l'utilisateur utilise les fl\u00e8ches, tous les pixels bougent dans la direction donn\u00e9e. Dans Jeu:<ul> <li>Modifier la m\u00e9thode <code>__init__</code></li> <li>Ecrire une m\u00e9thode <code>spawn_pixel(self)</code></li> <li>modifier les m\u00e9thodes <code>update</code> et <code>draw</code> en cons\u00e9quence.</li> </ul> </li> <li>Un pixel ne doit pas bouger s'il d\u00e9passe de l'\u00e9cran.<ul> <li>Modifiez la classe Pixel pour tenir compte de cette informations. </li> </ul> </li> <li>Espace torique: Un pixel peut d\u00e9passer un bord mais il r\u00e9appara\u00eet au bord oppos\u00e9 (ce qui fait de l'espace de jeu un espace sans bord)<ul> <li>Modifiez la classe Pixel pour tenir compte de cette informations.</li> </ul> </li> <li>Lorsqu'on appuie sur la touche \"p\", un pixel al\u00e9atoire est supprim\u00e9.</li> </ol> <p>Remplacer un pixel par un sprite</p> <ol> <li>T\u00e9l\u00e9chargez le fichier 1.pyxres sur le site de la nuit du code<ul> <li>Il s'agit d'un fichier contenant des ressources visuelles et sonores.</li> <li>Placez le dans le m\u00eame r\u00e9pertoire que votre fichier python.</li> <li>Pyxel vient avec un \u00e9diteur de ressources. Pour visualiser les ressources du jeu, ex\u00e9cutez la commande suivante dans un terminal:     <code>pyxel edit 2.pyxres</code></li> <li>N'h\u00e9sitez pas \u00e0 bidouiller, vous ne pouvez rien casser, au pire vous pourrez ret\u00e9l\u00e9charger le fichier.</li> </ul> </li> <li>A la place d'un simple pixel, on veut maintenant utiliser un sprite<ul> <li>Pour le faire, il faut d'abord charger ce fichier dans le code juste avant de d\u00e9marrer le jeu:     <code>px.load(\"2.pyxres\")</code></li> <li>Ensuite il faut dessiner le sprite que vous aurez choisi au lieu de simplement remplir un pixel. Il n'y a qu'une ligne de code \u00e0 modifier. Je vous laisse la trouver en explorant la documentation de pyxel.</li> </ul> </li> </ol>"},{"location":"projets/jeudelavie/","title":"The Game Of Life","text":"<p>Un automate cellulaire est constitu\u00e9 d\u2019une grille r\u00e9guli\u00e8re de cellules \u00e9tant chacune dans un \u00e9tat (parmi un nombre fini d\u2019\u00e9tats possibles), et d\u2019une r\u00e8gle d\u2019\u00e9volution locale et synchrone : \u00e0 chaque \u00e9tape de temps (discret), l\u2019\u00e9tat de chaque cellule est mis \u00e0 jour en fonction de l\u2019\u00e9tat de ses voisines (et du sien).</p> <p>Pourquoi?</p> <p>Pourquoi \u00e7a int\u00e9resse certains scientifiques? Parce qu'ils cherchent \u00e0 savoir comment des structures parfois tr\u00e8s complexes \u00e9mergent d'un syst\u00e8me de r\u00e8gles extr\u00eamement simples. On dit qu'ils travaillent sur l'\u00e9mergence. Ca en int\u00e9resse d'autres juste parce qu'ils trouvent \u00e7a fascinant.</p> <p>Le math\u00e9maticien John Conway a d\u00e9fini en 1970 un automate cellulaire particulier qu\u2019il a nomm\u00e9 \u00ab jeu de la vie \u00bb. </p> <p>Il s\u2019agit d\u2019un automate dont la grille est une grille bi-dimensionnelle infinie, et chaque cellule peut prendre deux \u00e9tats 0 ou 1 (qu\u2019on appelle habituellement \u00ab \u00e9tat mort \u00bb et \u00ab \u00e9tat vivant \u00bb). Les voisines d\u2019une cellule sont les huit cellules qui l\u2019entourent.</p> <p>Qui de mieux que John Conway pour vous pr\u00e9senter son jeu:</p> <p>Tip</p> <ul> <li>Une cellule vivante au temps t meurt au temps t + 1 si elle n\u2019est entour\u00e9e que de 0 ou 1 cellule vivante (isolement), ou si elle est entour\u00e9e d\u2019au moins 4 cellules vivantes (surpopulation). Elle survit dans les autres cas.</li> <li>Une cellule morte au temps t devient vivante au temps t + 1 si elle est entour\u00e9e d\u2019exactement 3 cellules vivantes (naissance). Elle reste morte sinon.</li> </ul> <p>Ces r\u00e8gles sont illustr\u00e9es par la figure suivante.</p> <p></p>"},{"location":"projets/jeudelavie/#simulation-du-jeu-de-la-vie","title":"Simulation du jeu de la vie","text":"<p>Pour pouvoir repr\u00e9senter de mani\u00e8re finie le jeu de la vie, on modifie son comportement pour en faire un tore</p> <p>Au lieu d\u2019\u00eatre une grille infinie, c\u2019est une grille k \u00d7 k dont la colonne de gauche est voisine de la colonne de droite, et la ligne du haut voisine de la ligne du bas. De cette mani\u00e8re, la grille n\u2019a pas de bord et toute cellule poss\u00e8de exactement 8 voisines. On peut repr\u00e9senter une grille par une matrice (tableau bi-dimensionnel) de taille \\(k\u00d7k\\), o\u00f9 0 repr\u00e9sente l\u2019\u00e9tat mort et 1 l\u2019\u00e9tat vivant. La repr\u00e9sentation de la grille en Python sera une liste de listes. La num\u00e9rotation des lignes et des colonnes de la matrice ira de 0 \u00e0 (k \u2212 1).</p> <p>Repr\u00e9sentation de la grille</p> <ol> <li> <p>On consid\u00e8re une grille de taille 4. Donner la repr\u00e9sentation matricielle des deux configurations suivantes, et donner les configurations obtenues au temps t + 1 et t + 2 pour chacune. Que remarque-t-on ?</p> <p></p> </li> <li> <p>Dans la grille de taille 4, quelles sont les coordonn\u00e9es des cellules voisines de (1, 1) ? Et celles des voisines de (0, 3) ?</p> </li> <li> <p>Compl\u00e9tez les fonctions creer_grille et draw afin d'afficher une grille.</p> <pre><code>import pyxel as px\n\nVIVANTE = 1\nMORTE = 0\nTAILLE = 5\n\ntype grille = list[list[int]]\n\ndef creer_grille(k: int) -&gt; grille:\n    '''Renvoie une grille de taille k construite al\u00e9atoirement'''\n    pass\n\ndef update():\n    '''Remplace la grille par la prochaine grille'''\n    global g\n    pass\n\ndef draw():\n    '''Dessine la grille'''\n    global g\n    pass\n\npx.init(TAILLE, TAILLE, title=\"Game Of Life\")\ng = creer_grille(TAILLE)\npx.run(update, draw)\n</code></pre> </li> </ol> <p>\u00c9volution de la grille</p> <p>L'objectif ici est de ne pas s'attaquer directement \u00e0 la cr\u00e9ation de la prochaine grille, mais de se constituer des outils \u00e9l\u00e9mentaires qui vont nous permettre progressivement d'atteindre notre but.</p> <ol> <li>Donnez la matrice des nombres de voisines de la grille donn\u00e9e dans le code. Donner l'\u00e9tat suivant de la grille donn\u00e9e dans le code. Cette grille pourra vous servir de test pour vos fonctions.</li> <li>Ecrire une fonction <code>est_vivante(i: int, j: int, g: grille) -&gt; bool</code></li> <li>\u00c9crire les fonctions <code>ind_suiv</code> et <code>ind_prec</code> prenant en param\u00e8tre un indice de ligne ou de colonne et renvoient l\u2019indice de la ligne ou colonne suivante (resp. pr\u00e9c\u00e9dente) dans la grille. Attention, il faut tenir compte du caract\u00e8re torique de la grille.</li> <li> <p>\u00c9crire une fonction <code>nb_voisines_vivantes(i: int, j: int, g: grille)-&gt; int</code> qui prend en entr\u00e9e une grille et une cellule de la grille repr\u00e9sent\u00e9e par ses coordonn\u00e9es \\((i, j)\\), et renvoie le nombre de cellules vivantes autour de la cellule \\((i,j)\\).</p> </li> <li> <p>\u00c9crire une fonction <code>etat_suivant(i: int, j: int, g: grille) -&gt; int</code> qui renvoie le prochain \u00e9tat de la cellule \\((i,j)\\) en fonction des r\u00e8gles du jeu.</p> </li> <li> <p>\u00c9crire une fonction <code>grille_suivante(g:grille) -&gt; grille</code> qui prend en entr\u00e9e une grille et renvoie la prochaine grille \u00e0 afficher. Cette fonction devra faire une ligne (en compr\u00e9hension).</p> </li> <li> <p>Il ne vous reste plus maintenant qu'\u00e0 \u00e9crire une seule ligne de code pour voir se d\u00e9rouler sous vos yeux \u00e9bahis, le jeu de la vie.</p> </li> </ol> <p>Calculabilit\u00e9</p> <p>Le jeu de la vie est Turing-Complet. Tout algorithme peut y \u00eatre impl\u00e9ment\u00e9 (\u00e7a peut se d\u00e9montrer par exemple en exhibant en son sein une porte ET et une porte NON). Par cons\u00e9quent, il est impossible de pr\u00e9dire le comportement asymptotique de toute grille donn\u00e9e. </p> <p></p> <p></p>"},{"location":"projets/mastermind/","title":"MasterMind","text":""},{"location":"projets/mastermind/#prelude","title":"Pr\u00e9lude","text":"<p>Se familiariser avec les r\u00e8gles du mastermind.</p>"},{"location":"projets/mastermind/#modelisation","title":"Mod\u00e9lisation","text":"<p>On utilise une cha\u00eene de caract\u00e8res pour repr\u00e9senter les couleurs \u00e0 deviner. Sur l'image suivante, \"OVJB\" est la s\u00e9quence de couleurs \u00e0 trouver.</p> <p></p> <p>Question</p> <p>Ecrire une fonction <code>genere_sequence(n: int, couleurs: str) -&gt; str</code> qui renvoie une s\u00e9quence de n couleurs al\u00e9atoirement choisies parmi les couleurs contenues dans la cha\u00eene de caract\u00e8res couleurs.</p> <p>Question</p> <p>Ecrire une fonction <code>affiche_sequence(s: str)</code> qui affiche la s\u00e9quence s dans le terminal. On pourra utiliser le module colorama afin de permettre un affichage color\u00e9 dans le terminal.</p> <p>Question</p> <p>Ecrire une fonction <code>compare_sequences(s1: str, s2: str) -&gt; str</code>. Cette fonction renvoie une str contenant le nombre de couleurs correctement plac\u00e9es et le nombre de couleurs mal plac\u00e9es. Par exemple, si <code>s1 = \"OVJB\"</code> et que <code>s2 = \"VOJA\"</code> alors la fonction renvoie \"21\", \u00e0 savoir 2 mal plac\u00e9s et 1 correctement plac\u00e9.</p> <p>Question</p> <p>Ecrire une fonction <code>tour_de_jeu(s: str)</code> qui demande une s\u00e9quence au joueur pour la s\u00e9quence \u00e0 deviner <code>s</code> et qui renvoie la str renvoy\u00e9e par <code>compare_sequences</code>.</p> <p>Question</p> <p>En vous inspirant de la boucle principale du pendu, compl\u00e9tez le jeu de mastermind.</p>"},{"location":"projets/othello/","title":"Othello","text":"<p>Il s'agit ici de construire un jeu d'Othello, ou Reversi.</p> <p>Je vous laisse vous documenter sur ce jeu et y jouer afin de vous en approprier les r\u00e8gles.</p>"},{"location":"projets/othello/#code-python-de-depart","title":"Code python de d\u00e9part","text":"<pre><code>VIDE = 0\nBLANC = 1   # joueur 1\nNOIR = 2    # joueur 2\n\ntype grille = list[list[int]]\ntype coup = tuple[int, int]\n\ndef autre(joueur: int) -&gt; int:\n    \"\"\"\n    Retourne l'autre joueur\n    \"\"\"\n    assert joueur in (1,2), \"Seuls les joueurs 1 et 2 sont possibles\"\n    return 3-joueur\n\ndef peut_jouer(c: coup, joueur: int, g: grille) -&gt; bool:\n    \"\"\"Cette fonction a besoin d'exister pour l'affichage.\n    Vous l'\u00e9crirez en chemin \"\"\"\n    return False\n\ndef show(joueur: int, g: grille):\n    \"\"\"\n    Affiche la grille g, le joueur allant jouer \u00e9tant donn\u00e9\n    \"\"\"\n    print( \"\".join(f\"   {j}\" for j in range(8)))\n    print(\" \u250c\u2500\u2500\u2500\"+ 7*\"\u252c\u2500\u2500\u2500\" +\"\u2510\")\n    for i in range(8):\n        print(f\"{i}\u2502\", end=\"\")\n        for j in range(8):\n            if g[i][j]==NOIR:\n                print(\" \u25cb \", end=\"\u2502\")\n            elif g[i][j]==BLANC:\n                print(\" \u25cf \", end=\"\u2502\")\n            elif peut_jouer((i,j), joueur, g):\n                print(\" . \", end=\"\u2502\")\n            else:\n                print(\"   \", end=\"\u2502\")\n        print()\n        if i == 7:\n            print(\" \u2514\u2500\u2500\u2500\"+ 7*\"\u2534\u2500\u2500\u2500\" +\"\u2518\")\n        else:\n            print(\" \u251c\u2500\u2500\u2500\"+ 7*\"\u253c\u2500\u2500\u2500\" +\"\u2524\")\n    print(f\"C'est le tour du joueur {joueur}\")\n</code></pre>"},{"location":"projets/othello/#ecriture-progressive-des-fonctions-necessaires","title":"Ecriture progressive des fonctions n\u00e9cessaires","text":"<p>1. Poser un pion</p> <p>Ecrire <code>poser_pion(c: coup, joueur: int, g: grille)</code></p> <p>Cette fonction modifie en place la grille g sachant que le joueur donn\u00e9 a jou\u00e9 le coup c. Trivial</p> <p>2. Cr\u00e9er la grille</p> <p>Ecrire <code>creer_grille() -&gt; grille</code></p> <p>Cette fonction initialise la grille \u00e0 un d\u00e9but de partie.</p> <p><code>show(1, creer_grille())</code> doit afficher ceci:</p> <p></p> <p>3. Pouvoir jouer</p> <p>Ecrire <code>peut_jouer(c: coup, joueur: int, g: grille) -&gt; bool</code></p> <p>Cette fonction touche au coeur du fonctionnement du jeu. Le joueur peut jouer si lorsqu'il joue le coup c, il peut capturer d'autres pions. On pourra proc\u00e9der pour chaque direction \u00e0 partir du coup jou\u00e9.</p> <p>Lorsque la fonction sera correcte, l'affichage devra ressembler \u00e0 \u00e7a:</p> <p></p> <p>Les petits points sont les endroits ou le joueur peut jouer.</p> <p>4. Coups possibles</p> <p>Ecrire <code>coups_possibles(joueur: int, g: grille) -&gt; tuple[coup,...]</code></p> <p>En utilisant la fonction pr\u00e9c\u00e9dente, \u00e9crire une fonction qui renvoie tous les coups possibles pour le joueur sur la grille.</p> <p>5. Score</p> <p>Ecrire <code>get_score(g: grille) -&gt; tuple[int, int]</code></p> <p>Cette fonction renvoie le score des blanc et celui des noirs sur la grille. Le score se calcule ainsi: 1 point par pion pr\u00e9sent.</p> <p>6. Jouer un coup</p> <p>Ecrire <code>jouer_coup(c: coup, joueur: int, g: grille) -&gt; grille</code></p> <p>Cette fonction est la pierre angulaire du jeu.</p> <p>Elle ne modifie pas g, mais renvoie une copie modifi\u00e9e de g o\u00f9 le joueur a jou\u00e9 le coup c.</p> <p>Il faut:</p> <ol> <li>Poser le pion</li> <li>Retourner tous les pions qu'il est possible de retourner.</li> </ol> <p>Le retournement n'est qu'une adaptation de l'algorithme qui d\u00e9termine si on peut jouer.</p> <p>7. Game Over</p> <p>Ecrire <code>is_game_over(g: grille) -&gt; bool</code></p> <p>Le jeu est termin\u00e9 si ni les blanc, ni les noirs ne peuvent jouer.</p>"},{"location":"projets/othello/#boucle-principale","title":"Boucle principale","text":"<p>8. Partie \u00e0 2 joueurs humains</p> <p>Ecrire <code>partie2j()</code> qui est la boucle principale pour la partie \u00e0 2 joueurs humains. Les humains entrent les coordonn\u00e9es de la grille qu'ils souhaitent jouer dans la console. On adoptera ce format d'entr\u00e9e utilisateur:</p> <ul> <li>Si l'humain entre <code>46</code>, c'est qu'il veut jouer le coup <code>(4,6)</code></li> </ul> <p>Vous blinderez la v\u00e9rification de ce qu'entre l'utilisateur afin qu'on ne puisse pas rentrer n'importe quoi.</p>"},{"location":"projets/othello/#ihm","title":"IHM","text":"<p>9. Peintres en pixels</p> <p>Donnez \u00e0 ce jeu l'interface graphique de votre choix. (Flet par exemple)</p>"},{"location":"projets/othello/#strategie","title":"Strat\u00e9gie","text":"<p>10. Strat\u00e9gie</p> <p>R\u00e9fl\u00e9chissez \u00e0 une strat\u00e9gie pour gagner \u00e0 ce jeu.</p> <p>Je propose de r\u00e9fl\u00e9chir \u00e0 quelles cases il est important d'occuper, ou de ne pas occuper.</p> <p>On peut aussi d\u00e9terminer des phases de jeu, et ajuster en cons\u00e9quence au cours de la partie.</p>"},{"location":"projets/othello/#ia","title":"IA","text":"<p>11. Pour la suite</p> <p>Ecrire <code>grilles_possibles(joueur: int, g: grille) -&gt; list[tuple[grille,coup]]</code></p> <p>Cette fonction renvoie la liste des grilles issues de chaque coup possible du joueur, chacune accompagn\u00e9e du coup en question.</p> <p>En compr\u00e9hension, cette fonction fait une ligne.</p> <p> Intelligence artificielle </p> <p>Il s'agit dans un premier temps de se renseigner sur l'algorithme du minimax. C'est l'algorithme \u00e0 la base de deep blue, qui a battu Kasparov aux \u00e9checs.</p> <p>Il faut donc chercher des sites qui en parlent, demander \u00e0 chat gpt, regarder des vid\u00e9os youtube (ne surtout pas avoir peur de l'anglais). C'est souvent \u00e0 travers la diversification des sources d'information qu'on finit par se faire une bonne id\u00e9e de quelque chose.</p> <p>Othello est un jeu \u00e0 2 joueurs:</p> <ul> <li>non-coop\u00e9ratif  (les joueurs ne coop\u00e8rent pas)</li> <li>synchrone (Les joueurs jouent alternativement)</li> <li>\u00e0 information compl\u00e8te (Les joueurs connaissent l'\u00e9tat du jeu \u00e0 tout moment, il n'y a rien de cach\u00e9 ou d'al\u00e9atoire)</li> <li>\u00e0 nombre fini de strat\u00e9gies pures (\u00e0 chaque tour, un joueur a un ensemble limit\u00e9 de coups possibles, et bien que le nombre de combinaisons de coups  soit tr\u00e8s \u00e9lev\u00e9, il reste fini)</li> <li>\u00e0 somme nulle (le gain d'un joueur est exactement compens\u00e9 par la perte de l'autre, La somme des scores des deux joueurs est toujours \u00e9gale au nombre total de pions sur le plateau)</li> </ul> <p>Votre travail sur la strat\u00e9gie doit vous permettre de d\u00e9gager une heuristique. Ce travail est en soi une vraie probl\u00e9matique qui peut \u00eatre pr\u00e9sent\u00e9e en grand oral.</p> <p>Vous pouvez, \u00e0 l'issue de vos recherches, l'impl\u00e9menter en python.</p> <p>J'accompagnerai ceux qui souhaitent r\u00e9aliser cette impl\u00e9mentation.</p>"},{"location":"projets/pendu/","title":"Le pendu","text":"<p>Objectifs</p> <p>Appliquer tout ce que nous avons vu depuis le d\u00e9but de l'ann\u00e9e. R\u00e9aliser des petits algorithmes.</p> <p>Se familiariser avec:</p> <ul> <li>La prise en main d'un IDE</li> <li>Ce qu'est un programme structur\u00e9</li> </ul>"},{"location":"projets/pendu/#architecture","title":"Architecture","text":"<p>Le fichier \u00e0 \u00e9crire est divis\u00e9 en 2 parties:</p> <ul> <li>les fonctions relatives au jeu du pendu en g\u00e9n\u00e9ral.</li> <li>les fonctions relatives \u00e0 son ex\u00e9cution en mode console (elles seront pr\u00e9fix\u00e9es par \"__\").</li> </ul>"},{"location":"projets/pendu/#preparation","title":"Pr\u00e9paration","text":"<ul> <li>Cr\u00e9ez un r\u00e9pertoire \"pendu\" et ouvrez le dans VSCode  (Voir Setup VSCode).</li> <li>Cr\u00e9ez-y un fichier pendu.py</li> <li>Cr\u00e9ez-y un fichier tests.py</li> </ul> <p>je vous donnerai un fichier images.py contenant les \"images\" du pendu, que vous y ajouterez.</p>"},{"location":"projets/pendu/#mission-1","title":"Mission 1","text":"<p>Voici la premi\u00e8re partie du code de pendu.py que vous devez compl\u00e9ter.</p> <p>Vos fonctions doivent \u00eatre bien test\u00e9es avant de continuer. Vous pourrez les tester dans le fichier tests.py.</p> <p>Appeler des fonctions d'autres fichiers</p> <p>Dans le fichier tests.py, vous pouvez appeler des fonctions de pendu.py en utilisant <code>pendu.choisir_mot()</code> par exemple. Mais pour ceci, il faut ajouter <code>import pendu</code> au d\u00e9but du fichier tests.</p> <pre><code>import random\nimport images\n\nMOTS = [\"python\", \"ordinateur\", \"pendu\", \"clavier\", \"souris\", \"programmation\", \"console\"]\n\ndef choisir_mot() -&gt; str:\n    \"\"\"\n    Renvoie un mot al\u00e9atoire dans la liste de mots pr\u00e9d\u00e9finis.\n    \"\"\"\n    pass\n\ndef mot_a_afficher(mot: str, lettres_trouvees: str) -&gt; str:\n    \"\"\"\n    Renvoie le mot avec des lettres r\u00e9v\u00e9l\u00e9es si elles ont \u00e9t\u00e9 devin\u00e9es,\n    et des underscores pour les lettres restantes.\n    &gt;&gt;&gt; get_mot_ecran(\"garage\", \"u\")\n    '______'\n    &gt;&gt;&gt; get_mot_ecran(\"garage\", \"uae\")\n    '_a_a_e'\n\n    \"\"\"\n    pass\n\n\ndef valider_lettre(s: str, lettres_tentees: str) -&gt; int:\n    \"\"\"\n    Renvoie:\n    - 1 si \u00e7a n'est pas une lettre\n    - 2 si la lettre a d\u00e9j\u00e0 \u00e9t\u00e9 tent\u00e9e\n    - 0 sinon\n    \"\"\"\n    pass\n\n\ndef a_trouve(mot: str, lettres_trouvees: str) -&gt; bool:\n    \"\"\"Renvoie True si le mot est enti\u00e8rement devin\u00e9, False sinon.\n    &gt;&gt;&gt; a_trouve(\"garage\", \"\")\n    False\n    &gt;&gt;&gt; a_trouve(\"garage\", \"ae\")\n    False\n    &gt;&gt;&gt; a_trouve(\"garage\", \"gare\")\n    True\n    \"\"\"\n    pass\n\ndef intercaller_espaces(s:str) -&gt; str:\n    \"\"\"\n    Cette fonction renvoie la cha\u00eene o\u00f9 on a intercall\u00e9 des espaces entre chaque caract\u00e8re.\n    &gt;&gt;&gt; intercaller_espaces(\"python\")\n    'p y t h o n'\n    \"\"\"\n\ndef tour_de_jeu(mot: str, lettre: str, lettres_trouvees: str, lettres_tentees: str, essais_restants: int,\n                fn_message: Callable[[str], None]=print) -&gt; tuple[int, str, str]:\n    \"\"\"\n    V\u00e9rifie si la lettre est dans le mot et renvoie les variables essais_restants, lettres_trouvees et lettres_tentees mises \u00e0 jour.\n\n    Utilise la fonction fn_message pour afficher un message \u00e0 l'utilisateur pour lui indiquer s'il a trouv\u00e9 ou pas. Par d\u00e9faut, la fonction est print.\n\n    &gt;&gt;&gt; tour_de_jeu(\"garage\", \"a\", \"\", \"\", 5)\n    (5, 'a', 'a')\n    \"\"\"\n    pass\n</code></pre>"},{"location":"projets/pendu/#mission-2","title":"Mission 2","text":"<p>Ecrire la fonction __partie_pendu()</p> <pre><code>def __image_pendu(essais_restants: int) -&gt; str:\n    \"\"\"\n    Cette fonction renvoie l'image du pendu correspondant au nombre d'essais restants\n    \"\"\"\n    pass\n\n\ndef __partie_pendu_console() -&gt; bool:\n    \"\"\"\n    Lance une partie de pendu. Renvoie True si le joueur a gagn\u00e9, False sinon.\n    Description de ce que doit faire cette fonction:\n    - Initialise les variables de jeu:\n        - mot, le mot \u00e0 trouver\n        - lettres_trouvees, une str contenant toutes les lettres trouv\u00e9es par l'utilisateur\n        - lettres_tentees, une str contenant toutes les lettres tent\u00e9es par l'utilisateur\n        - essais_restants  le nombre d'essais restants\n    - Affiche un message de bienvenue\n    - Boucle jusqu'au fin de la partie\n        - Affiche le mot avec des lettres r\u00e9v\u00e9l\u00e9es si elles ont \u00e9t\u00e9 devin\u00e9es. Les lettres sont s\u00e9par\u00e9es par des espaces\n        - Demande une lettre au joueur, recommence \u00e0 demander si la lettre est invalide\n        - Proc\u00e8de \u00e0 un tour de jeu\n        - Affiche le pendu.\n    \"\"\"\n    pass\n</code></pre> <p>Ecrire la fonction</p> <pre><code>def __lancer_jeu_console():\n    \"\"\"\n    Cette fonction lance une partie et demande si l'utilisateur veut rejouer. Elle maintient un score.\n    D\u00e8s que le joueur a perdu, elle affiche son score (1 point par partie gagn\u00e9e)\n    \"\"\"\n</code></pre> <p>Am\u00e9liorations</p> <ul> <li>Gestion des accents et caract\u00e8res sp\u00e9ciaux. Lorsqu'on propose 'e', le jeu d\u00e9couvre les \u00e9, \u00e8, etc.</li> <li>R\u00e9cup\u00e9rer la liste des mots depuis un fichier contenant tous les mots du dictionnaire.</li> </ul> <p>God mode</p> <p>Cette vid\u00e9o parlant du jeu du pendu propose aussi une mani\u00e8re de le rendre tr\u00e8s difficile. Impl\u00e9mentez cette mani\u00e8re de faire. Ceci n'a de sens que si vous avez r\u00e9alis\u00e9 les am\u00e9liorations.</p> <p></p>"},{"location":"projets/space_invader/","title":"Projet space invader","text":"<p>L'objectif est de cr\u00e9er un \"space invader\" like  (original: https://freeinvaders.org )</p> <p>Nous allons utiliser le retro game engine pyxel (<code>pip install pyxel</code>)</p> <p>Propret\u00e9</p> <p>La tr\u00e8s grande majorit\u00e9 des exemples sur internet de jeux pyxels ne sont pas propres du tout. Merci de ne pas vous en inspirer afin de ne pas prendre de mauvaises habitudes. A ce titre, c'est la raison pour laquelle je vous guide afin de le faire proprement, dans la limite du raisonable.</p> <p>Voici la mod\u00e9lisation de ce space invader o\u00f9 nous utilisons l'h\u00e9ritage \u00e0 fin de simplification (Je consid\u00e8re l'h\u00e9ritage comme faisant partie de la zone proximale de d\u00e9veloppement). Sans h\u00e9ritage, il faudrait g\u00e9rer dans toutes les classes tous les attributs et m\u00e9thodes d'EltGraphique. Il reste toujours possible de les adapter dans les classes filles.</p> <pre><code>classDiagram\n    EltGraphique &lt;|-- Vaisseau\n    EltGraphique &lt;|-- Ennemi\n    EltGraphique &lt;|-- Missile\n    EltGraphique : +float x\n    EltGraphique : +float y\n    EltGraphique : +float dx\n    EltGraphique : +float dy\n    EltGraphique : +int height\n    EltGraphique : +int width\n    EltGraphique : +int u\n    EltGraphique : +int v\n    EltGraphique : +draw()\n    EltGraphique : +update()\n    EltGraphique : +bool collision(EltGraphique)\n\n    class Jeu{\n        +int score\n        +draw()\n        +update()\n        -check_collisions()\n    }\n    class Ennemi{\n        +tirer()\n    }\n    class Vaisseau{\n        +tirer()\n    }\n    Jeu \"1\"--\"1\" Vaisseau\n    Jeu \"1\"--\"*\" Ennemi\n    Ennemi \"1\"--\"*\" Missile\n    Vaisseau \"1\"--\"*\" Missile</code></pre>"},{"location":"projets/space_invader/#element-graphique","title":"Element graphique","text":"<p>Un El\u00e9ment Graphique est quelque chose qui peut appara\u00eetre \u00e0 l'\u00e9cran.</p> <ul> <li>Il a une position x, y dans le plan.</li> <li>Il a un vecteur de d\u00e9placement dx, dy duquel il se d\u00e9place en permanence</li> <li>Il a une coordonn\u00e9e dans le fichier de ressource pour aller y rechercher son image.</li> <li>Il a une largeur <code>width</code> et une hauteur <code>height</code>.</li> <li>Il sait se dessiner \u00e0 l'\u00e9cran.</li> <li>Il sait se mettre \u00e0 jour en fonction de son vecteur directeur.</li> <li>Il sait dire s'il est en collision avec un autre \u00e9l\u00e9ment graphique (voir fonction donn\u00e9e plus bas).</li> </ul> <p>Par exemple, Un Vaisseau EST UN Element Graphique.</p> <p>Danger</p> <p>Les vecteurs de position et de d\u00e9placement seront g\u00e9r\u00e9s en float. Par contre l'affichage attendra des ints. C'est \u00e9quivalent \u00e0 dire qu'on r\u00e9fl\u00e9chit au mouvement dans \\(\\mathbb{R^2}\\) mais qu'on affiche dans \\(\\mathbb{Z^2}\\)</p>"},{"location":"projets/space_invader/#le-jeu","title":"Le Jeu","text":"<p>Le jeu est le chef d'orchestre.</p> <p>il g\u00e8re:</p> <ul> <li>Un Vaisseau </li> <li>Des Ennemis</li> <li>Un Score</li> <li>Les \u00e9v\u00e8nements utilisateurs dans sa m\u00e9thode update</li> </ul> <p>Le Jeu doit pouvoir spawner un ennemi \u00e0 une certaine position pour un certain vecteur de d\u00e9placement. Le jeu sait se dessiner et demander \u00e0 ses vaisseaux et \u00e0 ses ennemis de se mettre \u00e0 jour et de se dessiner.</p> <p>Le jeu sait tester toutes les collisions et agir en cons\u00e9quence.</p>"},{"location":"projets/space_invader/#le-vaisseau","title":"Le Vaisseau","text":"<p>Un vaisseau doit pouvoir tirer un nouveau missile. Un vaisseau conna\u00eet la liste de ses missiles et sait leur demander de se mettre \u00e0 jour et de se dessiner. </p>"},{"location":"projets/space_invader/#lennemi","title":"L'ennemi","text":"<p>Un ennemi doit pouvoir tirer un nouveau missile. Un ennemi conna\u00eet la liste de ses missiles et sait leur demander de se mettre \u00e0 jour et de se dessiner. </p>"},{"location":"projets/space_invader/#le-missile","title":"Le missile","text":"<p>C'est un \u00e9l\u00e9ment Graphique simple.</p>"},{"location":"projets/space_invader/#optionnel","title":"Optionnel","text":"<ul> <li>Il existe plusieurs types d'ennemis plus ou moins puissants.</li> <li>Il y a un boss ded fin de niveau.</li> <li>Les ennemis et le vaisseau peuvent avoir des points de vie.</li> <li>Le jeu peut cr\u00e9er une explosion \u00e0 un certain endroit</li> <li>Les ennemis peuvent drop des Bonus (invincibilit\u00e9, changement de missile, ...) La liste est sans fin.</li> </ul> <p>Ne vous lancez pas dans les fonctionnalit\u00e9s optionnelles sans avoir un code propre et compl\u00e8tement test\u00e9. Ne vous lancez pas dans une am\u00e9lioration sans avoir pens\u00e9 sa mod\u00e9lisation. Si vous \u00e9crivez trop de code, c'est que vous avez peut-\u00eatre pris un mauvais chemin.</p>"},{"location":"projets/space_invader/#les-collisions","title":"Les collisions","text":"<p>Rajoutez cette m\u00e9thode dans votre classe EltGraphique. L'objectif ici, c'est que vous vous plongiez dans la POO, pas d'\u00e9tudier la collision d'objets dans l'espace (tr\u00e8s vaste sujet), donc je vous la donne. (La collision peut faire l'objet d'un grand oral maths/info.)</p> <pre><code>def collision(self, other: 'EltGraphique') -&gt; bool:\n    \"\"\" Cette m\u00e9thode d\u00e9tecte les collisions entre 2 boites\n    rectangulaires. Les rectangles doivent avoir des attributs:\n    x, y, width, height\n    Elle renvoie True si les deux bo\u00eetes sont en collision.\n    \"\"\"\n    return not ( \n               (other.x &gt;= self.x + self.width)   \n            or (other.x + other.width &lt;= self.x)  \n            or (other.y &gt;= self.y + self.height) \n            or (other.y + other.height &lt;= self.y) \n     )\n</code></pre> <p>Pour aller plus loin dans les collisions, vous pouvez vous int\u00e9resser au th\u00e9or\u00e8me des axes s\u00e9parateurs (Accessible sp\u00e9 math), ou encore \u00e0 GJK, qui utilise la somme de Minkowski (Difficile \u00e0 ce stade, mais je vous le mets quand m\u00eame parce que c'est beau)</p> <p>La d\u00e9tection de collisions utilise en fait plusieurs algorithmes. Un algorithme pour voir \"en gros\" qui pourrait entrer en collision en effectuant un partitionnement de l'espace (Broad phase). Un algorithme pour voir d'un peu plus pr\u00e8s ce qui pourrait \u00eatre en collision d'apr\u00e8s le r\u00e9sultat du broad en utilisant la fonction que je vous ai donn\u00e9, ou SAT, ou autre (Mid phase). Un algorithme pour d\u00e9terminer au pixel pr\u00e8s ce qui entre en collision d'apr\u00e8s le r\u00e9sultat du Mid avec par exemple GJK (Narrow phase).</p>"},{"location":"terminale/complements_python/","title":"Compl\u00e9ments sur le tri, min et max","text":""},{"location":"terminale/complements_python/#trier-une-liste-basique","title":"Trier une liste - basique","text":"<pre><code>L = [3, 8, 2]\n\n&gt;&gt;&gt; sorted(L)\n[2, 3, 8]\n</code></pre>"},{"location":"terminale/complements_python/#trier-en-fonction-de","title":"Trier \"en fonction de\"","text":"<pre><code>students = [\n    {'name': 'Alice', 'score': 85},\n    {'name': 'Bob', 'score': 70},\n    {'name': 'Charlie', 'score': 95},\n    {'name': 'David', 'score': 80}\n]\n\n# Trie les \u00e9tudiants en fonction de leurs notes (ordre croissant)\n\ndef get_score(etudiant: dict) -&gt; int:\n    return etudiant['score']\n\n# La liste d'\u00e9tudiant est tri\u00e9e en fonction du score \n# (de la fonction qui prend un \u00e9tudiant et qui renvoie son score)\nsorted_students = sorted(students, key=get_score)\n</code></pre>"},{"location":"terminale/complements_python/#idem-pour-min-et-max","title":"Idem pour min et max","text":"<p>Il faut conna\u00eetre \u00e7a pour comprendre le cours de programmation dynamique. Si on ne les utilise pas, le code devient incompr\u00e9hensible, un vrai fouilli de boucles partout.</p>"},{"location":"terminale/complements_python/#trouve-letudiant-ayant-la-note-la-plus-basse-calcule-le-minimum-en-fonction-du-score-renvoye-par-un-etudiant","title":"Trouve l'\u00e9tudiant ayant la note la plus basse (calcule le minimum en fonction du score renvoy\u00e9 par un \u00e9tudiant)","text":"<pre><code>min_student: dict = min(students, key=get_score)\n</code></pre>"},{"location":"terminale/complements_python/#trouve-letudiant-ayant-la-note-la-plus-haute-calcule-le-maximum-en-fonction-du-score-renvoye-par-un-etudiant","title":"Trouve l'\u00e9tudiant ayant la note la plus haute (calcule le maximum en fonction du score renvoy\u00e9 par un \u00e9tudiant)","text":"<pre><code>max_student: dict = max(students, key=get_score)\n</code></pre>"},{"location":"terminale/complements_python/#trouver-la-liste-de-taille-minimum","title":"Trouver la liste de taille minimum","text":"<pre><code>listes = [\n    [1, 2, 3],\n    [4, 5],\n    [6, 7, 8, 9],\n    [10]\n]\n\n\n# On cherche le minimum en fonction de la taille \n# (de la fonction qui prend unne liste et qui renvoie sa taille)\nmin_liste = min(listes, key=len)\n\nprint(\"La liste de taille minimum est: \", min_liste)\n&gt;&gt;&gt; La liste de taille minimum est: [10]\n</code></pre>"},{"location":"terminale/complements_python/#lambda","title":"Lambda","text":"<p>Si la fonction est toute petite, on peut utiliser une fonction anonyme (<code>lambda</code>)</p> <pre><code>max_student: dict = max(students, key=lambda s: s['score'])\n</code></pre> <p>key vaut la fonction qui \u00e0 un \u00e9tudiant <code>s</code> associe son score. </p>"},{"location":"terminale/bdd/","title":"Base de donn\u00e9es et SGBD","text":"<p>EN CONSTRUCTION</p> <p>Introduction</p> <p>Une base de donn\u00e9es est un ensemble de donn\u00e9es structur\u00e9es.</p> <p>Un syst\u00e8me de gestion de bases de donn\u00e9es (SGBD) est un outil permattant de stocker et d'interagir avec des bases de donn\u00e9es.</p> <p>Il existe plusieurs mod\u00e8les pour stocker les donn\u00e9es dans une base de donn\u00e9es.</p> <p>Nous allons nous int\u00e9resser au mod\u00e8le dit relationnel.</p> <p>Nous utiliserons les SGBD SQLite et Postgresql.</p>"},{"location":"terminale/bdd/#le-modele-relationnel","title":"Le mod\u00e8le relationnel","text":"<p>Nous travaillerons avec cette base de donn\u00e9es exemple bien connue qui s'appelle chinook.</p> <p></p>"},{"location":"terminale/bdd/#la-theorie-de-lalgebre-relationnelle","title":"La th\u00e9orie de l'alg\u00e8bre relationnelle","text":"<p>Ne vous laissez pas avoir par le caract\u00e8re ronflant des d\u00e9finitions. Au final, on manipule des lignes et des colonnes.</p> <p>Relation</p> <p>Une relation est un ensemble fini d'entit\u00e9s relevant d'un m\u00eame concept. les entit\u00e9s sont d\u00e9crites par certaines de leur caract\u00e9ristiques. Une relation a un nom par lequel elle est identifi\u00e9e.</p> <p>Sur le dessin de la base de donn\u00e9es, Chaque \"bo\u00eete\" est une relation. Par exemple, on a la relation Artiste.</p> <p>Attributs</p> <p>Toute caract\u00e9ristique d\u00e9crivant les entit\u00e9s de la relation est appel\u00e9e attribut de la relation.</p> <p>Par exemple, la relation Artiste a l'attribut Name.</p> <p>Domaine d'un attribut</p> <p>Chaque attribut a un domaine. Il s'agit de l'ensemble des valeurs que peut prendre l'attribut. Le domaine de l'attribut Name de la relation Artiste est \"cha\u00eene de caract\u00e8res\"</p> <p>Vocabulaire</p> <p>En pratique, les mots attributs, relation et sch\u00e9ma ne sont pas utilis\u00e9s en dehors de l'\u00e9tude de l'alg\u00e8bre relationnelle, qui constitue l'outil th\u00e9orique derri\u00e8re le mod\u00e8le relationnel.</p> <p>Vous entendrez parler de:</p> <ul> <li>Tables pour les relations</li> <li>Champs (Fields) ou colonnes (columns), pour les attributs</li> <li>Enregistrements (Records) ou lignes (rows) pour les entit\u00e9s</li> <li>Le mot sch\u00e9ma est souvent utilis\u00e9 pour d\u00e9crire l'ensemble des tables constituant une base de donn\u00e9es.</li> </ul> <p>Notations - Alg\u00e8bre relationnelle</p> <p>Soit \\(R\\) une relation avec n attributs. Cette relation est not\u00e9e \\(R(a_1:dom_1, a_2: dom_2, ..., a_n:dom_n)\\)</p> <p>Par exemple, pour employee: Employee(EmployeeId: entier, LastName: cha\u00eene de caract\u00e8re, FirstName: .....)</p> <p>Un n-uplet (ou tuple) de \\(R\\), est une entit\u00e9 respectant le sch\u00e9ma de \\(R\\).</p> <p>L'ensemble des n-uplets d'une relation \u00e0 un instant donn\u00e9 compose une instance de la relation.</p> <p>Cette d\u00e9finition ensembliste n'est pas anodine car elle impose que l'ordre des n-uplets n'a pas d'importance et qu'il ne peut pas y avoir de n-uplets identiques.</p>"},{"location":"terminale/bdd/#la-pratique","title":"La pratique","text":"<p>Un SGBD est un outil permettant de stocker et d'interagir avec des bases de donn\u00e9es.</p> <p>SQL</p> <p>SQL (Structured Query Language) est un langage de requ\u00eate structurel. Il permet de manipuler des bases de donn\u00e9es structur\u00e9es. Il fonctionne avec des clauses.</p>"},{"location":"terminale/bdd/#requetes-sql","title":"Requ\u00eates SQL","text":"<p>Les clauses SELECT et FROM</p> <p>Sous cet encart, \u00e9crivez et ex\u00e9cutez: <pre><code>SELECT mediatypeid, name\nFROM media_types;\n</code></pre></p> <ul> <li>La clause FROM permet de signifier les relations sur lesquelles vous voulez travailler.</li> <li>La clause SELECT permet de demander quels attributs vous voulez obtenir, s\u00e9par\u00e9s par une virgule.</li> <li><code>*</code> signifie tous les attributs de la relation.</li> <li>Toute requ\u00eate se termine par un point-virgule</li> </ul> <p>Essayez ces autres requ\u00eates: <pre><code>SELECT *\nFROM media_types;\n\nSELECT title\nFROM albums\nLIMIT 3;\n</code></pre></p> <ul> <li>En SQLite, la clause LIMIT permet de ne renvoyer que les premiers enregistrements. C'est pratique pour tester des requ\u00eates sans afficher des milliers de r\u00e9sultats.</li> </ul> Ex\u00e9cuter des requ\u00eates sur chinook: Ex\u00e9cuter <pre></pre> <p>La clause WHERE</p> <p>La clause where permet d'\u00e9mettre une condition sur les enregistrements r\u00e9cup\u00e9r\u00e9s. Par exemple, pour conna\u00eetre tous les clients habitant en France, ex\u00e9cutez:</p> <pre><code>SELECT *\nFROM customers\nWHERE country = 'France';\n</code></pre> <p>Essayez cette autre requ\u00eates: <pre><code>SELECT *\nFROM customers\nWHERE country = 'France' AND city = 'Paris';\n</code></pre></p> <p>Dans une clause WHERE, on \u00e9met une condition sur les attributs des tables sur lesquelles on travaille.</p> <p>L'op\u00e9rateur pratique LIKE</p> <p>L'op\u00e9rateur like permet une recherche bas\u00e9e sur un motif.</p> <ul> <li><code>WHERE Name LIKE 'A%'</code> : renvoie vrai pour tous les noms qui commencent par \"A\".</li> <li><code>WHERE Name LIKE '%land'</code> : renvoie vrai pour tous les noms qui se terminent par \"land\".</li> <li><code>WHERE Name LIKE '%an%'</code> : renvoie vrai pour tous les noms contenant \"an\".</li> </ul> <p><code>%</code> repr\u00e9sente 0 ou plusieurs caract\u00e8res</p> <ul> <li><code>WHERE Name LIKE 'J_n'</code> : renvoie vrai pour \"Jan\", \"Jon\", etc.</li> <li><code>WHERE Name LIKE 'C_t%'</code> : renvoie vrai pour \"Cat\", \"Cut\", etc.</li> </ul> <p><code>_</code> repr\u00e9sente un seul caract\u00e8re</p> <p>Entra\u00eenement et CheatSheet</p> <p>Voici un lien o\u00f9 vous pouvez vous entra\u00eener sur des exemples vari\u00e9s: Entra\u00eenement SQL</p> <p>Et voici une cheatsheet sur les fonctionnalit\u00e9s basiques: SQL CheatSheet</p> <p>Exercices - automatismes</p> <p>Pour chaque item de la liste suivante, \u00e9crivez la requ\u00eate qui permet de l'obtenir. Notez que dans le contxte d'\u00e9valuation \u00e9crite, vous devez progressivement vous efforcer d'\u00e9crire vos requ\u00eates afin qu'elles fonctionnent du premier coup, et pas d'y aller au petit bonheur la chance.</p> <p>Vous conserverez les r\u00e9ponses dans un fichier .sql</p> <p>Vous pouvez \u00e9crire des commentaires dans un fichier sql en les faisant pr\u00e9c\u00e9der de <code>--</code></p> <ol> <li>Les clients situ\u00e9s dans le pays \"Canada\".</li> <li>Le pr\u00e9nom et le nom des clients vivant \u00e0 \"Paris\".</li> <li>Les clients dont l'email contient \"yahoo\".</li> <li>Les clients dont l'identifiant de support est \"3\".</li> <li>Les noms des employ\u00e9s qui travaillent dans la ville de \"Calgary\".</li> <li>Les employ\u00e9s avec le titre \"Sales Support Agent\".</li> <li>Les employ\u00e9s engag\u00e9s apr\u00e8s l'ann\u00e9e 2003.</li> <li>Les informations des employ\u00e9s dont le sup\u00e9rieur a l'ID \"1\".</li> <li>Les factures d'un client ayant l'ID \"10\".</li> <li>Les factures dont le total est sup\u00e9rieur \u00e0 10.</li> <li>Les factures \u00e9mises en \"2010\".</li> <li>Les factures provenant du pays \"USA\".</li> <li>Les titres dont la dur\u00e9e d\u00e9passe 5 minutes.</li> <li>Les artistes dont le nom contient \"The\".</li> <li>Les artistes dont le nom commence par \"A\".</li> <li>Les albums dont le titre contient \"Greatest Hits\".</li> </ol> Ex\u00e9cuter des requ\u00eates sur chinook: Ex\u00e9cuter <pre></pre> <p>Les fonctions d'agr\u00e9gation</p> <ul> <li>SUM : Calcule la somme des valeurs d'une colonne.</li> <li>COUNT : Compte le nombre de lignes (ou d'\u00e9l\u00e9ments non nuls) dans une colonne.</li> <li>MAX : Retourne la valeur maximale d'une colonne.</li> <li>MIN : Retourne la valeur minimale d'une colonne.</li> <li>AVG : Calcule la moyenne des valeurs d'une colonne. (average)</li> </ul> <p>Par exemple, pour obtenir le nombre de factures, vous pouvez utiliser <code>SELECT COUNT(*) FROM invoices;</code></p> <p>Pour calculer la moyenne du montant des factures, vous pouvez utiliser <code>SELECT AVG(total) FROM invoices;</code></p> <p>Exercices - fonctions d'agr\u00e9gation</p> <p>Calculer:</p> <ol> <li>Le nombre de factures.</li> <li>La somme des montants des factures.</li> <li>La moyenne des montants des factures.</li> <li>La valeur minimale des montants des factures.</li> <li>La valeur maximale des montants des factures.</li> </ol>"},{"location":"terminale/bdd/jointure/","title":"Jointures","text":"<p>Lorsqu'on veut r\u00e9cup\u00e9rer des donn\u00e9es provenant de plusieurs tables, on utilise des jointures.</p>"},{"location":"terminale/bdd/jointure/#sur-un-exemple-theorique","title":"Sur un exemple th\u00e9orique","text":"<p>Voici le script utilis\u00e9 pour le premier exemple. Les donn\u00e9es sont volontairement bidons car nous nous int\u00e9ressons tout d'abord \u00e0 la notion de produit cart\u00e9sien</p> <pre><code>CREATE TABLE t1 (\n    idt1 INT PRIMARY KEY,\n    a VARCHAR(50),\n    b VARCHAR(50)\n);\n\nCREATE TABLE t2 (\n    idt2 INT PRIMARY KEY,\n    idt1 INT,\n    c INT,\n    FOREIGN KEY (idt1) REFERENCES t1(idt1)\n);\n\n-- Insertion de donn\u00e9es dans t1\nINSERT INTO t1 (idt1, a, b) VALUES\n(1, 'Alpha', 'Beta'),\n(2, 'Gamma', 'Delta'),\n(3, 'Epsilon', 'Zeta'),\n(4, 'Eta', 'Theta');\n\n-- Insertion de donn\u00e9es dans t2\nINSERT INTO t2 (idt2, idt1, c) VALUES\n(10, 3, 100),\n(11, 4, 200),\n(12, 4, 700)\n;\n</code></pre> <p>Visualiser un produit cart\u00e9sien</p> <p>Ci-dessous, ex\u00e9cutez les requ\u00eates suivante: <pre><code>select *\nfrom t1;\n\nselect *\nfrom t2;\n\n-- Cette requ\u00eate effectue le produit cart\u00e9sien de t1 et t2\nselect *\nfrom t1, t2;\n;\n</code></pre></p> Ex\u00e9cuter des requ\u00eates: Ex\u00e9cuter <pre></pre> <p>Explications</p> <p>Le produit cart\u00e9sien de deux ensembles \\(A\\) et \\(B\\) est l'ensemble des couples \\((a, b)\\) ou \\(a\\) est un \u00e9l\u00e9ment de \\(A\\) et \\(b\\) est un \u00e9l\u00e9ment de \\(B\\).</p> <p>Ici, on voit que pour chaque tuple de t1, on y a associ\u00e9 tous les tuples de t2. Ce qui est \u00e9quivalent \u00e0 dire que pour chaque tuple de t2, on y a assoi\u00e9 tous les tuples de t1.</p> <p>Produit Cart\u00e9sien</p> <p>Soient les 2 ensembles \\(A=\\{x, y, z\\}\\) et \\(B=\\{\\alpha, \\beta\\}\\). </p> <ul> <li>Ecrire l'ensemble produit cart\u00e9sien de \\(A\\) et de \\(B\\), not\u00e9 \\(A \\times B\\).</li> <li>Ecrire \\(A \\times A\\), not\u00e9 aussi \\(A^2\\).</li> <li>Ecrire \\(B \\times B \\times B\\), not\u00e9 aussi \\(B^3\\).</li> </ul> <p>Jointure</p> <p>Une jointure est un sous ensemble de produit cart\u00e9sien.</p> <p>Une jointure permet de lier deux ensembles de donn\u00e9es.</p> <p>Ici, la cl\u00e9 \u00e9trang\u00e8re idt1 de t2 nous indique que nous r\u00e9f\u00e9rons dans t2 \u00e0 un enregistrement de t1. Parmi toutes les associations possibles du produit cart\u00e9sien, les seules qui nous int\u00e9ressent sont donc celles o\u00f9 le idt1 de t2 sera \u00e9gal au idt1 de t1. Les autres tuples du produit ne nous int\u00e9ressent pas, elles ne correspondent \u00e0 rien qui n'ait du sens de la mani\u00e8re dont nous avons d\u00e9fini les donn\u00e9es.</p> <p>Ex\u00e9cutez cette requ\u00eate:</p> <pre><code>select *\nfrom t1, t2\nwhere t1.idt1 = t2.idt1\n</code></pre> <p>Ainsi, on vient de demander les informations de t2 augment\u00e9es des informations de t1 relativement \u00e0 la cl\u00e9 idt1.</p>"},{"location":"terminale/bdd/jointure/#sur-un-exemple-pratique","title":"Sur un exemple pratique","text":"<pre><code>-- Cr\u00e9ation des tables\nCREATE TABLE Artistes (\n    ArtisteId INT PRIMARY KEY,\n    Nom VARCHAR(50)\n);\n\nCREATE TABLE Albums (\n    AlbumId INT PRIMARY KEY,\n    ArtisteId INT,\n    Titre VARCHAR(100),\n    FOREIGN KEY (ArtisteId) REFERENCES Artistes(ArtisteId)\n);\n\n-- Insertion de donn\u00e9es dans Artistes\nINSERT INTO Artistes (ArtisteId, Nom) VALUES\n(1, 'Mozart'),\n(2, 'Beethoven'),\n(3, 'Chopin');\n\n-- Insertion de donn\u00e9es dans Albums\nINSERT INTO Albums (AlbumId, ArtisteId, Titre) VALUES\n(1, 1, 'Requiem'),\n(2, 1, 'Symphonie No. 40'),\n(3, 2, 'Sonate Waldstein'),\n(4, 3, 'Nocturnes');\n</code></pre> <p>Question</p> <p>De la m\u00eame mani\u00e8re, ci-dessous, ex\u00e9cutez ceci:</p> <pre><code>select * from artistes;\n\nselect * from albums;\n\nselect *\nfrom artistes, albums;\n</code></pre> Ex\u00e9cuter des requ\u00eates: Ex\u00e9cuter <pre></pre> <p>Ce qui nous int\u00e9resse ici, c'est de compl\u00e9ter les tuples de la relation album avec le nom du compositeur. En effectuant le produit cart\u00e9sien, on voit bien que Mozart n'a rien \u00e0 faire avec la sonate Waldstein, ni avec les nocturnes. Les seules associations qui nous int\u00e9ressent sont ceux qui ont le m\u00eame ArtisteId.</p> <p>aussi, on ex\u00e9cutera:</p> <pre><code>select *\nfrom artistes, albums\nwhere Artistes.ArtisteId = Albums.ArtisteId\n</code></pre> <p>Ce qui nous int\u00e9resse \u00e0 l'origine, c'est de compl\u00e9ter les titres d'album avec les noms d'artistes. On affine dans le select.</p> <pre><code>select artistes.nom, albums.titre\nfrom artistes, albums\nwhere Artistes.ArtisteId = Albums.ArtisteId\n</code></pre> <p>Alias</p> <p>Souvent, afin d'\u00e9viter d'alourdir les requ\u00eates, on utilise des alias pour les tables. On pourra ainsi \u00e9crire:</p> <pre><code>select a.nom, b.titre\nfrom artistes a, albums b\nwhere a.ArtisteId = b.ArtisteId\n</code></pre> <p>On peut aussi renommer les colonnes du r\u00e9sultat ainsi: <pre><code>select a.nom as NomArtiste, b.titre as TitreAlbum\nfrom artistes a, albums b\nwhere a.ArtisteId = b.ArtisteId\n</code></pre></p> <p>C'est tr\u00e8s souvent utilis\u00e9 car hors du contexte de laur table, le sens du nom des champs peut se perdre.</p>"},{"location":"terminale/bdd/jointure/#ce-qui-est-attendu-de-vous","title":"Ce qui est attendu de vous","text":"<p>La deuxi\u00e8me \u00e9tape, c'est d'utiliser une syntaxe sp\u00e9cifique aux jointures. Les utiliser permet d'aider l'optimisateur de requ\u00eates du SGBD, et aussi de bien s\u00e9parer les conditions de filtrage des conditions de jointure, ce qui n'est pas du luxe sur les grosses requ\u00eates. De plus il existe plusieurs types de jointures et cette syntaxe permet de bien conserver le sens de ce qu'on manipule. Le r\u00e9sultat est STRICTEMENT le m\u00eame. </p> <p>Cette syntaxe est attendue au bac</p> <pre><code>select a.nom, b.titre\nfrom artistes a\nJOIN albums b ON a.ArtisteId = b.ArtisteId\n</code></pre> <p>S\u00e9mantiquement, \u00e7a s\u00e9pare bien la jointure du reste.</p> <p>METHODE DE BASE</p> <p>Etant donn\u00e9 que vous n'avez qu'un seul type de jointure \u00e0 g\u00e9rer cette ann\u00e9e, cette technique marchera \u00e0 tous les coups. C'est visuel, et c'est simple. Aucune excuse pour rater une jointure.</p> <p>Sur le Mod\u00e8le physique de donn\u00e9es, il faut dessiner tout le chemin entre les tables qui vous int\u00e9ressent, et ajouter une ligne join par association entre table.</p> <p>Ensuite, on rajoute \u00e9ventuellement une clause where pour filtrer certaines donn\u00e9es selon la question.</p> <p>Puis on s\u00e9lectionne seulement les champs qu'on veut r\u00e9cup\u00e9rer, en utilisant des alias si des noms sont redondants, ou pour garantir unne bonne compr\u00e9hension du r\u00e9sultat de la requ\u00eate.</p> <p>Le MPD est votre meilleur ami. Il faut toujours l'avoir sous la main. S'il ne vous est pas donn\u00e9, dessinez le au brouillon.</p> <p>Jointures sur chinook</p> <ul> <li>Affichez le titre de chaque album ainsi que le nom de l'artiste qui l'a cr\u00e9\u00e9.</li> <li>Affichez le nom de chaque piste et le titre de l'album auquel elle appartient.</li> <li>Affichez le num\u00e9ro de facture, la date, et le nom complet du client pour chaque facture.</li> <li>Affichez les employ\u00e9s et le nom complet de leurs managers respectifs</li> <li>Affichez le nom de chaque piste et son genre musical</li> <li> <p>Affichez le nom des artistes ayant au moins une piste pr\u00e9sente dans une playlist.</p> </li> <li> <p>Affichez le nom des pistes et le nom de l'album pour les pistes appartenant au genre \"Rock\".</p> </li> <li>Affichez le num\u00e9ro et la date des factures, ainsi que le pr\u00e9nom et le nom des clients r\u00e9sidant au \"Canada\".</li> <li>Affichez le nom des pistes, leur genre musical et leur dur\u00e9e (en millisecondes) pour les pistes dont la dur\u00e9e d\u00e9passe 300_000 millisecondes</li> </ul> Ex\u00e9cuter des requ\u00eates sur chinook: Ex\u00e9cuter <pre></pre> <p>Grosses requ\u00eates</p> <ul> <li> <p>Quel est le prix total des pistes du genre \"Rock\" achet\u00e9es par les clients r\u00e9sidant au Canada ?</p> </li> <li> <p>Quel est le titre de l'album le plus cher ?</p> </li> <li> <p>Quel est le nom de l'artiste ayant le moins de pistes ?</p> </li> </ul>"},{"location":"terminale/bdd/jointure/#lien-avec-python","title":"Lien avec python","text":"<pre><code>artistes = [\n    {\"ArtisteId\": 1, \"Nom\": \"Mozart\"},\n    {\"ArtisteId\": 2, \"Nom\": \"Beethoven\"},\n    {\"ArtisteId\": 3, \"Nom\": \"Chopin\"}\n]\n\nalbums = [\n    {\"AlbumId\": 1, \"ArtisteId\": 1, \"Titre\": \"Requiem\"},\n    {\"AlbumId\": 2, \"ArtisteId\": 1, \"Titre\": \"Symphonie No. 40\"},\n    {\"AlbumId\": 3, \"ArtisteId\": 2, \"Titre\": \"Sonate Waldstein\"},\n    {\"AlbumId\": 4, \"ArtisteId\": 3, \"Titre\": \"Nocturnes\"}\n]\n</code></pre> <p>Voici comment nous aurions pu obtenir le resultat de la jointure exemple:</p> <pre><code>jointure = [ {\"Nom\": a[\"Nom\"], \"Titre\": b[\"Titre\"]} \n             for a in artistes \n             for b in albums \n             if a[\"ArtisteId\"] == b[\"ArtisteId\"] \n            ]\n</code></pre> <p>La double boucle r\u00e9alise le produit cart\u00e9sien (chaque a sera associ\u00e9 \u00e0 chaque b), la condition termine de r\u00e9aliser la jointure en limitant les associations aux cas qui nous int\u00e9ressent.</p>"},{"location":"terminale/bdd/manipulation-integrite/","title":"Manipulation et int\u00e9grit\u00e9","text":""},{"location":"terminale/bdd/manipulation-integrite/#constitution-et-modification-dune-base","title":"Constitution et modification d'une base","text":"<p>Des chiens et des propri\u00e9taires</p> <p>Une clinique v\u00e9t\u00e9rinaire dispose de ces donn\u00e9es sur des chiens et leur propri\u00e9taire.</p> <p>Ces donn\u00e9es ne sont pas adapt\u00e9es:</p> <ul> <li>Que doit-on faire si Pierre Leclerc change d'adresse?</li> <li>Que se passe-t-il si plusieurs personnes s'appellent Jean Dupont dans le m\u00eame immeuble?</li> </ul> <p>Dans le m\u00eame table, on a des informations sur 2 types d'entit\u00e9s: Des personnes et des chiens.</p> <p></p> <p>Ex\u00e9cutez les requ\u00eates suivantes:</p> <pre><code>PRAGMA foreign_keys=ON;            /* SQLite seulement */\nDROP TABLE IF EXISTS chien;        /* Supprimer la table chien si elle existe */\nDROP TABLE IF EXISTS proprietaire; /* Supprimer la table proprietaire si elle existe */\n</code></pre> Ex\u00e9cuter des requ\u00eates: Ex\u00e9cuter <pre></pre> <p>Cr\u00e9ation de table</p> <p>On utilise la syntaxe <code>CREATE TABLE</code>.</p> <p>Ici nous voulons cr\u00e9er la table propri\u00e9taire.</p> <p>Chaque champ a un type, il est indiqu\u00e9 quelle(s) colonne(s) portent la cl\u00e9 primaire.</p> <ul> <li>INT -&gt; Entier</li> <li>VARCHAR(50) -&gt; Cha\u00eene de caract\u00e8res de taille maximale 50</li> </ul> <p>Danger</p> <p>La base de donn\u00e9es n'autorisera pas la cr\u00e9ation d'enregistrements ayant une cl\u00e9 primaire existante.</p> <pre><code>-- Cr\u00e9ation de la table \"proprietaire\"\nCREATE TABLE proprietaire (\n    id_proprietaire INT PRIMARY KEY,\n    nom VARCHAR(50),\n    prenom VARCHAR(50),\n    adresse VARCHAR(100),\n    ville VARCHAR(50)\n);\n</code></pre> <p>Note</p> <p>On utilise la syntaxe <code>INSERT INTO</code>.</p> <p>Ici nous voulons ins\u00e9rer des enregistrements dans la table proprietaire.</p> <p>On indique l'ordre des colonnes entre parenth\u00e8se.</p> <p>On utilise la clause <code>VALUES</code> afin d'ins\u00e9rer les tuples/enregistrements.</p> <ul> <li>INT -&gt; Entier</li> <li>VARCHAR(50) -&gt; Cha\u00eene de caract\u00e8res de taille maximale 50</li> </ul> <pre><code>-- Insertion de quelques enregistrements dans la table \"proprietaire\"\nINSERT INTO proprietaire (id_proprietaire, nom, prenom, adresse, ville)\nVALUES\n    (1, 'Dupont', 'Jean', '10 Rue de la Libert\u00e9', 'Vannes'),\n    (2, 'Martin', 'Marie', '25 Avenue des Roses', 'Vannes'),\n    (3, 'Leclerc', 'Pierre', '5 Rue du Port', 'Vannes'),\n    (4, 'Dubois', 'Sophie', '30 Rue Saint-Goustan', 'Auray'),\n    (5, 'Lefevre', NULL, '15 Avenue du Belv\u00e9d\u00e8re', 'Auray');\n</code></pre> <pre><code>-- v\u00e9rification du contenu ded la table\nselect * from proprietaire;\n</code></pre> <p>Note</p> <p>On utilise la syntaxe <code>UPDATE SET WHERE</code>.</p> <p>On a enfin trouv\u00e9 le pr\u00e9nom de Monsieur Lefevre, c'est Tom.</p> <pre><code>UPDATE proprietaire\nSET prenom = 'TOM'\nWHERE id_proprietaire is null;\n</code></pre> <p>(is est sp\u00e9cifique \u00e0 null, l'\u00e9quivalent de None en Python, sinon, pour tester une \u00e9galit\u00e9, on utilise un simple =)</p> <p>Mise \u00e0 jour</p> <p>Jean Dupont s'appelle en r\u00e9alit\u00e9 Aristide Dupont. Ecrire et ex\u00e9cuter la requ\u00eate permettant ce changement.</p> <p>Question</p> <p>Voici ci-dessous la table chiens.</p> <p>Cr\u00e9er la table et ins\u00e9rer les donn\u00e9es correspondantes.</p> <pre><code>DROP TABLE IF EXISTS chien;\nCREATE TABLE chien (\n    ...,\n    ...,\n    ...,\n    FOREIGN KEY (id_proprietaire) REFERENCES proprietaire(id_proprietaire)\n);\n</code></pre> <p>La ligne FOREIGN KEY indique que la colonne id_propri\u00e9taire fait r\u00e9f\u00e9rence \u00e0 la cl\u00e9 primaire de la table proprietaire.</p> <p>Ainsi:</p> <ul> <li>On ne peut pas ins\u00e9rer de chien dont l'id_proprietaire n'existe pas dans la table proprietaire</li> <li>On en peut pas supprimer de propri\u00e9taires qui ont des chiens (dans la table chien)</li> <li>On ne peut pas mettre \u00e0 jour un chien avec un id_proprietaire qui n'existe pas.</li> </ul> <p></p> Ex\u00e9cuter des requ\u00eates: Ex\u00e9cuter <pre></pre> <p>Anomalies d'insertion</p> <p>Lisa Potiron arrive avec un chien nomm\u00e9 Bidule.</p> <p>Voici le code que quelqu'un a \u00e9crit pour faire \u00e9tat de ces changements.</p> <pre><code>INSERT INTO chien (id_chien, nom, race, age, id_proprietaire)\nVALUES\n    (8, 'Bidule', 'Chihuahua', 1, 11);\n\nINSERT INTO proprietaire (id_proprietaire, nom, prenom, adresse, ville)\nVALUES\n    (11, 'Potiron', 'Lisa', '10 Rue de la for\u00eat', 'Auray');\n</code></pre> <p>Quels sont les probl\u00e8mes cons\u00e9cutifs qui vont \u00eatre rencontr\u00e9s lors de l'ex\u00e9cution de ces requ\u00eates d'insertion?</p> <p>Reprendre ce code afin qu'il s'ex\u00e9cute correctement.</p> <p>Anomalie de suppression</p> <p>Madame Martin est d\u00e9c\u00e9d\u00e9e. Elle a l\u00e9gu\u00e9 ses chiens \u00e0 Sophie Dubois.</p> <p>Voici le code que quelqu'un a \u00e9crit pour faire \u00e9tat de ces changements.</p> <p><pre><code>DELETE FROM proprietaire\nWHERE id = 2;\n\nUPDATE chiens\nSET proprietaire_id = 4\nWHERE proprietaire_id = 2;\n</code></pre> Quel est le probl\u00e8me qui va \u00eatre rencontr\u00e9 lors de l'ex\u00e9cution de ces requ\u00eates d'insertion?</p> <p>Reprendre ce code afin qu'il s'ex\u00e9cute correctement.</p>"},{"location":"terminale/bdd/manipulation-integrite/#contraintes-dintegrite","title":"Contraintes d'int\u00e9grit\u00e9","text":"<p>D\u00e9finition</p> <p>Une contrainte d'int\u00e9grit\u00e9 est une propri\u00e9t\u00e9 associ\u00e9e \u00e0 la base de donn\u00e9es, que les donn\u00e9es de la base doivent toujours satisfaire. Les 2 principaux types de contraintes d'int\u00e9grait\u00e9 sont les suivantes:</p> <ul> <li>Contrainte d'unicit\u00e9</li> <li>Contrainte d'inclusion</li> </ul>"},{"location":"terminale/bdd/manipulation-integrite/#contrainte-dunicite","title":"Contrainte d'unicit\u00e9","text":"<p>Contrainte d'unicit\u00e9</p> <p>Une contrainte d'unicit\u00e9 a pour objectif de permettre l'identification unique d'une entit\u00e9 au sein d'une relation, entre autre pour \u00e9viter la cr\u00e9ation d'information redondante.</p> <p>(On va donc chercher \u00e0 d\u00e9finir un ensemble d'attribut suffisant pour pouvoir identifier un enregistrement unique dans une table.)</p> <p>Supercl\u00e9 (surcl\u00e9)</p> <p>Attributs d\u2019une relation permettant d\u2019identifier un n-uplet de fa\u00e7on unique.</p> <p>Cl\u00e9 candidate (ou simplement cl\u00e9)</p> <p>Une cl\u00e9 candidate est une surcl\u00e9 de taille minimale</p> <p>Exemple</p> <p>Imaginons la relation \\(Film(titre, sortie, r\u00e9alisateur, budget, URI)\\) o\u00f9 URI est une adresse http pointant vers une page web du film.</p> <p>Des surcl\u00e9s possibles (non exhaustif) sont:</p> <ul> <li>{titre, sortie}</li> <li>{titre, sortie, r\u00e9alisateur}</li> <li>{titre, sortie, budget}</li> <li>{titre, sortie, URI}</li> <li>{titre, sortie, r\u00e9alisateur, budget}</li> <li>{titre, sortie, r\u00e9alisateur, budget, URI}</li> <li>{URI}</li> <li>{URI, titre}</li> <li>{URI, budget}</li> <li>{URI, titre, sortie}</li> <li>{URI, titre, sortie, r\u00e9alisateur}</li> </ul> <p>{titre, sortie} est une cl\u00e9 candidate mais {titre, sortie, r\u00e9alisateur} ne l'est pas car elle contient une surcl\u00e9 (elle n'est pas minimale)</p> <p>{URI} est une autre cl\u00e9 candidate mais {URI, titre} ne l'est pas pour les m\u00eames raisons.</p> <p>Cl\u00e9 Primaire (PRIMARY KEY)</p> <p>Une cl\u00e9 primaire est une cl\u00e9 candidate r\u00e9ellement choisie pour faire office de contrainte d'unicit\u00e9 sur la relation. Une relation ne comporte qu'une cl\u00e9 primaire.</p> <p>\\(\\underline{Notation}:\\)</p> <p>On Souligne dans la d\u00e9finition de la relation les attributs choisis pour cl\u00e9 primaire. Par exemple, si on choisit titre et sortie:</p> <p>\\(Film(\\underline{titre}, \\underline{sortie}, r\u00e9alisateur, budget, URI)\\)</p> <p>R\u00e9alit\u00e9 des cl\u00e9s primaires</p> <p>Dans la r\u00e9alit\u00e9, une cl\u00e9 primaire sera un identifiant qu'on donnera \u00e0 chaque enregitrement de la table. Les bases de donn\u00e9e disposent de m\u00e9canisme permettant de les g\u00e9n\u00e9rer automatiquement. Pour simplifier, lorsque vous avez un identifiant de commande, il s'agit d'une cl\u00e9 primaire de la table commandes. Lorsque vous avez un num\u00e9ro de client, il s'agit de la cl\u00e9 primaire de la table clients.</p> <p>Pourquoi? Il est g\u00e9n\u00e9ralement hasardeux de pr\u00e9sumer de l'unicit\u00e9 et de l'invariabilit\u00e9 d'un sous-ensemble d'attributs dans la relation. Par exemple, lorsque nous supposons que {titre, sortie} est une supercl\u00e9, est-on r\u00e9ellement certain que deux films ne sortiront pas en m\u00eame temps dans le monde sous le m\u00eame titre? NON. Soyez extr\u00eamement critiques \u00e0 ce sujet dans les questions qu'on pourrait vous poser</p> <p>Ceci est d'ailleurs un probl\u00e8me pour les mutuelles fran\u00e7aises qui n'ont pas le droit d'utiliser le num\u00e9ro de s\u00e9curit\u00e9 sociale dans leur syst\u00e8me d'information afin d'identifier uniquement les assur\u00e9s. Elles doivent alors se r\u00e9fugier dans la pr\u00e9somption d'unicit\u00e9 d'une multitude d'attributs, ce qui occasionne toujours et encore des probl\u00e8mes (par exemple, il faut penser \u00e0 demander aux clients le rang g\u00e9mellaire quand des parents assurent des jumeaux, plusieurs personnes ayant les m\u00eame caract\u00e9ritiques peuvent habiter dans le m\u00eame immeuble, \u00e0 l'\u00e9tat civil, des gens peuvent changer de nom, de pr\u00e9nom, de sexe, etc...). Sur des millions de personnes, ces cas qui peuvent para\u00eetre \u00e0 la marge ne peuvent pas \u00eatre ignor\u00e9s. On se retrouverait donc \u00e0 se trimballer une charette d'attributs partout o\u00f9 on veut faire r\u00e9f\u00e9rence \u00e0 une personne, d'autant plus qu'ils peuvent changer. On ne veut pas de cl\u00e9 primaire dont les attributs peuvent changer dans le temps, sous peine de devoir r\u00e9pliquer les modifications dans l'ensemble du syst\u00e8me d'information.</p> <p>Violation de cl\u00e9 primaire</p> <p>Dans la description de la table employees, le champ EmployeeId est cl\u00e9 primaire. (on voit la colonne pk \u00e0 1)</p> <p>Cette requ\u00eate d'insertion \u00e9choue car l'employeeId 1 existe d\u00e9j\u00e0:</p> <pre><code>insert into employees(EmployeeId, FirstName, LastName) \nvalues (1, 'prenom', 'nom');\n</code></pre> Ex\u00e9cuter des requ\u00eates sur chinook: Ex\u00e9cuter <pre></pre>"},{"location":"terminale/bdd/manipulation-integrite/#contrainte-dinclusion","title":"Contrainte d'inclusion","text":"<p>L'id\u00e9e ici est de s'assurer qu'\u00e0 chaque fois qu'on fait r\u00e9f\u00e9rence \u00e0 une entit\u00e9 dans une base de donn\u00e9es, celle-ci existe.</p> <p>Abstract</p> <p>Une cl\u00e9 \u00e9trang\u00e8re est un ensemble d'attributs qui est la cl\u00e9 primaire d'une autre table. Elle permet d'associer \u00e0 des entit\u00e9s de la table une entit\u00e9 provenant d'une autre table.</p> <p>Example</p> <pre><code>-- Cl\u00e9s \u00e9trang\u00e8res de la table employees\nPRAGMA foreign_key_list('employees');\n\n-- Cl\u00e9s \u00e9trang\u00e8res de la table customers\nPRAGMA foreign_key_list('customers');\n\n/* 3 premiers employ\u00e9s de la table */\nselect * from employees\nlimit 3;\n\n/* 3 premiers clients de la table */\nselect * from customers\nlimit 3;\n</code></pre> <p>Un client se voit affecter un employ\u00e9 en support. Il s'agit de la colonne SupportRepId. SupportRepId est une cl\u00e9 \u00e9trang\u00e8re de la table customer qui fait r\u00e9f\u00e9rence \u00e0 la cl\u00e9 primaire de la table employee.</p> <p>Ainsi, on voit que le client Lu\u00eds Gon\u00e7alves a pour support l'employ\u00e9 de SupportRepId 3, \u00e0 savoir Jane Peacock.</p> <p>La table employee a aussi une cl\u00e9 \u00e9trang\u00e8re qui fait r\u00e9f\u00e9rence \u00e0 elle-m\u00eame: ReportsTo (qui donne l'identifiant de son sup\u00e9rieur hi\u00e9rarchique). Jane Peacock a pour sup\u00e9rieur hi\u00e9rarchique l'identifiant 2, \u00e0 savoir Nancy Edwards, qui r\u00e9f\u00e8re elle-m\u00eame \u00e0 Andrew Adams.</p>"},{"location":"terminale/bdd/manipulation-integrite/#anomalies-liees-aux-contraintes","title":"Anomalies li\u00e9es aux contraintes","text":"<pre><code>pragma foreign_keys=0N;\n\n/* \nAnomalie d'insertion - NOT NULL\nCette requ\u00eate d'insertion \u00e9choue car le champ email est obligatoire.\nOn ne veut pas autoriser de client sans email.\n*/\n\ninsert into customers(CustomerId, FirstName, LastName) \nvalues (257, 'prenom', 'nom');\n\n/* \nAnomalie d'insertion - cl\u00e9 \u00e9trang\u00e8re\nCette requ\u00eate d'insertion \u00e9choue car il n'y a pas d'employ\u00e9 2435.\nOn n'autorise pas la cr\u00e9ation d'un client dont le support est renseign\u00e9 sans correspondre \u00e0 rien.\n*/\n\ninsert into customers(CustomerId, FirstName, LastName, Email, SupportRepId) \nvalues (257, 'prenom', 'nom', 'bidule@truc.com', 2345);\n\npragma table_info('customers');\n\n/* \nAnomalie de suppression - FOREIGN KEY\nCette requ\u00eate de suppression \u00e9choue car il y a des clients rattach\u00e9s \u00e0 cet employ\u00e9 par une cl\u00e9 \u00e9trang\u00e8re.\nSi la base autorisait la suppression de l'employ\u00e9, des clients se retrouveraient sans support associ\u00e9.\nSi on veut r\u00e9ellement supprimer l'employ\u00e9 de la base, il faut au pr\u00e9alable r\u00e9affecter tous ses clients \u00e0 d'autres employ\u00e9s.\n*/\n\ndelete from employees where EmployeeId = 3;\n</code></pre> <p>Quelques aspects l\u00e9gaux de base (recherche)</p> <ul> <li>Comment s'appelle l'ensemble des lois qui r\u00e9git en Europe la gestion des donn\u00e9es \u00e0 caract\u00e8re personnel?</li> <li>A quelle condition puis-je cr\u00e9er cette base de donn\u00e9es?</li> <li>Les donn\u00e9es personnelles de mes clients appartiennent-t-elles \u00e0 mes clients?</li> </ul> <p>Une autre clinique v\u00e9t\u00e9rinaire souhaite acheter les donn\u00e9es de ma base.</p> <ul> <li>A quelle condition puis-je l\u00e9galement le faire?</li> </ul>"},{"location":"terminale/bdd/sql-murder-mystery/","title":"SQL murder mystery","text":"<p>C'est un exercice traditionnel mondialement connu.</p> <p>Un meurtre a \u00e9t\u00e9 commis \u00e0 SQL city. Le crime a eu lieu le 15 janvier 2018.</p> <p>Vous disposez d'une base de donn\u00e9es comportant toutes les informations qui ont pu \u00eatre glan\u00e9es.</p> <p>Vous avez acc\u00e8s \u00e0 la base de donn\u00e9es de l'enqu\u00eate.</p> <p>Vous pouvez commencer par inspecter les donn\u00e9es de rapport de sc\u00e8ne de crime (crime_scene_report)</p> <p>Bonne chance!</p> <p></p> <p>Ex\u00e9cutez toutes vos requ\u00eates ci-dessous:</p> Ex\u00e9cuter des requ\u00eates: Ex\u00e9cuter"},{"location":"terminale/bdd/sql-murder-mystery/#requete-permettant-de-tester-votre-solution","title":"Requ\u00eate permettant de tester votre solution","text":"<pre><code>INSERT INTO solution VALUES (1, \"Nom du meurtrier\");\n\nSELECT value FROM solution;\n</code></pre>"},{"location":"terminale/bdd/tp-sgbd/","title":"TP SGBD - Postgresql","text":""},{"location":"terminale/bdd/tp-sgbd/#pre-requis","title":"Pr\u00e9-requis","text":"<p>Ces outils doivent \u00eatre install\u00e9s (voir la section \"les outils\"):</p> <ul> <li>miniforge</li> <li>dbeaver</li> </ul>"},{"location":"terminale/bdd/tp-sgbd/#install-setup-postgresql","title":"Install &amp; Setup PostgreSQL","text":"<p>Ici, nous allons utiliser PostgreSQL, qui est instalable via conda, dans une version plus ultra pratique pour le d\u00e9veloppement.  Par contre, c'est juste inimaginable en production car toute la s\u00e9curit\u00e9 est lev\u00e9e.</p> <p>Tout ce qui suit se fait dans le miniforge prompt.</p>"},{"location":"terminale/bdd/tp-sgbd/#1-creation-et-activation-dun-environnement-a-part-qui-sappelle-outils","title":"1. Cr\u00e9ation et activation d'un environnement \u00e0 part qui s'appelle <code>outils</code>","text":"<pre><code>conda create -n outils\n</code></pre> <pre><code>conda activate outils\n</code></pre> <p>Pas dans base</p> <p>N'utilisez l'environnement base que pour cr\u00e9er et activer des environnements. Votre premi\u00e8re action dans un prompt conda doit \u00eatre d'activer un environnement sp\u00e9cifique.</p>"},{"location":"terminale/bdd/tp-sgbd/#2-installation-de-postgresql","title":"2. Installation de postgresql","text":"<pre><code>conda install postgresql\n</code></pre> <p>Maintenant, nous disposons d'un tas d'outils pour interagir avec postgresql.</p>"},{"location":"terminale/bdd/tp-sgbd/#3-initialisation-de-postgresql-avec-un-repertoire-de-donnees","title":"3. Initialisation de Postgresql avec un r\u00e9pertoire de donn\u00e9es","text":"<p>Chez vous, remplacez <code>P:\\\\data</code> partout par un autre chemin que vous connaissez sur votre disque. Pour le mettre \u00e0 la racine de votre r\u00e9pertoire utilisateur, vous pouvez utiliser <code>%USERPROFILE%\\\\data</code> \u00e0 la place.</p> <pre><code>initdb -D P:\\\\data\n</code></pre> <p>Toutes vos bases de donn\u00e9es seront stock\u00e9es dans ce dossier.</p>"},{"location":"terminale/bdd/tp-sgbd/#4-lancement-du-service-postgresql","title":"4. Lancement du service Postgresql","text":"<pre><code>pg_ctl start -D P:\\\\data\n</code></pre> <p>A partir de cet instant, un service tourne sur votre machine sur le port 5432. C'est le port par d\u00e9faut de Postgresql.</p> <p>Avant de quitter votre ordi</p> <p>Attention, il faudra quitter proprement le SGBD \u00e0 l'aide de la commande </p> <pre><code>pg_ctl stop -D P:\\\\data`\n</code></pre>"},{"location":"terminale/bdd/tp-sgbd/#5-creation-dun-superutilisateur","title":"5. Cr\u00e9ation d'un superutilisateur","text":"<p>Nous allons cr\u00e9er un utilisteur qui a le droit de tout faire sur postgresql. Ce super utilisateur s'appelle <code>admin</code> et son mot de passe sera <code>password</code>. (bien entendu c'est la plus over nulle des s\u00e9curisations)</p> <pre><code>createuser --superuser --password admin\n</code></pre> <p>Indiquer le mot de passe password</p>"},{"location":"terminale/bdd/tp-sgbd/#6-creation-dune-base-de-donnees","title":"6. Cr\u00e9ation d'une base de donn\u00e9es","text":"<pre><code>createdb lycee\n</code></pre>"},{"location":"terminale/bdd/tp-sgbd/#7-connexion-a-la-base-de-donnees-avec-dbeaver","title":"7. Connexion \u00e0 la base de donn\u00e9es avec DBeaver","text":"<p>Maintenant, on peut ouvrir dBeaver pour interagir avec l'instance de postgresql que nous avous lanc\u00e9e. Comme souvent, il y a plein de boutons, mais seulement peu nous int\u00e9ressent.</p> <p>Il faut ajouter une \"Nouvelle connection\"  \u00e0 postgresql sachant que: - Host: localhost - Port: 5432 - Database: lycee - User: admin - Mot de passe: password</p> <p></p> <p>Vous pouvez tester la connexion avec le bouton en bas \u00e0 gauche.</p> <p>dBeaver va vouloir t\u00e9l\u00e9charger les drivers pour se connecter \u00e0 postgresql, cliquez sur le bouton t\u00e9l\u00e9charger. Il existe beaucoup de drivers pour diverses bases de donn\u00e9es. dBeaver ne les r\u00e9cup\u00e8re que lorsqu'il y a besoin.</p> <p>Attention</p> <p>Il faut bien cliquer la case \u00e0 cocher \"show all databases\" qui est dans un des onglets selon la version de dBeaver.</p> <p>Quand c'est bon, cliquez sur terminer.</p> <p>L'arborescence de gauche ne se met pas \u00e0 jour automatiquement quand vous cr\u00e9ez ou supprimez de nouveaux objets. Il faudra lui demander de se rafra\u00eechir. (F5 ou menu contextuel)</p>"},{"location":"terminale/bdd/tp-sgbd/#8-creer-les-donnees-de-base-pour-le-projet","title":"8. Cr\u00e9er les donn\u00e9es de base pour le projet:","text":"<pre><code>\\c lycee;\n\ndrop table if exists eleves;\n\ncreate table eleves(\n    id SERIAL primary key,  -- Avec SERIAL, si on ajoute un enregistrement, l'id est automatiquement cr\u00e9\u00e9e \n    nom text not null,\n    prenom text not null,\n    age integer\n);\n\n\ninsert into eleves(id, nom, prenom, age) \nvalues\n(1, 'Dupont', 'Jean', 16),\n(3, 'Durand', 'Pierre', 16),\n(4, 'Dufour', 'Paul', 15)\n;\n</code></pre> <p>Voil\u00e0 \u00e0 quoi doit ressembler votre arborescence une fois que vous avez ex\u00e9cut\u00e9 les requ\u00eates ci-dessus:</p> <p></p> <p>FIN</p> <p>IGNORER CE QUI SUIT</p>"},{"location":"terminale/bdd/tp-sgbd/#exercices-sur-la-base-de-donnees-pagila","title":"Exercices sur la base de donn\u00e9es pagila","text":"<p>Requ\u00eates basiques</p> <ol> <li>Cr\u00e9ez une liste des pr\u00e9noms et noms de famille de tous les acteurs. Affichez le pr\u00e9nom et le nom de chaque acteur dans une seule colonne. Nommez la colonne \"nom_acteur\".</li> <li>Trouvez l'identifiant, le pr\u00e9nom et le nom d'un acteur dont vous ne connaissez que le pr\u00e9nom: \"Joe\".</li> <li>Trouvez tous les acteurs dont le nom de famille contient les lettres \"LI\". Cette recherche doit \u00eatre insensible \u00e0 la casse et les r\u00e9sultats doivent \u00eatre tri\u00e9s par nom de famille, puis par pr\u00e9nom.</li> <li>En utilisant IN, affichez les colonnes <code>country_id</code> et <code>country</code> pour les pays suivants : Afghanistan, Bangladesh et China.</li> <li>Ajoutez une colonne <code>middle_name</code> \u00e0 la table <code>actor</code>. Sp\u00e9cifiez le type de colonne appropri\u00e9.</li> <li>Supprimez la colonne <code>middle_name</code>.</li> <li>Mettez \u00e0 jour l'enregistrement de GROUCHO WILLIAMS pour que son pr\u00e9nom devienne HARPO.</li> <li>R\u00e9tablissez le pr\u00e9nom de GROUCHO WILLIAMS de HARPO \u00e0 GROUCHO.</li> </ol> <p>Requ\u00eates \u00e0 jointures</p> <ol> <li>Affichez le pr\u00e9nom, le nom et l'adresse de chaque client.</li> <li>Listez les titres des films et les cat\u00e9gories auxquelles ils appartiennent.</li> <li>Affichez les pr\u00e9noms, noms et adresses e-mail des clients vivant dans la ville de \"Aurora\".</li> <li>Listez les films et les langues dans lesquelles ils sont disponibles.</li> <li>Affichez les pr\u00e9noms et noms des employ\u00e9s (staff) ainsi que le nom de leur magasin.</li> <li>Affichez les pr\u00e9noms et noms des clients ayant lou\u00e9 un film intitul\u00e9 \"Academy Dinosaur\".</li> <li>Listez les films disponibles dans le magasin avec l'identifiant <code>1</code>.</li> <li>Affichez les noms des acteurs ayant jou\u00e9 dans le film \"Zorro Ark\".</li> </ol> <p>Probl\u00e8me utile</p> <p>Lister les clients qui sont en retard \u00e0 la date du jour, en s\u00e9lectionnant les informations utiles au call center afin de les relancer.</p> <p>Pour ceux qui ont fini</p> <p>IMdb met \u00e0 disposition gratuitement une grosse base de donn\u00e9es cin\u00e9matographique:</p> <p>https://developer.imdb.com/non-commercial-datasets/</p> <p>Chargez la dans Postgresql et explorez la.</p> <p>Pour ceci vous vous int\u00e9resserez \u00e0 la clause COPY de Postgresql.</p> <p>Ici, tous les moyens sont bons, ChatGPT, google, etc...</p>"},{"location":"terminale/langages/","title":"Paradigmes de programmation","text":"<p>Il est inutile d'essayer de comprendre ces d\u00e9finitions avant d'avoir pratiqu\u00e9 l'approche mentale des paradigmes \u00e9voqu\u00e9s.</p> <p>Qu'est-ce qu'un paradigme de programmation?</p> <p>Un paradigme de programmation est un mod\u00e8le ou une approche particuli\u00e8re utilis\u00e9e pour \u00e9crire et structurer des programmes informatiques. Il d\u00e9finit un ensemble de concepts, de m\u00e9thodes et de styles qui influencent la mani\u00e8re dont les programmeurs organisent leur code et pensent \u00e0 la r\u00e9solution de probl\u00e8mes. Les paradigmes de programmation fournissent diff\u00e9rents outils mentaux pour exprimer des algorithmes et des structures de donn\u00e9es.</p> <p>Le Paradigme Fonctionnel</p> <p>Cette d\u00e9finition s'appuie sur le travail qui a \u00e9t\u00e9 fait sur les listes, afin de pouvoir vous la repr\u00e9senter plus facilement.</p> <p>Le paradigme fonctionnel se distingue principalement par :</p> <ul> <li>L'immuabilit\u00e9 des structures de donn\u00e9es : ici, chaque fonction renvoie une nouvelle liste, sans affecter l'originale. Lorsqu'on insere dans une liste, il faut comprendre \"renvoyer une nouvelle liste dans laquelle on a ins\u00e9r\u00e9\"</li> <li>L'usage intensif de la r\u00e9cursivit\u00e9 : au lieu de boucles, les fonctions comme <code>taille</code>, <code>somme</code>, ou <code>inverser</code> utiliseront la r\u00e9cursivit\u00e9 pour recueillir des informations sur la liste.</li> <li>L'importance des fonctions pures : chaque fonction renvoie toujours le m\u00eame r\u00e9sultat pour les m\u00eames arguments, sans effets de bord.</li> </ul> <p>Ce style de programmation garantit des comportements pr\u00e9visibles et s\u00fbrs, ce qui est particuli\u00e8rement utile en programmation concurrente et dans les applications o\u00f9 la fiabilit\u00e9 est critique.</p> <p>Le paradigme orient\u00e9 objet</p> <p>Ce paradigme est bas\u00e9 sur la notion d'objets, qui sont des instances de classes et encapsulent des donn\u00e9es (attributs) et des comportements (m\u00e9thodes).</p> <p>Ce paradigme est constitu\u00e9 de 5 piliers:</p> <ol> <li>Objet (et classe)</li> <li>Encapsulation</li> <li>Abstraction</li> <li>Polymorphisme</li> <li>H\u00e9ritage</li> </ol> <p>Nous insisterons sur le pilier 1. Nous parlerons un peu du pilier 2, mais python ne l'impl\u00e9mente pas vraiment. Nous verrons des usages simples du 5\u00e8me pilier, surtout \u00e0 des fins de simplification de code, afin de pouvoir ne pas crouler sous du code redondant.</p> <p>Il existe un malentendu majeur autour de la POO, li\u00e9 \u00e0 la mani\u00e8re dont le concept d'objet a \u00e9t\u00e9 interpr\u00e9t\u00e9 et utilis\u00e9. \u00c0 l'origine, des langages comme Simula, qui est souvent consid\u00e9r\u00e9 comme l'un des premiers langages orient\u00e9s objet, voyaient les objets comme une repr\u00e9sentation de concepts du monde r\u00e9el, avec des comportements propres. Cependant, avec la popularisation de la POO (notamment gr\u00e2ce \u00e0 C++ et Java), beaucoup de d\u00e9veloppeurs ont commenc\u00e9 \u00e0 concevoir des objets simplement comme des structures de donn\u00e9es am\u00e9lior\u00e9es. Ca a conduit \u00e0 des critiques sur le fait que la v\u00e9ritable philosophie de la POO, telle qu'envisag\u00e9e par ses cr\u00e9ateurs, avait \u00e9t\u00e9 dilu\u00e9e ou mal comprise.</p> <p>Alan Kay, qui a invent\u00e9 le terme \"orient\u00e9 objet\" (notamment avec Smalltalk), a exprim\u00e9 sa frustration face \u00e0 la mani\u00e8re dont ce paradigme a \u00e9volu\u00e9. Il a pr\u00e9cis\u00e9 que pour lui, la POO ne concernait pas simplement l'encapsulation ou l'h\u00e9ritage, mais plut\u00f4t la communication entre objets via des messages. Cette vision a souvent \u00e9t\u00e9 r\u00e9duite \u00e0 une simple organisation de donn\u00e9es et de m\u00e9thodes dans des classes, une simplification que Kay a critiqu\u00e9e. Il s\u2019est m\u00eame distanci\u00e9 de la mani\u00e8re dont le paradigme a \u00e9t\u00e9 interpr\u00e9t\u00e9 par des langages comme C++ ou Java.</p> <p>Ce malentendu est int\u00e9ressant car il montre comment une id\u00e9e technique peut \u00e9voluer de mani\u00e8re inattendue. Ce que nous cr\u00e9ons et livrons au monde nous appartient-il \u00e0 jamais?</p> <p>J'admets que nous touchons \u00e0 ce malentendu dans l'utilisation de la POO qui est faite dans l'impl\u00e9mentation mutable des structures de donn\u00e9es que nous avons rencontr\u00e9. C'est surtout unn pr\u00e9texte pour que vous manipuliez des objets. Cependant, elle trouve tout son sens dans le projet space invader, o\u00f9 des objets sont bien en communication.</p> <p>Meilleur paradigme?</p> <p>Au del\u00e0 du purisme, la plupart des nouveaux langages impl\u00e9mentent divers concepts provenant de multiples paradigmes. Ils sont dits multi-paradigmes. Pour la simple et bonne raison que ce qui est facile \u00e0 penser dans un paradigme l'est parfois moins dans un autre. Il convient de ne pas se r\u00e9duire \u00e0 une guerre inter-paradigme. La question \"Quel est le meilleur paradigme?\" n'a pas de sens lorsqu'on s'attaque \u00e0 des probl\u00e8mes r\u00e9els. La r\u00e9elle richesse provient de la connaissance initiale de ces paradigme et de savoir en faire la part des choses ind\u00e9pendament d'une suppos\u00e9e meilleure fa\u00e7on de penser. </p> <p>Les phrases suivantes sont de meilleures questions \u00e0 se poser en fonctionn du contexte:</p> <ul> <li>\"Dans quel paradigme vais-je me sentir plus \u00e0 l'aise pour penser mon probl\u00e8me?\". </li> <li>\"Dans quel paradigme est-il raisonable de r\u00e9soudre mon probl\u00e8me \u00e9tant donn\u00e9 l'\u00e9tat du march\u00e9 des d\u00e9veloppeurs?\"</li> <li>\"Dans quel paradigme est-il raisonable de r\u00e9soudre mon probl\u00e8me \u00e9tant donn\u00e9es les comp\u00e9tences de mes d\u00e9veloppeurs?\"</li> <li>...</li> </ul>"},{"location":"terminale/langages/poo/","title":"Paradigme orient\u00e9 objets","text":"<p>D\u00e9finition</p> <p>En programmation orient\u00e9e objet, un programme est un ensemble d'entit\u00e9s qui interagissent. Ces entit\u00e9s sont appel\u00e9es des objets. Un objet poss\u00e8de un \u00e9tat (les donn\u00e9es qui le caract\u00e9risent) et des comportements (ce qu'il sait faire).</p> <p>L'\u00e9tat d'un objet est repr\u00e9sent\u00e9 par l'ensemble de ses attributs Les comportements d'un objet sont repr\u00e9sent\u00e9s par l'ensemble de ses m\u00e9thodes</p> <p>Une classe permet de d\u00e9finir une famille d'objets. A partir d'une classe, on peut cr\u00e9er autant d'objets que l'on veut. Ce sont des exemplaires, des instances de la classe.</p>"},{"location":"terminale/langages/poo/#classe-animal","title":"Classe <code>Animal</code>","text":"<p>Voici un exemple basique d'une classe en Python qui mod\u00e9lise la phrase \"Un animal porte un nom, et il sait parler.\"</p> <pre><code>class Animal:\n    def __init__(self, nom: str):\n        self.nom = nom  # Attribut d'instance\n\n    def parler(self):   # M\u00e9thode d'instance\n        print(f\"{self.nom} fait du bruit.\")\n\nx = Animal(\"Bidule\")   # cr\u00e9ation d'une instance d'Animal portant le nom bidule\nprint(x.nom)           # On acc\u00e8de aux attributs de l'instance avec le point. Affiche: Bidule\nx.nom = \"Truc\"         # Mutabilit\u00e9 -&gt; On peut modifier les attributs de l'instance de la m\u00eame mani\u00e8re \nx.parler()  # On acc\u00e8de aussi aux m\u00e9thodes d'instance par le point. Affiche: Truc fait du bruit.\n</code></pre> <p>Ce programme affichera <pre><code>Bidule\nTruc fait du bruit\n</code></pre></p> <p>Dans cet exemple :</p> <ul> <li><code>__init__</code> : Cette m\u00e9thode sera automatiquement charg\u00e9e d'initialiser les attributs de l'objet en cours d'instanciation. On le consid\u00e8re comme le constructeur de la classe.</li> <li><code>self</code> : Repr\u00e9sente l'instance actuelle de la classe. Il permet d'acc\u00e9der aux attributs et m\u00e9thodes de l'objet lui-m\u00eame.</li> </ul> <p>Constructeur</p> <p>Un constructeur est une fonction particuli\u00e8re appel\u00e9e lors de l'instanciation. Elle permet d'allouer la m\u00e9moire n\u00e9cessaire \u00e0 l'objet et d'initialiser ses attributs.</p> <p>Abus de langage</p> <p>Il est tr\u00e8s (trop) courant de consid\u00e9rer <code>__init__</code> comme le constructeur en Python, car il initialise l'objet apr\u00e8s sa cr\u00e9ation. Cependant, il ne fait que la moiti\u00e9 du travail. la m\u00e9thode charg\u00e9e de cr\u00e9er l'instance est le dunder <code>__new__</code>. La preuve en est que <code>__init__</code> prend self en param\u00e8tre, c'est donc bien que self existe d\u00e9j\u00e0 avant l'invocation d'<code>__init__</code>. Le constructeur est en r\u00e9alit\u00e9 le couple form\u00e9 par les m\u00e9thodes <code>__new__</code> et <code>__init__</code>.</p> <p>Voici une portion de code pour se rendre compte de ce qu'il se passe r\u00e9ellement:</p> <pre><code>class MaClasse:\n    def __new__(cls, *args, **kwargs):\n        '''Appel de __new__ pour cr\u00e9er une nouvelle instance de la classe'''\n        print(\"Appel de __new__ : Cr\u00e9ation de l'instance\")\n        instance = super(MaClasse, cls).__new__(cls)\n        return instance\n\n    def __init__(self, valeur):\n        '''Appel de __init__ pour initialiser l'instance avec les attributs'''\n        print(\"Appel de __init__ : Initialisation de l'instance\")\n        self.valeur = valeur\n\n    def afficher_valeur(self):\n        print(f\"Valeur : {self.valeur}\")\n\n# Instanciation d'un objet\nc = MaClasse(\"truc\")\nc.afficher_valeur()\n</code></pre> <p>On consid\u00e8rera malgr\u00e9 tout que <code>__init__</code> est le constructeur, car si on vous pose la question, c'est la r\u00e9ponse attendue.</p>"},{"location":"terminale/langages/poo/#interactions-entre-objets","title":"Interactions entre objets","text":"<p>Rajoutons la phrase \"Un Humain porte un nom, un prenom et peut adopter des animaux domestiques. On peut afficher la liste des animaux d'un Humain\".</p> <pre><code>class Humain:\n    def __init__(self, prenom: str, nom: str):\n        self.nom = nom\n        self.prenom = prenom\n        self.animaux: list[Animal] = []\n\n    def adopte(self, a: Animal):\n        self.animaux.append(a)\n\n    def afficher_animaux(self):\n        for a in self.animaux:\n            print(a.nom)\n\n\nx = Humain(\"Peter\", \"Quill\")\ny = Animal(\"Rocket\")\nx.adopte(y)\nx.afficher_animaux()   # Affiche Rocket\n</code></pre> <p>Ici, on a choisi que l'humain porte la liste de ses animaux. On aurait pu \u00e0 la place ajouter un attribut propri\u00e9taire \u00e0 la classe Animal pour dire qu'un animal est la propri\u00e9t\u00e9 d'un humain particulier. Mais on aurait perdu la possibilit\u00e9 d'afficher les animaux d'un humain sans disposer de la liste de tous les animaux. Il faut souvent choisir quelle classe est le \"chef d'orchestre\" en fonction du probl\u00e8me qu'on a \u00e0 traiter.</p> <p>H\u00e9ritage</p> <p>L\u2019h\u00e9ritage est un autre pilier fondamental en POO. Il permet \u00e0 une classe (dite sous classe) d\u2019h\u00e9riter des attributs et m\u00e9thodes d\u2019une autre classe (dite super classe).</p>"},{"location":"terminale/langages/poo/#exemple-classe-ratonlaveur-heritant-de-animal","title":"Exemple : Classe <code>RatonLaveur</code> h\u00e9ritant de <code>Animal</code>","text":"<p>Nous pourrions ajouter un attribut <code>espece</code> \u00e0 la classe Animal pour les distinguer, mais ici, pour introduire le concept, nous allons choisir cette phrase en Fran\u00e7ais: \"Un RatonLaveur EST UN Animal\"</p> <pre><code>class RatonLaveur(Animal):\n\n    def __init__(self, nom: str):\n        super().__init__(nom) # cette ligne appelle le constructeur de la super classe\n\n    def parler(self):\n        print(f\"{self.nom} \u00e9met des grognements.\")\n</code></pre> <p>La classe <code>RatonLaveur</code> h\u00e9rite de <code>Animal</code> mais peut red\u00e9finir certaines m\u00e9thodes (ici, <code>parler</code>), ou encore en cr\u00e9er d'autres. Ainsi, un objet de la classe <code>Chien</code> pourra aboyer au lieu de \"faire du bruit\". Un Raton laveur pourra \u00e9mettre das grognements</p> <p>En fran\u00e7ais, on peut tr\u00e8s bien dire d\u00e8s lors \"Un Chien EST UN Animal\"</p> <p>Programme exemple: <pre><code>x = Animal(\"Animal quelconque\")\nx.parler()\ny = RatonLaveur(\"Rocket\")\ny.parler()\nprint(isinstance(x, Animal), isinstance(x, RatonLaveur))\nprint(isinstance(y, Animal), isinstance(y, RatonLaveur))\n</code></pre> Affichage: <pre><code>Animal quelconque fait du bruit\nRocket \u00e9met des grognements\nTrue False\nTrue True\n</code></pre></p> <p>La fonction <code>isinstance</code> sert \u00e0 savoir si un objet est une instance d'une classe. Si on a besoin de l'utiliser hors debugging, c'est s\u00fbrement du \u00e0 un d\u00e9faut de conception. On n'aura pas besoin de l'utiliser.</p> <p>Mod\u00e9lisation objet</p> <p>Une voiture a une marque, un mod\u00e8le, un prix, un nombre de kilom\u00e8tres parcourus, une quantite de carburant dans le r\u00e9servoir (en litres), et une consommation (litres au 100). Une voiture peut rouler sur une certaine distance. \u00c0 chaque fois qu'elle roule, le kilom\u00e9trage augmente, et le carburant diminue. Le r\u00e9servoir de la voiture a une capacit\u00e9 maximale. On peut afficher les caract\u00e9ristiques de la voiture.</p> <p>Un Humain a une quantit\u00e9 d'argent disponible sur son compte en banque. Un Humain peut acheter des voitures. Un Humain peut faire des trajets avec une voiture pour un certain nombre de kilom\u00e8tres. Avant de commencer un trajet, l'humain v\u00e9rifie s'il a assez d'essence, sinon, il va \u00e0 la station service faire le plein. Lorsqu'un humain fait le plein de sa voiture, son compte en banque diminue. </p> <ul> <li>Ecrivez une classe Humain et une classe Voiture compatibles avec cette description.</li> <li>Instanciez ensuite Humain et Voiture afin de tester des scenarios d'utilisation.</li> </ul>"},{"location":"terminale/langages/recursivite/","title":"R\u00e9cursivit\u00e9","text":"<p>Pr\u00e9-requis</p> <p>Vous avez d\u00e9j\u00e0 assimil\u00e9 la r\u00e9cursivit\u00e9 sur les structures de donn\u00e9es standard.</p>"},{"location":"terminale/langages/recursivite/#rappel-de-definitions","title":"Rappel de d\u00e9finitions","text":"<p>Fonction r\u00e9cursive</p> <p>Une fonction r\u00e9cursive est une fonction qui fait appel \u00e0 elle-m\u00eame dans sa d\u00e9finition.</p> <p>Type r\u00e9cursif</p> <p>Un type r\u00e9cursif est un type qui fait appel \u00e0 lui-m\u00eame dans sa d\u00e9finition.</p> <p>Cas de base</p> <p>Un cas de base est un cas exhib\u00e9 dont le traitement ne n\u00e9cessite pas d'appel r\u00e9cursif pour renvoyer un r\u00e9sultat.</p> <p>L'objectif dans la construction d'une fonction r\u00e9cursive est d'assurer la convergence vers un cas de base pour les cas r\u00e9cursifs. Ceci afin que la fonction s'arr\u00eate.</p> <p>Disjonction de cas</p> <p>Lors de l'analyse d'un probl\u00e8me, il convient d'exhiber chacun des cas qui peuvent se produire sans en oublier parmis les possibles.</p> <p>Tests</p> <p>Par tester, on entendra \u00e9crire la docstring appropri\u00e9e et inclure en fin de fichier le boilerplate de doctest.</p>"},{"location":"terminale/langages/recursivite/#recursivite-sur-les-entiers-triangle-de-pascal","title":"R\u00e9cursivit\u00e9 sur les entiers - Triangle de Pascal","text":"<p>Observez la fa\u00e7on dont est construit le tableau suivant. On appelle i l'indice ligne, et j l'indice colonne. Le tableau a 6 lignes sur l'exemple, mais on le consid\u00e8re de taille infinie.</p> \\[ \\begin{bmatrix} 1 &amp; 0 &amp; 0 &amp; 0 &amp; 0 &amp; 0 \\\\ 1 &amp; 1 &amp; 0 &amp; 0 &amp; 0 &amp; 0 \\\\ 1 &amp; 2 &amp; 1 &amp; 0 &amp; 0 &amp; 0 \\\\ 1 &amp; 3 &amp; 3 &amp; 1 &amp; 0 &amp; 0 \\\\ 1 &amp; 4 &amp; 6 &amp; 4 &amp; 1 &amp; 0 \\\\ 1 &amp; 5 &amp; 10 &amp; 10 &amp; 5 &amp; 1 \\\\ \\end{bmatrix} \\] <p>Il n'y a que des \\(1\\) dans la premi\u00e8re colonne ainsi que sur la diagonale. Il n'y a que des \\(0\\) au dessus de la diagonale. Sinon, un nombre est toujours \u00e9gal \u00e0 celui du dessus, plus celui du dessus \u00e0 gauche.</p> <p>On cherche \u00e0 d\u00e9finir une fonction \\(C(i,j)\\) qui renvoie le nombre \u00e0 la coordonn\u00e9e \\(\\binom{i}{j}\\)</p> <ul> <li>Que doit renvoyer l'appel \\(C(4,2)\\)?</li> <li>disjonction de cas:<ul> <li>Quelle est la condition sur \\(i\\) et \\(j\\) pour que \\(C(i, j)\\) renvoie 0?</li> <li>Quelle est la condition sur \\(i\\) et \\(j\\) pour que \\(C(i, j)\\) renvoie 1?</li> <li>Sinon, exprimez \\(C(i,j)\\) de mani\u00e8re r\u00e9cursive.</li> </ul> </li> <li>Ecrivez et testez la fonction r\u00e9cursive <code>C(i: int, j: int) -&gt; int</code> qui renvoie le nombre \u00e0 la coordonn\u00e9e \\(\\binom{i}{j}\\).</li> <li>Ecrivez la fonction <code>pascal(n: int) -&gt; list[list[int]]</code> qui renvoie le tableau \u00e0 \\(n-1\\) lignes. Par exemple, le tableau exemple est renvoy\u00e9 par <code>pascal(5)</code>. La fonction doit faire une ligne. Vous utiliserez les listes en compr\u00e9hension.</li> </ul> <p>On s'int\u00e9resse maintenant \u00e0 la suite \\(P_n\\) de chacun des termes non nuls de la ligne \\(n\\). Par exemple, \\(P_0 = 1\\), \\(P_4 = 1\\times 4 \\times 6 \\times 4 \\times 1\\) - En utilisant la fonction C, \u00e9crire et tester la fonction <code>P(n: int) -&gt; int</code></p> <p>Sp\u00e9 Math: On consid\u00e8re maintenant la suite \\(\\displaystyle Q_n = \\frac{P_{n-1}P_{n+1}}{P_n^2}, n&gt;0\\)</p> <ul> <li> <p>Ecrire la fonction <code>Q(n: int) -&gt; float</code></p> </li> <li> <p>En jouant avec cette fonction, conjecturer sur \\(\\displaystyle \\lim_{n \\to \\infin}Q_n\\)</p> </li> <li> <p>Simplifiez l'expression de \\(\\displaystyle \\frac{P_{n+1}}{P_n}\\) sachant que:</p> <ul> <li>\\(\\displaystyle P_n = \\prod_{k=0}^{n} \\binom{n}{k}\\)</li> <li>\\(\\displaystyle \\binom{n}{k} = \\frac{n!}{k!(n-k)!}\\) (On pourra chercher \u00e0 le montrer par r\u00e9currence)</li> </ul> </li> <li> <p>D\u00e9montrez votre conjecture en cons\u00e9quence.</p> </li> </ul>"},{"location":"terminale/langages/recursivite/#recursivite-sur-les-entiers-operations","title":"R\u00e9cursivit\u00e9 sur les entiers - Op\u00e9rations","text":"<p>La r\u00e9cursivit\u00e9 vous a \u00e9t\u00e9 pr\u00e9sent\u00e9e via des structures de donn\u00e9es elles-m\u00eames r\u00e9cursives. Ici nous allons nous concentrer sur les entiers naturels.</p> <p>L'objectif est de construire toutes les op\u00e9rations que vous connaissez, simplement \u00e0 partir de la d\u00e9finition du successeur d'un nombre.</p> <ul> <li>On dispose d'un type <code>entiernat</code> repr\u00e9sentant un entier naturel (qu'on mod\u00e9lise par un int).</li> <li>On dispose d'une fonction <code>succ</code>. Elle sert \u00e0 renvoyer le successeur de l'entier en param\u00e8tre.</li> <li>On d\u00e9finit ZERO.</li> <li>On d\u00e9finit UN comme successeur de 0.</li> <li>On dispose d'une fonction <code>afficher</code> qui affiche la repr\u00e9sentation de l'entier \u00e0 l'\u00e9cran.</li> </ul> <pre><code>type entiernat = int\n\ndef succ(n: entiernat) -&gt; entiernat:\n    assert n&gt;0, \"Pas un entier naturel\"\n    return n + 1   \n\nZERO = 0\nUN = succ(ZERO)\n\ndef afficher(n: entiernat):\n  print(n)\n</code></pre> <p>A partir de maintenant, plus aucun op\u00e9rateur ne sera utilis\u00e9. (+, -, , /, *, ....)</p> <p>On donne la fonction <code>pred</code> construite uniquement avec la fonction <code>succ</code>. Cette fonction renvoie le pr\u00e9d\u00e9cesseur d'un entier.</p> <pre><code>def pred(n: entiernat):\n    assert n!=ZERO, \"Aucun entier naturel n'a pour successeur 0\"\n    def aux(n: entiernat, acc: entiernat) -&gt; entiernat:\n        if succ(acc) == n:\n            return acc\n        else:\n            return aux(n, succ(acc))\n\n    return aux(n, ZERO)\n</code></pre>"},{"location":"terminale/langages/recursivite/#exemple-complet-avec-loperation-plus","title":"Exemple complet avec l'op\u00e9ration <code>plus</code>","text":"<p>On veut calculer \\(plus(a, b)\\) de mani\u00e8re r\u00e9cursive, en utilisant les fonctions d\u00e9j\u00e0 existantes. \\(plus(a, 0) = a\\), \u00e7a sera notre cas de base. On veut donc r\u00e9\u00e9crire \\(plus(a, b)\\) pour que \\(b-1\\) aparaisse, assurant la convergence vers le cas de base. On doit donc r\u00e9\u00e9crire \\(a+b\\) afin de faire appara\u00eetre \\(b-1\\). </p> \\[a+b =a+(b-1) +1 \\] <p>donc \\(plus(a,b)=succ(plus(a, pred(b)))\\)</p> <p>Ecrivons donc notre fonction en cons\u00e9quence:</p> \\[plus(a,b)=\\begin{cases}     a &amp; , \\text{si } b=0  \\text{ (cas de base)}\\\\      succ(plus(a, pred(b))) &amp;, \\text{sinon}     \\end{cases}\\] <p>En \u00e9crivant b\u00eatement la d\u00e9finition en python:</p> <pre><code>def plus(a: entiernat, b: entiernat) -&gt; entiernat:\n  if b == ZERO:\n    return a\n  else:\n    return succ(plus(a, pred(b)))\n\nafficher(plus(9, 5))\n</code></pre> <p>Autres op\u00e9rations</p> <p>En suivant ce mode op\u00e9ratoire, \u00e9crire les fonctions <code>fois</code> et <code>puissance</code></p> <p>Pour aller plus loin</p> <p>Vous pouvez, si vous le souhaitez, vous int\u00e9resser aux puissances it\u00e9r\u00e9es d'ordre \\(n\\) et \u00e9crire un programme r\u00e9cursif qui les calcule. Pour aller encore plus loin, vous pouvez \u00e9tudier la notion d'hyperop\u00e9rateur et \u00e9crire la fonction d'hyperop\u00e9ration (celle qui les unit toutes).</p>"},{"location":"terminale/langages/recursivite/#construction-de-mathbbn-par-von-neumann","title":"Construction de \\(\\mathbb{N}\\) par Von Neumann","text":"<p>Voici comment Von Neumann construit \\(\\mathbb{N}\\)</p> <ul> <li>Un entier naturel est un ensemble.</li> <li>Le premier entier naturel est l'ensemble vide. On l'appelle z\u00e9ro.</li> <li>Le successeur d'un entier naturel est l'union de cet entier avec l'ensemble contenant cet entier.</li> </ul> <p>Par cons\u00e9quent, Le cardinal de l'entier n est pr\u00e9cis\u00e9ment n.</p> <pre><code>type entiernat = set # Un entier naturel est un ensemble\n\ndef succ(n: entiernat)  -&gt; entiernat:\n  return n.union(set(n))  # L'union de cet entier avec l'ensemble contenant cet entier\n\nZERO = set()         # Zero est l'ensemble vide\nUN = succ(ZERO)\n\ndef afficher(n: entiernat):\n  \"\"\"Le cardinal de n est pr\u00e9cis\u00e9ment n\"\"\"\n  print(len(n))\n</code></pre> <p>Vous pouvez remplacer la d\u00e9finition pr\u00e9c\u00e9dente par cette d\u00e9finition, et constater que vos fonctions donnent toujours des r\u00e9sultats corrects.</p>"},{"location":"terminale/langages/recursivite/#pavages","title":"Pavages","text":""},{"location":"terminale/langages/recursivite/#probleme-1","title":"Probl\u00e8me 1","text":"<p>On cherche \u00e0 paver une bande compos\u00e9e de n carr\u00e9s avec des tuiles de largeur 1 et 2.</p> <p></p> <ul> <li>Dessiner les pavages possibles pour \\(n=1\\), \\(n=2\\), \\(n=3\\), \\(n=4\\)</li> <li>Pour quelles tailles de bande pouvez vous donner directement la r\u00e9ponse sans trafiquer?</li> <li>Trouvez l'\u00e9quation de r\u00e9currence de \\(p_{n}\\), le nombre de pavage d'une bande de taille \\(n\\) </li> <li>Ecrivez une fonction en python <code>nombre_pavages(n: int) \u2192 int</code> qui calcule le nombre de pavages pour une bande de taille n.</li> </ul>"},{"location":"terminale/langages/recursivite/#variation","title":"Variation","text":"<p>Reprendre ce probl\u00e8me pour paver une bande de taille \\(n\\) avec des tuiles de largeur 1 et 3.</p>"},{"location":"terminale/langages/recursivite/#probleme-2","title":"Probl\u00e8me 2","text":"<p>Reprendre le probl\u00e8me 1, mais cette fois, nous cherchons \u00e0 construire la liste des possibilit\u00e9s de pavages.</p> <p></p> <p>Ce pavage correspond \u00e0 la liste ['R', 'B', 'B', 'R'] pour n=6.</p> <ul> <li>Ecrire <code>pavage(n: int) -&gt; list[str]</code></li> </ul> <p>Ici, il faut s'appuyer sur la structure qui d\u00e9termine le nombre de solutions (comme presque tout le temps en r\u00e9alit\u00e9). Vous pouvez ensuite dessiner les bandes \u00e0 l'\u00e9cran, en s'int\u00e9ressant \u00e0 ces deux str:</p> <pre><code>rouge = \"\\N{LARGE RED SQUARE}\"\nbleu = 2*\"\\N{LARGE BLUE SQUARE}\"\n</code></pre>"},{"location":"terminale/langages/recursivite/#conversion-binaire","title":"Conversion Binaire","text":"<p>La conversion d'entiers naturels en binaire est un proc\u00e9d\u00e9 r\u00e9cursif qui fonctionne sur base de la division euclidienne par 2.</p> <p>Ecrire la fonction r\u00e9cursive:  <code>dec_to_bin(n: int) -&gt; str</code></p>"},{"location":"terminale/langages/recursivite/#permutations-des-n-premiers-entiers-naturels","title":"Permutations des n premiers entiers naturels","text":"<p>TODO</p>"},{"location":"terminale/langages/recursivite/#le-tour-du-cavalier","title":"Le tour du cavalier","text":"<p>EN COURS</p> <p>Le tour du cavalier est un probl\u00e8me hyper classique consistant \u00e0 d\u00e9placer un cavalier sur un \u00e9chiquier de mani\u00e8re \u00e0 ce qu\u2019il visite chaque case exactement une fois.</p> <p>Il existe deux types de tours:</p> <ul> <li>Tour ferm\u00e9 : Le cavalier revient \u00e0 sa case de d\u00e9part apr\u00e8s avoir visit\u00e9 chaque case une fois, formant ainsi un circuit ferm\u00e9.</li> <li>Tour ouvert : Le cavalier termine son parcours sur une case diff\u00e9rente de celle de d\u00e9part sans revenir \u00e0 sa position initiale.</li> </ul> <p>Sur un \u00e9chiquier 5x5</p> <ul> <li>Quand le cavalier part d'une case blanche, peut-il aller sur une case de la m\u00eame couleur?</li> <li>Combien de mouvements doit faire le cavalier pour parcourir toutes les cases?</li> <li>Expliquer, de mani\u00e8re structur\u00e9e, en vous servant des r\u00e9ponses aux questions pr\u00e9c\u00e9dentes, pourquoi il est impossible qu'un cavalier revienne \u00e0 son point de d\u00e9part en ayant visit\u00e9 toutes les cases sur un \u00e9chiquier 5x5. </li> </ul>"},{"location":"terminale/langages/recursivite/#tour-ouvert","title":"Tour ouvert","text":"<p>On donne les types suivants, ainsi que les variables globales LARGEUR et HAUTEUR (de l'\u00e9chiquier)</p> <pre><code>type coup = tuple[int, int] \ntype chemin = list[coup]\n\nHAUTEUR = 5\nLARGEUR = 5\n</code></pre> <p>Coups suivants</p> <p>Ecrire la fonction <code>coups_suivants(c: coup) -&gt; list[coup]</code></p> <p>Cette fonction renvoie la liste des coups possibles lorsqu'on a jou\u00e9 le coup c.</p> <p>Parcours de tous les tours possibles (ouverts ou ferm\u00e9s)</p> <p>Ecrire la fonction r\u00e9cursive <code>parcours(c: coup, chemins: list[chemin], acc: chemin)</code></p> <ul> <li>acc contient le chemin en cours de construction</li> <li>chemins contient la liste de tous les chemins. Une liste est mutable, donc elle peut \u00eatre modifi\u00e9e \u00e0 n'importe quel moment. (on se la trimballe partout o\u00f9 on va)</li> <li>\u00e0 chaque appel, il faut visiter tous les coups qui ne sont pas d\u00e9j\u00e0 dans le chemin, en l'ajoutant bien s\u00fbr dans le chemin.</li> <li>d\u00e8s qu'on a un chemin dont la taille est \u00e9gale au nombre de cases, il faut l'ajouter aux chemins.</li> </ul> <p>Tours ferm\u00e9s</p> <ul> <li>Dans une autre fonction au nom appropri\u00e9, modifier le cas de base pour n'afficher que les tours ferm\u00e9s.</li> <li>Ca ne doit rien renvoyer sur un \u00e9chiquier 5x5, comme constat\u00e9 pr\u00e9c\u00e9demment</li> <li>On ne testera que sur un \u00e9chiquier de taille 6x5 (c'est tr\u00e8s long)</li> </ul> <p>God Mode</p> <p>Ceux qui se sont frott\u00e9s \u00e0 rust peuvent constater la diff\u00e9rence de performance sur ce genre de probl\u00e8mes. Dans cargo.toml, pour que le code g\u00e9n\u00e9r\u00e9 soit optimis\u00e9, ajouter: <pre><code>[profile.release]\nopt-level = 3\nlto = true\n</code></pre></p> <p>On utilisera le flag --release pour build ou run. Par exemple: <pre><code>cargo run --release\n</code></pre></p>"},{"location":"terminale/structures-de-donnees/arbrebinaire/","title":"Arbres enracin\u00e9s","text":"<p>Pr\u00e9-requis</p> <p>Si les listes sont ma\u00eetris\u00e9es, ceci ne devrait presque \u00eatre qu'une formalit\u00e9.</p>"},{"location":"terminale/structures-de-donnees/arbrebinaire/#arbre-enracine-quelconque","title":"Arbre enracin\u00e9 quelconque","text":"<p>Voici un arbre enracin\u00e9 quelconque:</p> <pre><code>\ngraph TD;\n    A((3))\n    A --&gt; B((7))\n    A --&gt; C((2))\n    B --&gt; D((9))\n    B --&gt; E((18))\n    C --&gt; F((15))\n    C --&gt; G((6))\n    C --&gt; H((5))\n    F --&gt; I((8))</code></pre> <p>Arbre (enracin\u00e9)</p> <p>Un arbre est soit vide, soit compos\u00e9 d'un noeud portant une donn\u00e9e ainsi qu'une for\u00eat.</p> <p>Une for\u00eat est vie ou c'est un ensemble d'arbres disjoints.</p> <p>On appelle racine un noeud qui n'a pas de parent.</p> <p>On appelle feuille un noeud n'ayant pas d'enfant.</p> <p>La taille d'un arbre est son nombre de noeuds.</p> <p>La hauteur d'un arbre poss\u00e8de 2 d\u00e9finitions impactant la d\u00e9finition de la hauteur de l'arbre vide:</p> <ul> <li>Longueur du chemin \u00e0 la feuille la plus \u00e9loign\u00e9e (\\(hauteur(\\empty)=-1\\))</li> <li>Nombre de noeuds dans le chemin \u00e0 la feuille la plus \u00e9loign\u00e9e. (\\(hauteur(\\empty)=0\\))</li> </ul> <p>Dans un premier temps, nous allons nous int\u00e9resser \u00e0 une forme sp\u00e9ciale d'arbre, les arbres binaires.</p>"},{"location":"terminale/structures-de-donnees/arbrebinaire/#arbres-binaires","title":"Arbres binaires","text":"<p>Arbre binaire</p> <p>Un arbre binaire est une structure compos\u00e9e d'une cl\u00e9 (ou \u00e9tiquette), ainsi que de 2 arbres, le sous-arbre gauche (sag) ainsi que le sous-arbre droit (sad). C'est un arbre tr\u00e8s particulier car on distingue bien la position de chaque sous-arbre.</p> <p></p> <p>Exercice</p> <p>Proposez une impl\u00e9mentation python immuable du type arbrebin.</p> <p>Exercices</p> <p>Impl\u00e9menter les fonctions d'acc\u00e8s de base:</p> <ul> <li><code>cle(a: arbrebin) -&gt; int</code></li> <li><code>sag(a: arbrebin) -&gt; arbrebin</code></li> <li><code>sad(a: arbrebin) -&gt; arbrebin</code></li> <li><code>est_vide(a: arbrebin) -&gt; bool</code></li> <li><code>est_feuille(a: arbrebin) -&gt; bool</code></li> </ul> <p>Impl\u00e9menter en cons\u00e9quence les fonctions r\u00e9cursives:</p> <ul> <li><code>hauteur</code> calcule la hauteur d'un arbre<ul> <li>(je suis un arbre, je pose la question \u00e0 mon sag et mon sad, qu'est-ce que je fais avec leurs r\u00e9ponse?)</li> </ul> </li> <li><code>taille</code> calcule le nombre de noeuds d'un arbre</li> <li><code>somme</code> calcule la somme des cl\u00e9s d'un arbre</li> <li><code>to_str</code> renvoie une str comportant toutes les cl\u00e9s d'un arbre.</li> <li><code>minimum</code> renvoie la cl\u00e9 minimum d'un arbre binaire.</li> <li><code>maximum</code> renvoie la cl\u00e9 maximum d'un arbre binaire.</li> <li><code>sont_egaux</code> renvoie si 2 arbres sont identiques.</li> </ul> <p>Arbre al\u00e9atoire</p> <ul> <li>Cr\u00e9er une fonction r\u00e9cursive <code>genere_alea(h: int) -&gt; arbrebin</code> qui g\u00e9n\u00e8re un arbre complet ayant pour hauteur h, comportant des cl\u00e9s al\u00e9atoires de 1 \u00e0 100.</li> <li>Sp\u00e9 maths: Cr\u00e9er une fonction r\u00e9cursive <code>genere_alea2() -&gt; arbrebin</code> qui g\u00e9n\u00e8re un arbre comportant des cl\u00e9s al\u00e9atoires de 1 \u00e0 100. La probabilit\u00e9 de cr\u00e9er un noeud doit \u00eatre l'inverse de sa hauteur.</li> <li>Sp\u00e9 Maths: Etudiez les fonctions \\(f_\\alpha(x)=e^{-\\alpha  x^2}, x\\in \\mathbb{R^+},  \\alpha \\in \\mathbb{R}^{*+}\\)<ul> <li>Variations, limites, convexit\u00e9</li> <li>Trouvez les coordonn\u00e9es de leur point d'inflexion.</li> <li>Proposez comment utiliser cette fonction pour g\u00e9n\u00e9rer la probabilit\u00e9 de cr\u00e9er un noeud de hauteur \\(x\\), pour que l'arbre ait \u00e0 peu pr\u00e8s la hauteur \\(h\\). (on estimera que la probabilit\u00e9 renvoy\u00e9e au del\u00e0 du point d'inflexion est rapidement trop faible pour aller bien loin, et qu'il est d\u00e9j\u00e0 probable que certaines branches se soient d\u00e9j\u00e0 arr\u00eat\u00e9es avant d'atteindre la hauteur \\(h\\))</li> </ul> </li> </ul> <p>Arbre \u00e9quilibr\u00e9</p> <p>Un arbre est \u00e9quilibr\u00e9 s'il est vide ou que, \u00e0 la fois:</p> <ul> <li>La distance entre la hauteur de ses enfants est au maximum 1.</li> <li>Ses enfants sont \u00e9quilibr\u00e9s.</li> </ul> <p>Dessinez un arbre \u00e9quilibr\u00e9. Ecrire la fonction <code>est_equilibre(a: arbrebin) -&gt; bool</code>.</p> <p>Impl\u00e9mentation mutable</p> <p>L'impl\u00e9mentation ci-dessous utilise aussi une sentinelle, mais ne l'utilise pas de mani\u00e8re aussi sioux que pour les listes. Rien dde circulaire. Elle signifie seulement l'arbre vide. La cr\u00e9ation d'une sentinelle nous permet de ne pas utiliser la valeur g\u00e9n\u00e9rique None, qui pourrait signifier bien autre chose qu'une absence d'enfant, car None n'est pas propre \u00e0 notre structure.</p> <pre><code>class ArbreBin:\n    def __init__(self, cle, gauche: 'ArbreBin', droit: 'ArbreBin'):\n        self.cle = cle\n        self.gauche = gauche\n        self.droit = droit\n\n    def est_feuille(self):\n        return self.gauche is ARBRE_VIDE and self.droite is ARBRE_VIDE\n\n    def est_vide(self):\n        return self.gauche is ARBRE_VIDE and self.droite is ARBRE_VIDE\n\n    def taille(self) -&gt; int:\n        if self.est_vide():\n            return -1\n        return 1 + self.gauche.taille() + self.droit.taille()\n\n\nclass Sentinelle(ArbreBin):\n    def __init__(self):\n        super().__init__(0, self, self)\n\nARBRE_VIDE = Sentinelle()\n</code></pre> <p>Un autre possibilt\u00e9 est celle-ci, cette fois-ci avec l'utilisation de None:</p> <pre><code>class Noeud:\n    def __init__(self, cle, gauche: 'Noeud|None', droit: 'Noeud|None'):\n        self.cle = cle\n        self.gauche = gauche\n        self.droit = droit\n\n    def est_feuille(self):\n        return self.gauche is None and self.droite is None\n\n    ## Ici, on ne peut pas avoir de m\u00e9thode est_vide() car self ne peut jamais \u00eatre None. \n    ## Si self existe, c'est qu'un objet a \u00e9t\u00e9 instanci\u00e9, donc qu'il n'est n\u00e9cessairement pas rien.\n\n    def taille(self) -&gt; int:\n        \"\"\"\n        self ne pouvant pas \u00eatre None, le cas de base est qu'il est une feuille.\n        Ca nous oblige \u00e0 tester que self.gauche et self.droite ne sont pas None, car None n'a pas de m\u00e9thode taille()\n        Comparez ceci avec l'impl\u00e9mentation ci-dessus. \n        \"\"\"\n        if self.is_feuille():\n            return 0\n        tg, td = 0, 0\n        if self.gauche:\n            td = self.gauche.taille()\n        if self.droite:\n            tg = self.droite.taille()\n        return 1 + tg + td\n</code></pre> <p>Exercice</p> <p>Impl\u00e9mentez les m\u00eames fonctions pour les versions mutables propos\u00e9es.</p>"},{"location":"terminale/structures-de-donnees/arbrebinaire/#les-methodes-de-parcours-en-profondeur-dun-arbre","title":"Les m\u00e9thodes de parcours en profondeur d'un arbre","text":""},{"location":"terminale/structures-de-donnees/arbrebinaire/#prefixe","title":"pr\u00e9fixe","text":""},{"location":"terminale/structures-de-donnees/arbrebinaire/#infixe","title":"infixe","text":""},{"location":"terminale/structures-de-donnees/arbrebinaire/#postfixe","title":"postfixe","text":""},{"location":"terminale/structures-de-donnees/arbrebinaire/#parcours-en-largeur-dun-arbre","title":"Parcours en largeur d'un arbre.","text":"<p>Parcourir un arbre en largeur revient \u00e0 le parcourir \u00e9tage par \u00e9tage, de gauche \u00e0 droite.</p> <p>Nous allons, pour ce faire, nous appuyer sur la structure de file.</p> <ul> <li>On initialise une file avec la racine.</li> <li>Tant que la file n'est pas vide:<ul> <li>On d\u00e9file un noeud</li> <li>On l'affiche (ou autre action)</li> <li>On enfile ses enfants.</li> </ul> </li> </ul> <p>Impl\u00e9mentation</p> <ul> <li>Ecrire une fonction de parcours en largeur qui affiche un arbre.</li> <li>Modifier sensiblement la fonction pour qu'elle retourne une liste de ses \u00e9l\u00e9ments.</li> <li>Remplacez le m\u00e9canisme de file par un m\u00e9canisme de pile. Que se passe-t-il?</li> </ul>"},{"location":"terminale/structures-de-donnees/arbrebinaire/#arbre-binaire-de-recherche","title":"Arbre binaire de recherche","text":"<p>Arbre binaire de recherche (ABR)</p> <p>Un arbre binaire de recherche (ABR) est un arbre binaire vide ou poss\u00e8dant ces propri\u00e9t\u00e9s:</p> <ul> <li>le max des cl\u00e9s de son sag est inf\u00e9rieur \u00e0 sa cl\u00e9</li> <li>le min des cl\u00e9s de son sad est sup\u00e9rieur \u00e0 sa cl\u00e9</li> <li>son sag et son sad sont des abr</li> </ul> <p>D\u00e9finition \u00e9quivalente: Pour chaque noeud d'un ABR:</p> <ul> <li>Toutes les cl\u00e9s de son sag sont inf\u00e9rieures ou \u00e9gales \u00e0 sa cl\u00e9</li> <li>Toutes les cl\u00e9s de son sad sont sup\u00e9rieures ou \u00e9gales \u00e0 sa cl\u00e9</li> </ul> <p>L'objectif est ici de disposer d'une structure qui nous permette de rechercher de l'information tr\u00e8s rapidement.</p> <p>On consid\u00e8re dans le cours que les cl\u00e9s sont uniques, ce qui est habituellement le cas, mais on pourrait aussi prendre en compte des cl\u00e9s dupliqu\u00e9es, auquel cas, on travaillerait sur des in\u00e9galit\u00e9s au sens large.</p> <pre><code>graph TD;\n    A[8] --&gt; B[4]\n    A --&gt; C[12]\n    B --&gt; D[2]\n    B --&gt; E[6]\n    C --&gt; F[10]\n    C --&gt; G[14]\n    D --&gt; H[1]\n    D --&gt; I[3]\n    E --&gt; J[5]\n    E --&gt; K[7]\n    F --&gt; L[9]\n    F --&gt; M[11]\n    G --&gt; N[13]\n    G --&gt; O[15]</code></pre> <p>Exercices</p> <ul> <li> <p>Dessiner 3 ABR o\u00f9, partant d'un arbre vide, on ins\u00e8re successivement les valeurs:</p> <ul> <li>3, 7, 1, 9, 4, 8, 2, 5, 6</li> <li>6, 2, 9, 1, 5, 3, 8, 4, 7</li> <li>9, 5, 3, 7, 2, 6, 1, 8, 4</li> </ul> </li> <li> <p>Ecrire une fonction <code>est_abr(a: arbrebin) -&gt; bool</code></p> </li> <li>Ecrire une fonction <code>insere_abr(e: int, a: arbrebin) -&gt; arbrebin</code></li> <li>Ecrire une fonction <code>recherche_abr(e: int, a: arbrebin) -&gt; bool</code></li> <li> <p>Discussion: Quelle est la complexit\u00e9 de <code>recherche_abr</code>? </p> <ul> <li>Pour un arbre filiforme</li> <li>Pour un arbre parfait</li> </ul> </li> <li> <p>Impl\u00e9mentez ces fonctions pour la version mutable (important)</p> </li> </ul> <p>Arbre sym\u00e9trique</p> <pre><code>graph TD\nA1[\"10\"] --- B1[\"5\"]\nA1 --- C1[\"15\"]\nB1 --- D1[\"3\"]\nB1 --- E1[\"7\"]\nC1 --- F1[\"12\"]\nC1 --- G1[\"18\"]\n\n%% Arbre miroir\nA2[\"10\"] --- B2[\"15\"]\nA2 --- C2[\"5\"]\nB2 --- D2[\"18\"]\nB2 --- E2[\"12\"]\nC2 --- F2[\"7\"]\nC2 --- G2[\"3\"]</code></pre> <p>Les deux arbres ci-dessus sont des miroirs l'un de l'autre.</p> <p>Ecrire une fonction <code>sont_miroirs[T](a1: arbrebin[T], a2: arbrebin[T]) -&gt; bool</code>.</p> <p>L'arbre ci-dessous est sym\u00e9trique. <pre><code>graph TD\nA[\"10\"] --- B[\"5\"]\nA --- C[\"5\"]\nB --- D[\"3\"]\nB --- E[\"7\"]\nC --- F[\"7\"]\nC --- G[\"3\"]\nD --- H[\"1\"]\nD --- I[\"2\"]\nG --- J[\"2\"]\nG --- K[\"1\"]\nE --- L[\"4\"]\nE --- M[\"6\"]\nF --- N[\"6\"]\nF --- O[\"4\"]</code></pre></p> <p>Ecrire une fonction <code>est_symetrique[T](a: arbrebin[T]) -&gt; bool</code>.</p> <p>Application \u00e0 la compression de donn\u00e9es - Codage de Huffman</p> <p></p> <p>Liens \u00e0 consulter:</p> <ul> <li>https://www.youtube.com/watch?v=iiGZ947Tcck</li> <li>https://cmps-people.ok.ubc.ca/ylucet/DS/Huffman.html</li> <li>https://www.csfieldguide.org.nz/en/interactives/huffman-tree/</li> </ul> <p>Cr\u00e9ez un package \"projets\" \u00e0 la racine de votre repo. N'oubliez pas de mettre <code>__init__.py</code> dans le dossier.</p> <pre><code>from structures.hierarchiques import arbrebin_mutable as ab\nfrom structures.hierarchiques import dessin\n\ndef get_dicofreq(texte: str) -&gt; dict[str, int]:\n    \"\"\"Renvoie un dictionnaire de fr\u00e9quence des lettres du texte en entr\u00e9e\"\"\"\n    pass\n\ndef get_arbre_huffman(dicofreq: dict[str, int]) -&gt; ab.ArbreBin:\n    \"\"\"Renvoie un arbre de Huffman d'apr\u00e8s le dictionnaire de fr\u00e9quences des lettres\"\"\"\n    # Etape 1: Construire EN COMPREHENSION une liste de feuilles d'apr\u00e8s le dictionnaire de fr\u00e9quences\n\n    # Etape 2: Construire l'arbre de Huffman en agr\u00e9geant progresivement les arbres de la liste\n\n    pass\n\ndef get_codes(arbre: ab.ArbreBin) -&gt; dict[str, str]:\n    \"\"\"\n    Fonction r\u00e9cursive.\n    Renvoie un dictionnaire contenant la codification binaire de chaque caract\u00e8re\n    \"\"\"\n    pass\n\ndef compresser(texte, codes: dict[str, str]) -&gt; str:\n    \"\"\"Compresse un texte en utilisant le dictionnaire d'encodage\"\"\"\n    pass\n\ndef decompresser(texte, codes: dict[str, str]) -&gt; str:\n    \"\"\"D\u00e9compresse un texte en utilisant le dictionnaire d'encodage\"\"\"\n    pass\n</code></pre> <p>Encadrement de la hauteur d'un arbre</p> <p>\\(hauteur(\\empty)=-1\\)</p> <p>Hauteur d'un arbre filiforme</p> <p>Un arbre filiforme de taille \\(n\\) est de hauteur \\(n-1\\)</p> <p>Hauteur d'un arbre parfait \u00e0 \\(n\\) noeuds*</p> <p><pre><code>graph TD\nsubgraph Niveau0 [\"2^0 n\u0153ud\"]\n    A[\"1\"]\nend\nsubgraph Niveau1 [\"2^1 n\u0153uds\"]\n    A --- B[\"2\"]\n    A --- C[\"3\"]\nend\nsubgraph Niveau2 [\"2^2 n\u0153uds\"]\n    B --- D[\"4\"]\n    B --- E[\"5\"]\n    C --- F[\"6\"]\n    C --- G[\"7\"]\nend\nsubgraph Niveau3 [\"2^3 n\u0153uds\"]\n    D --- H[\"8\"]\n    D --- I[\"9\"]\n    E --- J[\"10\"]\n    E --- K[\"11\"]\n    F --- L[\"12\"]\n    F --- M[\"13\"]\n    G --- N[\"14\"]\n    G --- O[\"15\"]\nend</code></pre> Cet arbre de hauteur 3 a \\(2^0 + 2^1 + 2^2 + 2^3 = 15\\) n\u0153uds (\\(2^{4}-1\\)).</p> <p>Un arbre parfait de hauteur \\(h\\) a \\(\\displaystyle \\sum_{k=0}^h 2^k\\) noeuds.</p> <p>On reconna\u00eet la somme des termes d'une suite g\u00e9om\u00e9trique de raison 2.</p> <p>Un arbre parfait de hauteur \\(h\\) a donc \\(N=2^{h+1}-1\\) n\u0153uds.</p> <p>\\(N = 2^{h+1} - 1\\)</p> <p>\\(2^{h+1} = N + 1\\)</p> <p>En passant au logarithme de base 2 de chaque c\u00f4t\u00e9, la hauteur d'un arbre parfait ayant \\(n\\) noeuds est donn\u00e9e par la formule \\(h = \\log_2(n+1)\\).</p> <p>Avanc\u00e9 - Rotations</p> <p></p> <ul> <li>Montrer que la rotation pr\u00e9serve les propri\u00e9t\u00e9s d'ABR</li> <li>Ecrire une fonction <code>rotation_droite</code></li> <li>Ecrire une fonction <code>rotation_gauche</code></li> <li>En consid\u00e9rant les hauteurs des sad et sag avant et apr\u00e8s rotation, discuter \u00e0 quoi pourraient servir les rotations.</li> </ul> <p>MP2I</p> <p>Impl\u00e9mentez doctement toutes les fonctions en OCaml. (seulement la version immuable. Il est aussi possible d'impl\u00e9menter la version mutable en OCaml, mais chaque chose en son temps)</p> <p>On utilisera cette d\u00e9finition d'un arbre binaire:</p> <pre><code>type 'a arbrebin = Vide | Noeud of 'a * 'a arbrebin * 'a arbrebin\n</code></pre> <p><code>'a</code> est l'\u00e9quivalent du type g\u00e9n\u00e9rique T qu'on a utilis\u00e9 en python. <code>'a arbrebin</code> veut dire arbre binaire portant des donn\u00e9es de type <code>'a</code></p>"},{"location":"terminale/structures-de-donnees/listes/","title":"Listes - Paradigme fonctionnel","text":"<p>Attention</p> <p>Ici, nous ne parlons pas du tout des listes python. Nous n'en utiliserons d'ailleurs pas.</p>"},{"location":"terminale/structures-de-donnees/listes/#definition","title":"D\u00e9finition","text":"<p>Les listes sont une structure de donn\u00e9es lin\u00e9aire qui permet de stocker une s\u00e9quence d'\u00e9l\u00e9ments. Il existe une multitude de mani\u00e8re de les impl\u00e9menter. Nous en verrons 2. </p> <p>Les listes sont un outil formidable pour faire ses premiers pas en r\u00e9cursivit\u00e9. C'est aussi l'occasion de d\u00e9couvrir le paradigme fonctionnel, et aussi d'aller juste un peu plus loin dans le paradigme orient\u00e9 objet.</p> <p>Ici, nous allons cr\u00e9er des listes immuables, ce qui signifie qu'elles ne peuvent pas \u00eatre modifi\u00e9es une fois cr\u00e9\u00e9es. Toute op\u00e9ration qui \"modifie\" une liste renvoie une nouvelle liste, tout en pr\u00e9servant l'ancienne.</p> <p>D\u00e9finition r\u00e9cursive</p> <p>Nous travaillerons avec des listes o\u00f9 chaque \u00e9l\u00e9ment est un entier. </p> <p>Chaque liste peut \u00eatre :</p> <ol> <li>vide</li> <li>Contenir un \u00e9l\u00e9ment appel\u00e9 la t\u00eate, suivi de la queue, qui est une autre liste.</li> </ol> <p>Nous d\u00e9finissons une liste \u00e0 l'aide de sa propre d\u00e9finition. Selon cette d\u00e9finition, nous travaillons sur une structure d\u00e9finie r\u00e9cursivement.</p>"},{"location":"terminale/structures-de-donnees/listes/#implementation-en-python","title":"Impl\u00e9mentation en python","text":"<p>Nous utiliserons des tuples pour contenir une liste car les tuples sont immuables, ils collent bien au cadre de la programmation fonctionnelle.</p> <p>Nous mat\u00e9rialiserons la liste vide par un tuple vide.</p> <p>Une liste non vide sera un tuple contienant 2 \u00e9l\u00e9ments, la t\u00eate, ainsi que la queue.</p> <p>Le tuple suivant repr\u00e9sente une liste o\u00f9 la t\u00eate est <code>2</code>, et la queue est une liste dont la t\u00eate est <code>3</code>, suivie d'une liste ou la tete est 4, suivie elle-m\u00eame de la liste vide.</p> <pre><code>(2, (3, (4, ())))\n</code></pre>"},{"location":"terminale/structures-de-donnees/listes/#traduction-de-notre-definition-en-python","title":"Traduction de notre d\u00e9finition en python:","text":"<p><pre><code>type vide = tuple[()]\nLISTE_VIDE: vide = ()\n\ntype liste = vide | tuple[int, liste]\n</code></pre> Nous cr\u00e9ons ici deux types :</p> <ul> <li><code>vide</code> repr\u00e9sente le vide mod\u00e9lis\u00e9 par un tuple vide.</li> <li><code>liste</code> est une structure r\u00e9cursive qui peut \u00eatre soit vide, soit un 2-uplet: t\u00eate (int) et queue(liste).</li> </ul>"},{"location":"terminale/structures-de-donnees/listes/#creation-et-acces-aux-elements","title":"Cr\u00e9ation et Acc\u00e8s aux \u00c9l\u00e9ments","text":""},{"location":"terminale/structures-de-donnees/listes/#creation-dune-liste","title":"Cr\u00e9ation d'une Liste","text":"<p>Une fonction typique pour cr\u00e9er une nouvelle liste \u00e0 partir d'un entier et d'une autre liste : <pre><code>def creer(t: int, q: liste) -&gt; liste:\n    return (t, q)\n</code></pre> Elle prend deux arguments :</p> <ul> <li><code>t</code> : la t\u00eate (l'\u00e9l\u00e9ment \u00e0 ajouter).</li> <li><code>q</code> : la queue (la liste suivante).</li> </ul>"},{"location":"terminale/structures-de-donnees/listes/#acces-aux-elements","title":"Acc\u00e8s aux \u00c9l\u00e9ments","text":"<p>Les deux op\u00e9rations d'acc\u00e8s principales sont : - T\u00eate : obtenir le premier \u00e9l\u00e9ment de la liste. - Queue : obtenir la sous-liste \u00e0 partir du deuxi\u00e8me \u00e9l\u00e9ment.</p> <pre><code>def tete(lst: liste) -&gt; int:\n    assert len(lst) == 2, \"Liste vide\"\n    return lst[0]\n\ndef queue(lst: liste) -&gt; liste:\n    assert len(lst) == 2, \"Liste vide\"\n    return lst[1]\n</code></pre> <p>Nous reviendrons sur ces fonctions car il se peut qu'on les modifie juste un peu en fin de parcours.</p> <p>Attention</p> <p>A partir de maintenant, nous n'utiliserons plus les tuples. Nous n'utiliserons que les fonctions que nous avons d\u00e9finies ainsi que la constante LISTE_VIDE.</p>"},{"location":"terminale/structures-de-donnees/listes/#fonctions-en-lecture","title":"Fonctions en lecture","text":""},{"location":"terminale/structures-de-donnees/listes/#tester-si-une-liste-est-vide","title":"Tester si une Liste est Vide","text":"<pre><code>def est_vide(lst: liste) -&gt; bool:\n    return lst == LISTE_VIDE\n</code></pre>"},{"location":"terminale/structures-de-donnees/listes/#calculer-la-taille-dune-liste","title":"Calculer la Taille d'une Liste","text":"<pre><code>def taille(lst: liste) -&gt; int:\n    if est_vide(lst):\n        return 0\n    return 1 + taille(queue(lst))\n</code></pre>"},{"location":"terminale/structures-de-donnees/listes/#calculer-la-somme-des-elements","title":"Calculer la Somme des \u00c9l\u00e9ments","text":"<pre><code>def somme(lst: liste) -&gt; int:\n    if est_vide(lst):\n        return 0\n    return tete(lst) + somme(queue(lst))\n</code></pre> <p>A vous</p> <p>Ecrivez toutes les autres fonctions demand\u00e9es. On r\u00e9alisera une disjonction de cas au papier avant de coder. </p>"},{"location":"terminale/structures-de-donnees/listes/#fonctions-en-creation","title":"Fonctions en cr\u00e9ation","text":"<p>Attention</p> <p>Bien comprendre que les listes sont immuables. On ne peut pas les modifier. Par \"Ins\u00e9rer\", on entendra \"Renvoyer une liste dans laquelle on a ins\u00e9r\u00e9\".</p>"},{"location":"terminale/structures-de-donnees/listes/#ajouter-un-element-a-la-fin","title":"Ajouter un \u00c9l\u00e9ment \u00e0 la fin","text":"<pre><code>def ajouter_fin(e: int, lst: liste) -&gt; liste:\n    if est_vide(lst):\n        return LISTE_VIDE\n    else:\n        return creer(tete(lst), ajouter_fin(queue(lst)))\n</code></pre> <p>Si on reprend la m\u00e9taphore des lutins.</p> <p></p> <p>Je suis un lutin-ajouteur. </p> <ul> <li>Si on me donne une liste vide et qu'on me dit d'y ajouter l'\u00e9l\u00e9ment e, je renvoie une liste ne comportant que l'\u00e9l\u00e9ment e</li> <li>Sinon, c'est qu'on me donne une liste avec une tete et une queue. Alors je cr\u00e9\u00e9 une liste avec la m\u00eame t\u00eate, et pour la queue, je la donne \u00e0 un autre lutin ajouteur pour qu'il me la renvoie augment\u00e9e de e</li> </ul> <p>A vous</p> <p>Ecrivez toutes les autres fonctions demand\u00e9es. On r\u00e9alisera une disjonction de cas au papier avant de coder. </p>"},{"location":"terminale/structures-de-donnees/listeschainees/","title":"Listes cha\u00een\u00e9es - Approche Orient\u00e9e Objet","text":"<p>Requis</p> <p>Vous devez savoir refaire les exercices sur la cr\u00e9ation et l'utilisation de classes en POO sans regarder le corrig\u00e9.</p>"},{"location":"terminale/structures-de-donnees/listeschainees/#introduction","title":"Introduction","text":"<p>Une liste cha\u00een\u00e9e est aussi une structure permettant d'impl\u00e9menter une liste.</p> <p>La cha\u00eene que repr\u00e9sente la liste est compos\u00e9e de plusieurs maillons.</p> <p>Chaque Maillon est compos\u00e9 d'un \u00e9l\u00e9ment et d'une r\u00e9f\u00e9rence vers le maillon suivant.</p> <p>Il existe plusieurs fa\u00e7ons d'organiser ces maillons:</p> <p></p> <p>Il reste un bon exercice d'essayer de temps en temps d'impl\u00e9menter une autre version de liste cha\u00een\u00e9e.</p>"},{"location":"terminale/structures-de-donnees/listeschainees/#definition-de-la-classe-maillon","title":"D\u00e9finition de la classe <code>Maillon</code>","text":"<p>Un <code>Maillon</code> de la cha\u00eene poss\u00e8de une donn\u00e9e ainsi qu'une r\u00e9f\u00e9rence \u00e0 son maillon suivant. </p> <p>Un maillon a donc deux attributs :</p> <ol> <li><code>data</code> : La donn\u00e9e contenue dans le maillon (ici un entier).</li> <li><code>next</code> : Une r\u00e9f\u00e9rence vers le maillon suivant.</li> </ol> <pre><code>class Maillon:\n    def __init__(self, data: int, next: 'Maillon'):\n        self.data = data\n        self.next = next\n</code></pre>"},{"location":"terminale/structures-de-donnees/listeschainees/#probleme-initial","title":"Probl\u00e8me initial","text":"<p>Cette d\u00e9finition pr\u00e9sente un probl\u00e8me. Lorsqu\u2019on cr\u00e9e un maillon, on doit sp\u00e9cifier le maillon suivant (<code>next</code>), mais ce maillon suivant n\u2019existe pas encore \u00e0 ce stade de la cr\u00e9ation. Nous devons r\u00e9soudre ce probl\u00e8me pour pouvoir cr\u00e9er une cha\u00eene. </p> <pre><code>premier_maillon = Maillon(3, ...euh, j'ai pas de maillon...)\n</code></pre>"},{"location":"terminale/structures-de-donnees/listeschainees/#sentinelle","title":"Sentinelle","text":"<p>D\u00e9finition</p> <p>En informatique, une sentinelle est une valeur sp\u00e9ciale qui indique une ou plusieurs bornes d'une structure de donn\u00e9es. </p> <p>Appliqu\u00e9 \u00e0 notre cas, en consid\u00e9rant que la sentinelle et dans notre cha\u00eene, et qu'il n'y a que des maillons dans la cha\u00eene:</p> <ul> <li>La sentinelle est dans la cha\u00eene, donc la Sentinelle EST UN Maillon.</li> <li>Mais tout maillon a un prochain maillon.    </li> <li>Vu que la sentinelle est un Maillon, elle doit donc avoir un prochain maillon. </li> </ul> <p>Il semble que nous soyons de retour \u00e0 notre probl\u00e8me initial, mais en r\u00e9alit\u00e9, pas du tout. Pour r\u00e9soudre ce casse t\u00eate, On va lui dire que son prochain maillon, c'est initialement elle-m\u00eame.</p>"},{"location":"terminale/structures-de-donnees/listeschainees/#classe-sentinelle","title":"Classe <code>Sentinelle</code>","text":"<pre><code>class Sentinelle(Maillon):    # Une Sentinelle EST UN Maillon\n    def __init__(self):\n        super().__init__(0, self)   # Son prochain Maillon est initialement elle-m\u00eame\n</code></pre> <p>Cette classe h\u00e9rite de la classe <code>Maillon</code>.  Gr\u00e2ce \u00e0 l\u2019appel de <code>super()</code>, nous invoquons le constructeur de <code>Maillon</code> tout en assignant la sentinelle comme le maillon suivant d'elle-m\u00eame. Sa donn\u00e9e est arbitrairement mise \u00e0 0.</p> <p>Voici comment \u00e9voluera progressivement notre sentinelle (0) lorsqu'on ajoutera en t\u00eate les \u00e9l\u00e9ments 5, 3, puis 12:</p> <pre><code>---\ntitle: Maillon sentinelle\n---\ngraph LR\n0((0)) --&gt; 0</code></pre> <pre><code>---\ntitle: Ajout de la donn\u00e9e 5\n---\ngraph LR\n0((0)) --&gt; 5((5))\n5 --&gt; 0</code></pre> <pre><code>---\ntitle: Ajout de la donn\u00e9e 3\n---\ngraph LR\n0((0)) --&gt; 3((3))\n3 --&gt; 5((5))\n5 --&gt; 0</code></pre> <pre><code>---\ntitle: Ajout de la donn\u00e9e 12\n---\ngraph LR\n0((0)) --&gt; 12((12))\n12((12)) --&gt; 3((3))\n3 --&gt; 5((5))\n5 --&gt; 0</code></pre> <p>Sauf lorsque la liste est vide, le premier \u00e9l\u00e9ment de la liste est juste apr\u00e8s la sentinelle. Le dernier est juste avant.</p> <p>Note</p> <p>Il est important de r\u00e9aliser que l'attribut next est une r\u00e9f\u00e9rence \u00e0 un noeud. \"next, c'est la fl\u00e8che qui va vers\"</p>"},{"location":"terminale/structures-de-donnees/listeschainees/#definition-de-la-classe-liste","title":"D\u00e9finition de la classe <code>Liste</code>","text":"<p>Nous allons g\u00e9rer une liste \u00e0 partir de sa sentinelle. Nous assimilerons alors une liste \u00e0 sa sentinelle, en renommant tout simplement la classe sentinelle en Liste. On OUBLIE donc la classe sentinelle qui n'\u00e9tait l\u00e0 que pour la d\u00e9marche de r\u00e9flexion. La sentinelle d'une liste, c'est elle-m\u00eame en tant que Maillon.</p> <p>La classe <code>Liste</code> h\u00e9rite de <code>Maillon</code> et repr\u00e9sente notre liste cha\u00een\u00e9e compl\u00e8te.</p> <p>Lorsqu'elle est cr\u00e9\u00e9e (donc vide), c'est un maillon pointant sur lui-m\u00eame et qui repr\u00e9sentera toujours sa propre sentinelle.</p>"},{"location":"terminale/structures-de-donnees/listeschainees/#attributs-de-liste","title":"Attributs de <code>Liste</code>","text":"<ul> <li><code>__taille</code> : Stocke la taille de la liste.</li> <li><code>ajouter_tete</code> : Ajoute un nouvel \u00e9l\u00e9ment en t\u00eate de la liste.</li> </ul> <pre><code>class Liste(Maillon):\n    def __init__(self):\n        super().__init__(0, self)\n        self.__taille = 0\n</code></pre> <p>Dans une m\u00e9thode, self.next repr\u00e9sente toujours le premier Maillon, \u00e0 moins que la liste ne soit vide, auquel cas elle pointe sur elle m\u00eame.</p> <p>Ici, on choisit de plus de maintenir la taille du maillon en permanence. On marque cet attribut comme priv\u00e9 gr\u00e2ce au double underscore, afin de signifier qu'il ne doit pas \u00eatre modifi\u00e9 par les programmeurs qui utilisent cette classe.</p> <p>Vu que la r\u00e9cup\u00e9ration de la taille est une op\u00e9rationn courante, sa r\u00e9cup\u00e9ration sera donc en \\(\\mathcal{O}(1)\\), au lieu de \\(\\mathcal{O}(n)\\) s'il faut parcourir tous les maillons d'une liste de taille \\(n\\). Ceci se fait au prix de l'augmentation de la taille de stockage de la liste, mais on ne peut pas tout avoir.</p> <p>Tout ce qui suit est du l\u00e9go avec les maillons, il faut juste penser \u00e0 bien faire les op\u00e9rations dans l'ordre \u00e0 chaque fois. On proc\u00e8dera de mani\u00e8re imp\u00e9rative, avec des while.</p>"},{"location":"terminale/structures-de-donnees/listeschainees/#ajouter-un-element","title":"Ajouter un \u00e9l\u00e9ment","text":"<p>On veut ajouter un nouveau maillon portant la donn\u00e9e 12 en t\u00eate de liste:</p> <pre><code>---\ntitle: Liste initiale\n---\ngraph LR\n0((0)) --&gt; 3((3))\n3 --&gt; 5((5))\n5 --&gt; 0</code></pre> <ol> <li>On cr\u00e9\u00e9 un Maillon portant la donn\u00e9e 12 et pointant vers le Maillon suivant la sentinelle (donc suivant la liste elle meme, puisqu'elle est sa sentinelle) <pre><code>---\ntitle: \n---\ngraph LR\n0((0)) ====&gt; 3((3))\n12((12)) --&gt; 3\n3 --&gt; 5((5))\n5 --&gt; 0</code></pre></li> <li>La fl\u00e8che 0-&gt;3 repr\u00e9sente la r\u00e9f\u00e9rence self.next il faut la remplacer par une r\u00e9f\u00e9rence au maillon 12 <pre><code>---\ntitle: \n---\ngraph LR\n0((0)) ==&gt; 12((12))\n12 --&gt; 3((3))\n3 --&gt; 5((5))\n5 --&gt; 0</code></pre></li> <li>Vu qu'on a choisi de maintenir la taille, il ne faut pas oublier de lui ajouter 1</li> </ol> <p>La m\u00e9thode <code>ajouter_tete</code> \u00e9crite en cons\u00e9quence ins\u00e8re un nouveau maillon juste apr\u00e8s la sentinelle.</p> <pre><code>def ajouter_tete(self, e: int):\n    m = Maillon(e, self.next)     # 1\n    self.next = m                 # 2\n    self.__taille += 1            # 3\n</code></pre> <p>L'approche propos\u00e9e permet de simplifier le code des m\u00e9thodes. En effet, \u00e7a marche ind\u00e9pendamment du fait que la liste soit vide ou pas.</p> <p><pre><code>---\ntitle: Liste initiale\n---\ngraph RL\n0((0)) --&gt; 0</code></pre> 1. On cr\u00e9\u00e9 un Maillon portant la donn\u00e9e 12 et pointant vers le Maillon suivant la sentinelle  <pre><code>---\ntitle: \n---\ngraph RL\n0((0)) ==&gt; 0\n12((12)) --&gt; 0</code></pre></p> <ol> <li>La fl\u00e8che en gras repr\u00e9sente la r\u00e9f\u00e9rence self.next il faut la remplacer par une r\u00e9f\u00e9rence au maillon 12</li> </ol> <pre><code>---\ntitle: \n---\ngraph LR\n0((0)) ==&gt; 12((12))\n12 --&gt; 0</code></pre>"},{"location":"terminale/structures-de-donnees/listeschainees/#methodes-de-depart","title":"M\u00e9thodes de d\u00e9part","text":"<p>Afin de vous lancer sur le parcours de cette structure, je vous donne votre deuxi\u00e8me m\u00e9thode, la m\u00e9thode <code>est_vide</code>.</p> <pre><code>def est_vide(self) -&gt; bool:\n    \"\"\"\n    Renvoie True si la liste est vide, False sinon.\n    \"\"\"\n    return self.next is self\n</code></pre> <p>ainsi que la m\u00e9thode longueur, qui renvoie la taille calcul\u00e9e de la liste.</p> <p>A l'origine, le maillon courant est le premier maillon de la liste, ou elle m\u00eame si la liste est vide. Tant que courant n'est pas self (sinon \u00e7a veut dire qu'on est revenu \u00e0 la sentinelle), on incremente l'accumulateur et on passe au maillon suivant.</p> <pre><code>def longueur(self) -&gt; int:\n    \"\"\"\n    Renvoie la taille calcul\u00e9e de la liste.\n    \"\"\"\n    acc = 0\n    courant = self.next\n    while courant is not self:\n        acc += 1\n        courant = courant.next\n    return acc\n</code></pre> <p>Tip</p> <p>l'op\u00e9rateur is sert \u00e0 comparer les objets, non pas en termes de valeur, mais en termes d'adresse m\u00e9moire.</p> <p>Question</p> <p>A vous maintenant de recr\u00e9er les fonctions que vous avez vues en programmation fonctionnelles en tant que m\u00e9thodes de la classe liste en commen\u00e7ant par la m\u00e9thode ajouter_fin. Vous n'utiliserez pas la r\u00e9cursivit\u00e9.</p> <p>Tout comme nous l'avons fait avec OCaml en programmation fonctionnelle, compl\u00e9tez aussi le programme en C++.</p>"}]}