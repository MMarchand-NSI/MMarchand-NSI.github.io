{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"","text":"<p>Hal Abelson, 1986</p> <p>Computer science is not really about computers -- and it's not about computers in the same sense that physics is not really about particle accelerators, and biology is not about microscopes and Petri dishes...and geometry isn't really about using surveying instruments. Now the reason that we think computer science is about computers is pretty much the same reason that the Egyptians thought geometry was about surveying instruments: when some field is just getting started and you don't really understand it very well, it's very easy to confuse the essence of what you're doing with the tools that you use.</p>"},{"location":"les-outils/","title":"Outils pour d\u00e9velopper","text":"<p>Cette s\u00e9lection d'outils a \u00e9t\u00e9 choisie pour \u00eatre \u00e0 la fois r\u00e9aliste et abordable. </p> <p>L'installation propos\u00e9e se fait dans l'invite de commandes windows gr\u00e2ce \u00e0 l'outil winget qui est d\u00e9j\u00e0 pr\u00e9sent.</p> <p>Il aussi est tout \u00e0 fait possible d'installer ces outils en les t\u00e9l\u00e9chargeant et en ex\u00e9cutant leur programme d'installation. </p>"},{"location":"les-outils/#vs-code","title":"VS Code","text":"<p>Le couteau suisse de la programmation.</p> <pre><code>    winget install Microsoft.VisualStudioCode\n</code></pre>"},{"location":"les-outils/#miniforge","title":"Miniforge","text":"<p>Si python est install\u00e9 sur votre machine, d\u00e9sinstallez-le. Nous allons utiliser ce gestionnaire d'environnements \u00e0 la place.</p> <pre><code>    winget install CondaForge.Miniforge3\n</code></pre>"},{"location":"les-outils/#msys2","title":"MSYS2","text":"<p>Cet outil simule l'environnement linux et vous permettra m\u00eame de programmer dans d'autres langages de programmation <pre><code>    winget install MSYS2.MSYS2\n</code></pre></p>"},{"location":"les-outils/#dbeaver","title":"DBeaver","text":"<p>DBeaver permet d'interagir avec des syst\u00e8mes de gestion de bases de donn\u00e9es.</p> <pre><code>    winget install dbeaver.dbeaver\n</code></pre>"},{"location":"les-outils/setup-vscode/","title":"Setup vscode","text":""},{"location":"les-outils/setup-vscode/#setup-de-vscode","title":"Setup de VSCode","text":"<p>Un IDE (environnement de d\u00e9veloppement int\u00e9gr\u00e9) est un logiciel qui aide les programmeurs \u00e0 d\u00e9velopper.</p> <p>VSCode est de loin l'IDE le plus utilis\u00e9 (73,6% des d\u00e9veloppeurs et 77% des \u00e9tudiants du monde entier en 2024 d'apr\u00e8s la c\u00e9l\u00e8bre enqu\u00eate annuelle de stackoverflow)</p>"},{"location":"les-outils/setup-vscode/#pre-requis","title":"Pr\u00e9-requis","text":"<p>Vous avez install\u00e9 les outils recommand\u00e9s avec winget</p>"},{"location":"les-outils/setup-vscode/#configurer-vscode-pour-developper-en-python","title":"Configurer VSCode pour d\u00e9velopper en python.","text":"<p>Cliquez sur l'ic\u00f4ne des extensions </p> <p>Recherchez <code>nsi-dev</code> dans la petite barre de recherche. Cliquez sur le petit bouton bleu \"install\"</p> <p></p> <p>Ca-y-est, c'est configur\u00e9.</p>"},{"location":"les-outils/setup-vscode/#comment-travailler-avec-vscode","title":"Comment travailler avec VSCode?","text":"<p>Attention, sinon \u00e7a ne fonctionnera pas</p> <p>Dans VSCode, on ouvre TOUJOURS un r\u00e9pertoire, JAMAIS un fichier.</p> <p>File &gt; Open Folder</p> <p>Quand vous rouvrez VSCode, vous retrouvez tout comme vous l'avez laiss\u00e9 la derni\u00e8re fois que vous l'avez ouvert.</p> <p>Lorsque vous ouvrez un r\u00e9pertoire pour la premi\u00e8re fois, VSCode vous demande s'il peut avoir confiance en ce r\u00e9pertoire. Cochez la case et cliquez sur le bouton bleu, \"Yes i trust\". Il ne vous le redemandera plus pour ce r\u00e9pertoire ni pour le r\u00e9pertoire parent.</p> <p></p>"},{"location":"les-outils/setup-vscode/#gerer-les-fichiers-du-repertoire","title":"G\u00e9rer les fichiers du r\u00e9pertoire.","text":"<p>Vous pouvez directement cr\u00e9er des fichiers et des dossiers dans L'explorer de VSCode \u00e0 l'aide de ces boutons </p>"},{"location":"les-outils/setup-vscode/#gerer-vos-environnements-python","title":"G\u00e9rer vos environnements Python","text":"<p>L'extension NSI-DEV vous fournit une mani\u00e8re simplifi\u00e9e de g\u00e9rer vos environnements python. Il ne faut pas que vous ayez install\u00e9 python sur votre machine, c'est miniforge qui va se charger de faire coexister une ou pusieurs installations de python.</p> <p></p> <p>Sur l'image ci-dessus, on voit 2 environnements python utilisables que j'ai appel\u00e9 py312 (pour la version 12 de python) et py313 (pour la version 13 de python).</p> <p>Lorsque vous l'utiliserez pour la premi\u00e8re fois, il n'y en aura pas, il faudra en cr\u00e9er un en appuyant sur le bouton +</p> <p>On vous demandera alors de valider une version de python pour votre environnement, puis un nom.</p> <p>A l'heure o\u00f9 j'\u00e9cris ces lignes, je vous conseille de demander la version 3.13 et d'appeler cet environnement py313.</p> <p>Apr\u00e8s quelques instants (\u00e7a peut \u00eatre un peu long), vous verrez appara\u00eetre votre environnement.</p>"},{"location":"les-outils/setup-vscode/#programmer-en-python","title":"Programmer en Python","text":"<p>VSCode doit savoir quel environnement python utiliser pour ex\u00e9cuter vos programme, \u00e9tant donn\u00e9 qu'il peut en exister plusieurs.</p> <p>Lorsque vous avez un fichier python ouvert, il faut cliquer sur la barre d'\u00e9tat en bas \u00e0 droite, \u00e0 l'emplacement o\u00f9 vous voyez sur l'image 3.12.7('py312': conda). Une liste d\u00e9roulante va alors s'afficher o\u00f9 vous pourrez s\u00e9lectionner votre environnement. Si c'est la premi\u00e8re fois que vous ouvrez VS code, vous verrez peut-\u00eatre un bouton \"Select interpreter\" \u00e0 la place.</p> <p></p> <p>Jamais dans base</p> <p>Il existe un environnement par d\u00e9faut qui s'appelle base. L'extension le masque volontairement. N'utilisez jamais cet environnement.</p>"},{"location":"les-outils/setup-vscode/#ajouter-des-modules-python","title":"Ajouter des modules python","text":"<p>Lorsque vous voulez installer un module python, il faut ouvrir un terminal configur\u00e9 pour votre environnement. Ca se fait directement en appuyant sur le petit cube de l'image ci-dessous. (La poubelle vous permet de supprimer l'environnement)</p> <p></p> <p>Un terminal MSYS2 appara\u00eet.</p> <p>Imaginons que vous vouliez installer le module pyxel, vous pouvez alors y ex\u00e9cuter cette commande:</p> <p><code>pip install pyxel</code></p> <p>Ca y est, vous pouvez maintenant \u00e9crire <code>import pyxel</code> dans vos programmes.</p> <p>Au quotidien</p> <p>Une fois que tout \u00e7a est fait, au quotidien, il faut juste s'assurer qu'on est sur le bon environnement en bas \u00e0 droite de VSCode, \u00e9crire ses programmes et les ex\u00e9cuter avec le bouton play en haut \u00e0 droite de l'\u00e9cran.</p>"},{"location":"premi%C3%A8re/logique/","title":"Logique","text":""},{"location":"premi%C3%A8re/logique/#histoire","title":"Histoire","text":"<p>En 1703, Gottfried Wilhelm Leibniz fut le premier occidental \u00e0 formaliser un syst\u00e8me d\u2019op\u00e9rations \u00e0 partir de 0 et de 1, le binaire, dans son article \u201dExplication de l\u2019Arithm\u00e9tique Binaire\u201d. On retrouve des traces de pr\u00e9c\u00e9dentes tentatives en Chine dans le Yi Jing, le livre des mutations, au 9\u00e8me si\u00e8cle avant notre \u00e8re. </p> <p>Les nombres binaires \u00e9taient au centre de la th\u00e9ologie de Leibniz. Il croyait que les nombres binaires \u00e9taient symboliques de l\u2019id\u00e9e chr\u00e9tienne de creatio ex ni-hilo ou de cr\u00e9ation \u00e0 partir de rien. Leibniz essayait de trouver un syst\u00e8me qui convertisse les d\u00e9clarations verbales de la logique en un syst\u00e8me purement math\u00e9matique.</p> <p></p> <p>A partir de 1847, George Boole propose un mode de calcul permettant de traduire des raisonnements logiques par des op\u00e9rations math\u00e9matiques. Il cr\u00e9\u00e9 ainsi une branche des math\u00e9matiques qui d\u00e9finit des op\u00e9rations dans un ensemble qui ne contient que 2 \u00e9l\u00e9ments.</p> <p></p> <p>En 1938, Claude Shannon prouve que des circuits \u00e9lectroniques peuvent r\u00e9soudre tous les probl\u00e8mes que la logique de Boole peut r\u00e9soudre.</p> <p></p> <p>Avec les travaux d'Alan Turing de 1936, ceci constitue le fondement de ce qui deviendra l\u2019informatique.</p>"},{"location":"premi%C3%A8re/logique/#les-booleens","title":"Les bool\u00e9ens","text":"<p>Les bool\u00e9ens sont au nombre de 2 : au choix, \\(\\{ Vrai, Faux\\}\\) ou \\(\\{0, 1\\}\\).</p> <p>On peut utiliser l\u2019une ou l\u2019autre des repr\u00e9sentations, c\u2019est justement le principe de mod\u00e9lisation.</p> <p>D\u2019ailleurs, en python, ces 2 op\u00e9rations valent True:</p> <pre><code>0 == False\n1 == True\n</code></pre>"},{"location":"premi%C3%A8re/logique/#les-operateurs-logiques","title":"Les op\u00e9rateurs logiques","text":""},{"location":"premi%C3%A8re/logique/#et","title":"ET","text":"<p>R\u00e9pond \u00e0 la question \u201dEst-ce que les 2 sont vrais ?\u201d</p> <p>Exemple : Pour qu'une lampe s'allume dans un circuit de s\u00e9curit\u00e9, il faut que l'interrupteur ET la porte soient ferm\u00e9s.</p> <p>Si l'interrupteur est ON (ferm\u00e9) ET la porte est ferm\u00e9e, alors la lampe s'allume.</p> <p>Si l\u2019un des deux (ou les deux) est ouvert, la lampe reste \u00e9teinte.</p>"},{"location":"premi%C3%A8re/logique/#ou-inclusif","title":"OU (inclusif)","text":"<p>R\u00e9pond \u00e0 la question \u201dEst-ce qu\u2019au moins un des deux est vrai ?\u201d</p> <p>Pour qu'une alarme se d\u00e9clenche, il suffit que l\u2019une des conditions suivantes soit vraie : une fen\u00eatre OU une porte est ouverte. Si la fen\u00eatre est ouverte, l\u2019alarme sonne. Si la porte est ouverte, l\u2019alarme sonne. Si les deux sont ouvertes, l\u2019alarme sonne \u00e9galement. Si les deux sont ferm\u00e9es, l\u2019alarme ne sonne pas.</p>"},{"location":"premi%C3%A8re/logique/#non","title":"NON","text":"<p>R\u00e9pond \u00e0 la question \u201dEst-ce que c\u2019est Faux ?\u201d</p> <p>Imaginons une porte avec un voyant lumineux. Si la porte est ferm\u00e9e, le voyant lumineux est \u00e9teint. Si la porte est ouverte, le voyant lumineux s\u2019allume. En logique, cela revient \u00e0 dire : si la porte est NON ferm\u00e9e, alors le voyant est allum\u00e9.</p>"},{"location":"premi%C3%A8re/logique/#ou-exclusif","title":"OU EXCLUSIF","text":"<p>R\u00e9pond \u00e0 la question \u201dEst-ce que les deux sont diff\u00e9rents?\u201d</p> <p>Imaginons deux interrupteurs pour une lampe : un interrupteur \u00e0 l\u2019entr\u00e9e et un autre pr\u00e8s du lit. La lampe s\u2019allume seulement si les interrupteurs ne sont pas dans la m\u00eame position.</p> <ul> <li>Si les deux interrupteurs sont en position OFF ou les deux en position ON, la lampe reste \u00e9teinte.</li> <li>Si un interrupteur est ON et l\u2019autre est OFF, alors la lampe s\u2019allume.</li> </ul> <p>Il existe d'autres op\u00e9rateurs, mais qui peuvent \u00eatre construits \u00e0 partir des pr\u00e9c\u00e9dents. D'ailleurs, il ne suffit que de 2 op\u00e9rateurs pour construire tous les autres.</p>"},{"location":"premi%C3%A8re/logique/#tables-de-verite","title":"Tables de v\u00e9rit\u00e9","text":"<p>Dans une table de v\u00e9rit\u00e9, on \u00e9num\u00e8re toutes les combinaisons possibles de vrais et de faux avec les variables en entr\u00e9e (ici a et b), puis on r\u00e9pond \u00e0 la question pos\u00e9e.</p>"},{"location":"premi%C3%A8re/logique/#table-non","title":"Table NON","text":"<p>\"NON a\" renvoie le \"contraire\" de a.</p> a \\(\\bar{a}\\) 0 1 1 0"},{"location":"premi%C3%A8re/logique/#table-et","title":"Table ET","text":"<p>La table de v\u00e9rit\u00e9 donne toutes les possibilit\u00e9s de r\u00e9sultats.</p> <p>\\(a.b\\) ne r\u00e9pond Vrai que lorsque les deux sont vrais.</p> \\(a\\) \\(b\\) \\(a.b\\) 0 0 0 0 1 0 1 0 0 1 1 1"},{"location":"premi%C3%A8re/logique/#table-ou","title":"Table OU","text":"\\(a\\) \\(b\\) \\(a+b\\) 0 0 0 0 1 1 1 0 1 1 1 1"},{"location":"premi%C3%A8re/logique/#table-ou-exclusif","title":"Table OU EXCLUSIF","text":"<p>\\(a\\oplus b\\) n'est vrai que lorsque les deux sont diff\u00e9rents.</p> \\(a\\) \\(b\\) \\(a\\oplus b\\) 0 0 0 0 1 1 1 0 1 1 1 0"},{"location":"premi%C3%A8re/logique/#tables-de-verite-dexpressions","title":"Tables de v\u00e9rit\u00e9 d'expressions","text":"<p>Lorsqu'on demande d'\u00e9tablir la table de v\u00e9rit\u00e9 d'une expression bool\u00e9enne, on commence par \u00e9crire toutes les combinaisons possibles de 0 et de 1, puis on d\u00e9compose l'expression pour trouver progressivement le r\u00e9sultat.</p> <p>Afin de montrer que deux expressions logiques sont \u00e9quivalentes, on peut dresser la table de l'une et de l'autre, et conclure selon qu'elles ont la m\u00eame table de v\u00e9rit\u00e9 ou non.</p> <p>Lois de de Morgan</p> <p>1- Dresser la table de v\u00e9rit\u00e9 de \\(\\overline{a+b}\\) ainsi que de  \\(\\bar{a}.\\bar{b}\\)</p> \\(a\\) \\(b\\) \\(a+b\\) \\(\\color{red}\\overline{a+b}\\) \\(\\bar{a}\\) \\(\\bar{b}\\) \\(\\color{red}\\bar{a}.\\bar{b}\\) 0 0 0 1 1 0 1 1 <p>2- Conclure sur une \u00e9galit\u00e9</p> <p>3- Montrer que  \\(\\overline{a.b} = \\bar{a}+\\bar{b}\\)</p> <p>Ces \u00e9galit\u00e9s \u00e0 conna\u00eetre sont connues sous le nom de lois de de Morgan</p> <p>Propri\u00e9t\u00e9s de base</p> <p>Que valent les expressions suivantes?</p> <ol> <li>\\(1+a\\)</li> <li>\\(1.a\\)</li> <li>\\(0+a\\)</li> <li>\\(0.a\\)</li> <li>\\(a.\\bar{a}\\)</li> <li>\\(a+\\bar{a}\\)</li> </ol>"},{"location":"premi%C3%A8re/logique/#un-peu-delectronique","title":"Un peu d'\u00e9lectronique","text":""},{"location":"premi%C3%A8re/logique/#le-transistor","title":"Le transistor","text":"<p>Le fonctionnement d'un ordinateur r\u00e9side presque essentiellement sur un composant invent\u00e9 en 1947 et qui ne cesse de se perfectionner et de se miniaturiser encore aujourd'hui: le transistor.</p> <p>Il existe des transistors de diverses technologies. Ici je vous pr\u00e9sente le PNP.</p> <p>C'est un composant \u00e9lectronique dot\u00e9 de 3 pattes:</p> <ul> <li>(C) Le collecteur</li> <li>(B) La base</li> <li>L'\u00e9metteur</li> </ul> <p>Voici son symbole \u00e9lectrique et ce \u00e0 quoi \u00e7a ressemble: </p> <p>L'objet n'est pas ici d'\u00eatre expert en transistors mais de saisir un de ses usages fondamentaux: L'interrupteur command\u00e9.</p> <p>Si la tension \u00e0 la base n\u2019est pas suffisamment forte, le courant entre le collecteur et l\u2019\u00e9metteur est coup\u00e9.</p>"},{"location":"premi%C3%A8re/logique/#une-operation-logique-avec-des-transistors-et","title":"Une op\u00e9ration logique avec des transistors : ET","text":"<p>La LED ne s\u2019allumera que si la tension est suffisante \u00e0 la base de Q1 et de Q2. Si l\u2019une ou l\u2019autre des bases n\u2019est pas aliment\u00e9e, le courant est coup\u00e9 et la LED s\u2019\u00e9teint.</p>"},{"location":"premi%C3%A8re/logique/#portes-et-circuits-logiques","title":"Portes et Circuits logiques","text":"<p>Le circuit \u00e9lecttronique pr\u00e9c\u00e9dent se r\u00e9sume enti\u00e8rement \u00e0 la porte logique ET suivante, suivie des repr\u00e9sentations d'autres portes.</p> <p></p> <p>Interrupteurs et lampe</p> <p>On donne le circuit logique suivant avec les interrupteurs a (en haut) et b (en bas). L'interrupteur est \u00e0 1 s'il est ferm\u00e9.</p> <p></p> <p>On note la lampe S. La lampe est \u00e0 1 si elle est allum\u00e9e.</p> <ul> <li>Exprimez S en fonction de a et de b.</li> <li>Etudiez la table de v\u00e9rit\u00e9 de S</li> <li>Proposez une simplification drastique de ce circuit.</li> </ul> <p>Porte NAND</p> <p>La porte NAND r\u00e9alise l'op\u00e9ration NON(A ET B), i.e. \\(\\overline{a.b}\\)</p> <ul> <li>Dressez la table de v\u00e9rit\u00e9 de la porte NAND </li> </ul> <p>Voici son comment elle est repr\u00e9sent\u00e9e sur un circuit: </p> <p></p> <p>Turing Complete</p> <p>Ces exercices sont les premiers niveaux d'un jeu nomm\u00e9 \"turing complete\". Ce jeu, partant de la simple porte NAND, vous emm\u00e8ne jsuqu'\u00e0 construire un ordinateur entier.</p> <p>Au d\u00e9but des exercices, seule la porte NAND est utilisable. A chaque fois que vous arrivez \u00e0 cr\u00e9er une nouvelle porte, elle devient utilisable.</p> <p>R\u00e9alisez chacun de ces exercices les uns sous les autres dans l'interface suivante et sauvegardez votre travail avec le bouton \"t\u00e9l\u00e9charger le circuit\".</p> <ul> <li>Cr\u00e9er une porte NOT. Seule porte autoris\u00e9e: NAND</li> <li>Cr\u00e9er une porte AND</li> <li>Cr\u00e9er une porte OR</li> <li>Cr\u00e9er une porte NOR</li> <li>Cr\u00e9er une porte XOR</li> </ul> <p>Pourquoi appelle-t-on une porte NAND une porte universelle?</p> <p> </p>"},{"location":"premi%C3%A8re/logique/#circuit-demi-additionneur","title":"Circuit demi-additionneur","text":"<p>Ce circuit prend 2 bits en entr\u00e9e et les additionne, comme s'il s'agissait d'entiers binaires dont on pose l'addition.</p> <p>Le circuit prend en entr\u00e9e deux bits \\(a\\) et \\(b\\). Il renvoie la somme \\(S\\), ainsi que la retenue \\(C_{out}\\)</p> <p>Ainsi, on peut directement construire la table de v\u00e9rit\u00e9 du circuit r\u00e9sultant:</p> \\(a\\) \\(b\\) \\(S\\) \\(C_{out}\\) Commentaire 0 0 0 0 0+0=0 et je retiens 0 0 1 1 0 0+1=1 et je retiens 0 1 0 1 0 1+0=1 et je retiens 0 1 1 0 1 1+1=0 et je retiens 1 <ul> <li>En observant la colonne \\(s\\), on reconna\u00eet la table de v\u00e9rit\u00e9 de la porte XOR.</li> <li>En observant la colonne \\(C_{out}\\), on reconna\u00eet la table de v\u00e9rit\u00e9 de la porte AND.</li> </ul> <p>R\u00e9alisation du demi-additionneur</p> <p>R\u00e9alisez le circuit demi-additionneur dans l'interface et t\u00e9l\u00e9chargez le r\u00e9sultat.</p>"},{"location":"premi%C3%A8re/logique/#circuit-additionneur-complet-full-adder","title":"Circuit additionneur complet (Full Adder)","text":"<p>Le circuite additionneur prend en entr\u00e9e deux bits \\(a\\) et \\(b\\) ainsi qu'une retenue \\(C_{in}\\).</p> <p>Il \u00e9met 2 informations en sortie, la somme obtenue \\(S\\), ainsi que la retenue \\(C_{out}\\)</p> <p>Full-Adder</p> <ul> <li>Compl\u00e9tez la table de v\u00e9rit\u00e9 suivante pour l'additionneur complet.</li> </ul> \\(a\\) \\(b\\) \\(C_{in}\\) \\(S\\) \\(C_{out}\\) Commentaire 0 0 0 0 0 0+0+0=0 et je retiens 0 0 0 1 0 1 0 0 1 1 1 0 0 1 0 1 1 1 0 1 1 1 <ul> <li>Montrer que \\(S = a \\oplus b \\oplus C_{in}\\)</li> <li>Montrer que \\(C_{out} = (a \\oplus b) . C_{in} + a . b\\)</li> <li>R\u00e9alisez alors le circuit de l'additionneur complet et sauvegardez-le.</li> </ul> <p>Additionneur 4 bits</p> <p>Un additionneur 4 bits est compos\u00e9 d'un Half-Adder et de 3 Full-Adders en cha\u00eene. Le but est d'additionner le nombre form\u00e9 par les bits de la premi\u00e8re colonne avec le nombre form\u00e9 par les bits de la deuxi\u00e8me colonne.</p> <p>Les composants d'affichage en bas vous permettent de visualiser sous forme d\u00e9cimale chaque nombre, et il y en a aussi un pour le r\u00e9sultat.</p> <p>R\u00e9alisez ce circuit et sauvegardez-le</p> <p> </p>"},{"location":"projets/intro-pyxel/","title":"Introduction \u00e0 pyxel - POO","text":"<p>L'objectif est de cr\u00e9er une classe Pixel capable de se dessiner et de se d\u00e9placer en fonction de son vecteur directionnel (dx, dy). Nous utiliserons \u00e9galement une classe App pour g\u00e9rer l'application et les \u00e9v\u00e9nements utilisateur, permettant de d\u00e9placer le pixel.</p> <pre><code>import pyxel as px\n\nclass Pixel:\n    def __init__(self, x:float, y: float, dx: float=0, dy:float=0, color:float=0):\n        \"\"\"\n        Initialise un pixel avec une position (x, y), un vecteur directeur (dx, dy) et une couleur.\n        \"\"\"\n        self.x = x\n        self.y = y\n        self.dx = dx\n        self.dy = dy\n        self.color = color\n\n    def update(self):\n        \"\"\"\n        Le pyxel se d\u00e9place toujours de son vecteur directeur\n        \"\"\"\n        pass\n\n\n    def draw(self):\n        \"\"\"\n        Dessine le pixel sur l'\u00e9cran.\n        \"\"\"\n        px.pset(int(self.x), int(self.y), self.color)\n\n\nclass Jeu:\n    def __init__(self):\n        \"\"\"\n        Un jeu g\u00e8re un Pixel.\n        \"\"\"\n        self.pixel = Pixel(px.width/2, px.height/2)\n\n    def update(self):\n        \"\"\"\n        G\u00e8re les \u00e9v\u00e9nements utilisateur pour d\u00e9placer le pixel.\n        \"\"\"\n        # Modification du vecteur directeur selon les touches fl\u00e9ch\u00e9es\n        if px.btn(px.KEY_RIGHT):\n            self.pixel.dx += 1\n        elif px.btn(px.KEY_LEFT):\n            self.pixel.dx -= 1\n        if px.btn(px.KEY_DOWN):\n            self.pixel.dy += 1\n        elif px.btn(px.KEY_UP):\n            self.pixel.dy -= 1\n\n        # Le jeu demande au pixel de se mettre \u00e0 jour\n        self.pixel.update()\n\n    def draw(self):\n        \"\"\"\n        Efface l'\u00e9cran et dessine le pixel.\n        \"\"\"\n        # Remplir l'\u00e9cran en noir\n        px.cls(0)\n        # Le jeu demande au pixel de se dessiner\n        self.pixel.draw()\n\n\nif __name__ == \"__main__\":\n    # D\u00e9marre l'application\n    pyxel.init(30, 30, title=\"Pixel en Mouvement\", fps = 10)\n    appli = Jeu()\n    pyxel.run(appli.update, appli.draw)\n</code></pre> <p>Exercices de base</p> <ol> <li>Compl\u00e9tez la m\u00e9thode update de la classe Pixel (2 lignes). Testez</li> <li>Modifiez le framerate. Testez</li> <li>Remplacez le 3\u00e8me if de la m\u00e9thode update par un elif. Analysez la diff\u00e9rence. R\u00e9tablissez le if</li> <li>Modifiez la m\u00e9thode update pour que le pixel s'arr\u00eate lorsqu'on l\u00e2che les touches.</li> <li>Le jeu g\u00e8re maintenant un groupe de Pixels. A chaque fois que l'utilisateur appuie sur la barre espace, un nouveau Pixel spawn al\u00e9atoirement avec une couleur al\u00e9atoire. Lorsque l'utilisateur utilise les fl\u00e8ches, tous les pixels bougent dans la direction donn\u00e9e. Dans Jeu:<ul> <li>Modifier la m\u00e9thode <code>__init__</code></li> <li>Ecrire une m\u00e9thode <code>spawn_pixel(self)</code></li> <li>modifier les m\u00e9thodes <code>update</code> et <code>draw</code> en cons\u00e9quence.</li> </ul> </li> <li>Un pixel ne doit pas bouger s'il d\u00e9passe de l'\u00e9cran.<ul> <li>Modifiez la classe Pixel pour tenir compte de cette informations. </li> </ul> </li> <li>Espace torique: Un pixel peut d\u00e9passer un bord mais il r\u00e9appara\u00eet au bord oppos\u00e9 (ce qui fait de l'espace de jeu un espace sans bord)<ul> <li>Modifiez la classe Pixel pour tenir compte de cette informations.</li> </ul> </li> <li>Lorsqu'on appuie sur la touche \"p\", un pixel al\u00e9atoire est supprim\u00e9.</li> </ol> <p>Remplacer un pixel par un sprite</p> <ol> <li>T\u00e9l\u00e9chargez le fichier 1.pyxres sur le site de la nuit du code<ul> <li>Il s'agit d'un fichier contenant des ressources visuelles et sonores.</li> <li>Placez le dans le m\u00eame r\u00e9pertoire que votre fichier python.</li> <li>Pyxel vient avec un \u00e9diteur de ressources. Pour visualiser les ressources du jeu, ex\u00e9cutez la commande suivante dans un terminal:     <code>pyxel edit 2.pyxres</code></li> <li>N'h\u00e9sitez pas \u00e0 bidouiller, vous ne pouvez rien casser, au pire vous pourrez ret\u00e9l\u00e9charger le fichier.</li> </ul> </li> <li>A la place d'un simple pixel, on veut maintenant utiliser un sprite<ul> <li>Pour le faire, il faut d'abord charger ce fichier dans le code juste avant de d\u00e9marrer le jeu:     <code>px.load(\"2.pyxres\")</code></li> <li>Ensuite il faut dessiner le sprite que vous aurez choisi au lieu de simplement remplir un pixel. Il n'y a qu'une ligne de code \u00e0 modifier. Je vous laisse la trouver en explorant la documentation de pyxel.</li> </ul> </li> </ol>"},{"location":"projets/jeudelavie/","title":"The Game Of Life","text":"<p>Un automate cellulaire est constitu\u00e9 d\u2019une grille r\u00e9guli\u00e8re de cellules \u00e9tant chacune dans un \u00e9tat (parmi un nombre fini d\u2019\u00e9tats possibles), et d\u2019une r\u00e8gle d\u2019\u00e9volution locale et synchrone : \u00e0 chaque \u00e9tape de temps (discret), l\u2019\u00e9tat de chaque cellule est mis \u00e0 jour en fonction de l\u2019\u00e9tat de ses voisines (et du sien).</p> <p>Pourquoi?</p> <p>Pourquoi \u00e7a int\u00e9resse certains scientifiques? Parce qu'ils cherchent \u00e0 savoir comment des structures parfois tr\u00e8s complexes \u00e9mergent d'un syst\u00e8me de r\u00e8gles extr\u00eamement simples. On dit qu'ils travaillent sur l'\u00e9mergence. Ca en int\u00e9resse d'autres juste parce qu'ils trouvent \u00e7a fascinant.</p> <p>Le math\u00e9maticien John Conway a d\u00e9fini en 1970 un automate cellulaire particulier qu\u2019il a nomm\u00e9 \u00ab jeu de la vie \u00bb. </p> <p>Il s\u2019agit d\u2019un automate dont la grille est une grille bi-dimensionnelle infinie, et chaque cellule peut prendre deux \u00e9tats 0 ou 1 (qu\u2019on appelle habituellement \u00ab \u00e9tat mort \u00bb et \u00ab \u00e9tat vivant \u00bb). Les voisines d\u2019une cellule sont les huit cellules qui l\u2019entourent.</p> <p>Qui de mieux que John Conway pour vous pr\u00e9senter son jeu:</p> <p>Tip</p> <ul> <li>Une cellule vivante au temps t meurt au temps t + 1 si elle n\u2019est entour\u00e9e que de 0 ou 1 cellule vivante (isolement), ou si elle est entour\u00e9e d\u2019au moins 4 cellules vivantes (surpopulation). Elle survit dans les autres cas.</li> <li>Une cellule morte au temps t devient vivante au temps t + 1 si elle est entour\u00e9e d\u2019exactement 3 cellules vivantes (naissance). Elle reste morte sinon.</li> </ul> <p>Ces r\u00e8gles sont illustr\u00e9es par la figure suivante.</p> <p></p>"},{"location":"projets/jeudelavie/#simulation-du-jeu-de-la-vie","title":"Simulation du jeu de la vie","text":"<p>Pour pouvoir repr\u00e9senter de mani\u00e8re finie le jeu de la vie, on modifie son comportement pour en faire un tore</p> <p>Au lieu d\u2019\u00eatre une grille infinie, c\u2019est une grille k \u00d7 k dont la colonne de gauche est voisine de la colonne de droite, et la ligne du haut voisine de la ligne du bas. De cette mani\u00e8re, la grille n\u2019a pas de bord et toute cellule poss\u00e8de exactement 8 voisines. On peut repr\u00e9senter une grille par une matrice (tableau bi-dimensionnel) de taille \\(k\u00d7k\\), o\u00f9 0 repr\u00e9sente l\u2019\u00e9tat mort et 1 l\u2019\u00e9tat vivant. La repr\u00e9sentation de la grille en Python sera une liste de listes. La num\u00e9rotation des lignes et des colonnes de la matrice ira de 0 \u00e0 (k \u2212 1).</p> <p>Repr\u00e9sentation de la grille</p> <ol> <li> <p>On consid\u00e8re une grille de taille 4. Donner la repr\u00e9sentation matricielle des deux configurations suivantes, et donner les configurations obtenues au temps t + 1 et t + 2 pour chacune. Que remarque-t-on ?</p> <p></p> </li> <li> <p>Dans la grille de taille 4, quelles sont les coordonn\u00e9es des cellules voisines de (1, 1) ? Et celles des voisines de (0, 3) ?</p> </li> <li> <p>Compl\u00e9tez les fonctions creer_grille et draw afin d'afficher une grille.</p> <pre><code>import pyxel as px\n\nVIVANTE = 1\nMORTE = 0\nTAILLE = 5\n\ntype grille = list[list[int]]\n\ndef creer_grille(k: int) -&gt; grille:\n    '''Renvoie une grille de taille k construite al\u00e9atoirement'''\n    pass\n\ndef update():\n    '''Remplace la grille par la prochaine grille'''\n    global g\n    pass\n\ndef draw():\n    '''Dessine la grille'''\n    global g\n    pass\n\npx.init(TAILLE, TAILLE, title=\"Game Of Life\")\ng = creer_grille(TAILLE)\npx.run(update, draw)\n</code></pre> </li> </ol> <p>\u00c9volution de la grille</p> <p>L'objectif ici est de ne pas s'attaquer directement \u00e0 la cr\u00e9ation de la prochaine grille, mais de se constituer des outils \u00e9l\u00e9mentaires qui vont nous permettre progressivement d'atteindre notre but.</p> <ol> <li>Donnez la matrice des nombres de voisines de la grille donn\u00e9e dans le code. Donner l'\u00e9tat suivant de la grille donn\u00e9e dans le code. Cette grille pourra vous servir de test pour vos fonctions.</li> <li>Ecrire une fonction <code>est_vivante(i: int, j: int, g: grille) -&gt; bool</code></li> <li>\u00c9crire les fonctions <code>ind_suiv</code> et <code>ind_prec</code> prenant en param\u00e8tre un indice de ligne ou de colonne et renvoient l\u2019indice de la ligne ou colonne suivante (resp. pr\u00e9c\u00e9dente) dans la grille. Attention, il faut tenir compte du caract\u00e8re torique de la grille.</li> <li> <p>\u00c9crire une fonction <code>nb_voisines_vivantes(i: int, j: int, g: grille)-&gt; int</code> qui prend en entr\u00e9e une grille et une cellule de la grille repr\u00e9sent\u00e9e par ses coordonn\u00e9es \\((i, j)\\), et renvoie le nombre de cellules vivantes autour de la cellule \\((i,j)\\).</p> </li> <li> <p>\u00c9crire une fonction <code>etat_suivant(i: int, j: int, g: grille) -&gt; int</code> qui renvoie le prochain \u00e9tat de la cellule \\((i,j)\\) en fonction des r\u00e8gles du jeu.</p> </li> <li> <p>\u00c9crire une fonction <code>grille_suivante(g:grille) -&gt; grille</code> qui prend en entr\u00e9e une grille et renvoie la prochaine grille \u00e0 afficher. Cette fonction devra faire une ligne (en compr\u00e9hension).</p> </li> <li> <p>Il ne vous reste plus maintenant qu'\u00e0 \u00e9crire une seule ligne de code pour voir se d\u00e9rouler sous vos yeux \u00e9bahis, le jeu de la vie.</p> </li> </ol> <p>Calculabilit\u00e9</p> <p>Le jeu de la vie est Turing-Complet. Tout algorithme peut y \u00eatre impl\u00e9ment\u00e9 (\u00e7a peut se d\u00e9montrer par exemple en exhibant en son sein une porte ET et une porte NON). Par cons\u00e9quent, il est impossible de pr\u00e9dire le comportement asymptotique de toute grille donn\u00e9e. </p> <p></p> <p></p>"},{"location":"projets/othello/","title":"Othello","text":"<p>Il s'agit ici de construire un jeu d'Othello, ou Reversi.</p> <p>Je vous laisse vous documenter sur ce jeu et y jouer afin de vous en approprier les r\u00e8gles.</p>"},{"location":"projets/othello/#code-python-de-depart","title":"Code python de d\u00e9part","text":"<pre><code>VIDE = 0\nBLANC = 1   # joueur 1\nNOIR = 2    # joueur 2\n\ntype grille = list[list[int]]\ntype coup = tuple[int, int]\n\ndef autre(joueur: int) -&gt; int:\n    \"\"\"\n    Retourne l'autre joueur\n    \"\"\"\n    assert joueur in (1,2), \"Seuls les joueurs 1 et 2 sont possibles\"\n    return 3-joueur\n\ndef peut_jouer(c: coup, joueur: int, g: grille) -&gt; bool:\n    \"\"\"Cette fonction a besoin d'exister pour l'affichage.\n    Vous l'\u00e9crirez en chemin \"\"\"\n    return False\n\ndef show(joueur: int, g: grille):\n    \"\"\"\n    Affiche la grille g, le joueur allant jouer \u00e9tant donn\u00e9\n    \"\"\"\n    print( \"\".join(f\"   {j}\" for j in range(8)))\n    print(\" \u250c\u2500\u2500\u2500\"+ 7*\"\u252c\u2500\u2500\u2500\" +\"\u2510\")\n    for i in range(8):\n        print(f\"{i}\u2502\", end=\"\")\n        for j in range(8):\n            if g[i][j]==NOIR:\n                print(\" \u25cb \", end=\"\u2502\")\n            elif g[i][j]==BLANC:\n                print(\" \u25cf \", end=\"\u2502\")\n            elif peut_jouer((i,j), joueur, g):\n                print(\" . \", end=\"\u2502\")\n            else:\n                print(\"   \", end=\"\u2502\")\n        print()\n        if i == 7:\n            print(\" \u2514\u2500\u2500\u2500\"+ 7*\"\u2534\u2500\u2500\u2500\" +\"\u2518\")\n        else:\n            print(\" \u251c\u2500\u2500\u2500\"+ 7*\"\u253c\u2500\u2500\u2500\" +\"\u2524\")\n    print(f\"C'est le tour du joueur {joueur}\")\n</code></pre>"},{"location":"projets/othello/#ecriture-progressive-des-fonctions-necessaires","title":"Ecriture progressive des fonctions n\u00e9cessaires","text":"<p>1. Poser un pion</p> <p>Ecrire <code>poser_pion(c: coup, joueur: int, g: grille)</code></p> <p>Cette fonction modifie en place la grille g sachant que le joueur donn\u00e9 a jou\u00e9 le coup c. Trivial</p> <p>2. Cr\u00e9er la grille</p> <p>Ecrire <code>creer_grille() -&gt; grille</code></p> <p>Cette fonction initialise la grille \u00e0 un d\u00e9but de partie.</p> <p><code>show(1, creer_grille())</code> doit afficher ceci:</p> <p></p> <p>3. Pouvoir jouer</p> <p>Ecrire <code>peut_jouer(c: coup, joueur: int, g: grille) -&gt; bool</code></p> <p>Cette fonction touche au coeur du fonctionnement du jeu. Le joueur peut jouer si lorsqu'il joue le coup c, il peut capturer d'autres pions. On pourra proc\u00e9der pour chaque direction \u00e0 partir du coup jou\u00e9.</p> <p>Lorsque la fonction sera correcte, l'affichage devra ressembler \u00e0 \u00e7a:</p> <p></p> <p>Les petits points sont les endroits ou le joueur peut jouer.</p> <p>4. Coups possibles</p> <p>Ecrire <code>coups_possibles(joueur: int, g: grille) -&gt; tuple[coup,...]</code></p> <p>En utilisant la fonction pr\u00e9c\u00e9dente, \u00e9crire une fonction qui renvoie tous les coups possibles pour le joueur sur la grille.</p> <p>5. Score</p> <p>Ecrire <code>get_score(g: grille) -&gt; tuple[int, int]</code></p> <p>Cette fonction renvoie le score des blanc et celui des noirs sur la grille. Le score se calcule ainsi: 1 point par pion pr\u00e9sent.</p> <p>6. Jouer un coup</p> <p>Ecrire <code>jouer_coup(c: coup, joueur: int, g: grille) -&gt; grille</code></p> <p>Cette fonction est la pierre angulaire du jeu.</p> <p>Elle ne modifie pas g, mais renvoie une copie modifi\u00e9e de g o\u00f9 le joueur a jou\u00e9 le coup c.</p> <p>Il faut:</p> <ol> <li>Poser le pion</li> <li>Retourner tous les pions qu'il est possible de retourner.</li> </ol> <p>Le retournement n'est qu'une adaptation de l'algorithme qui d\u00e9termine si on peut jouer.</p> <p>7. Game Over</p> <p>Ecrire <code>is_game_over(g: grille) -&gt; bool</code></p> <p>Le jeu est termin\u00e9 si ni les blanc, ni les noirs ne peuvent jouer.</p>"},{"location":"projets/othello/#boucle-principale","title":"Boucle principale","text":"<p>8. Partie \u00e0 2 joueurs humains</p> <p>Ecrire <code>partie2j()</code> qui est la boucle principale pour la partie \u00e0 2 joueurs humains. Les humains entrent les coordonn\u00e9es de la grille qu'ils souhaitent jouer dans la console. On adoptera ce format d'entr\u00e9e utilisateur:</p> <ul> <li>Si l'humain entre <code>46</code>, c'est qu'il veut jouer le coup <code>(4,6)</code></li> </ul> <p>Vous blinderez la v\u00e9rification de ce qu'entre l'utilisateur afin qu'on ne puisse pas rentrer n'importe quoi.</p>"},{"location":"projets/othello/#ihm","title":"IHM","text":"<p>9. Peintres en pixels</p> <p>Donnez \u00e0 ce jeu l'interface graphique de votre choix. (Flet par exemple)</p>"},{"location":"projets/othello/#strategie","title":"Strat\u00e9gie","text":"<p>10. Strat\u00e9gie</p> <p>R\u00e9fl\u00e9chissez \u00e0 une strat\u00e9gie pour gagner \u00e0 ce jeu.</p> <p>Je propose de r\u00e9fl\u00e9chir \u00e0 quelles cases il est important d'occuper, ou de ne pas occuper.</p> <p>On peut aussi d\u00e9terminer des phases de jeu, et ajuster en cons\u00e9quence au cours de la partie.</p>"},{"location":"projets/othello/#ia","title":"IA","text":"<p>11. Pour la suite</p> <p>Ecrire <code>grilles_possibles(joueur: int, g: grille) -&gt; list[tuple[grille,coup]]</code></p> <p>Cette fonction renvoie la liste des grilles issues de chaque coup possible du joueur, chacune accompagn\u00e9e du coup en question.</p> <p>En compr\u00e9hension, cette fonction fait une ligne.</p> <p> Intelligence artificielle </p> <p>Il s'agit dans un premier temps de se renseigner sur l'algorithme du minimax. C'est l'algorithme \u00e0 la base de deep blue, qui a battu Kasparov aux \u00e9checs.</p> <p>Il faut donc chercher des sites qui en parlent, demander \u00e0 chat gpt, regarder des vid\u00e9os youtube (ne surtout pas avoir peur de l'anglais). C'est souvent \u00e0 travers la diversification des sources d'information qu'on finit par se faire une bonne id\u00e9e de quelque chose.</p> <p>Othello est un jeu \u00e0 2 joueurs:</p> <ul> <li>non-coop\u00e9ratif  (les joueurs ne coop\u00e8rent pas)</li> <li>synchrone (Les joueurs jouent alternativement)</li> <li>\u00e0 information compl\u00e8te (Les joueurs connaissent l'\u00e9tat du jeu \u00e0 tout moment, il n'y a rien de cach\u00e9 ou d'al\u00e9atoire)</li> <li>\u00e0 nombre fini de strat\u00e9gies pures (\u00e0 chaque tour, un joueur a un ensemble limit\u00e9 de coups possibles, et bien que le nombre de combinaisons de coups  soit tr\u00e8s \u00e9lev\u00e9, il reste fini)</li> <li>\u00e0 somme nulle (le gain d'un joueur est exactement compens\u00e9 par la perte de l'autre, La somme des scores des deux joueurs est toujours \u00e9gale au nombre total de pions sur le plateau)</li> </ul> <p>Votre travail sur la strat\u00e9gie doit vous permettre de d\u00e9gager une heuristique. Ce travail est en soi une vraie probl\u00e9matique qui peut \u00eatre pr\u00e9sent\u00e9e en grand oral.</p> <p>Vous pouvez, \u00e0 l'issue de vos recherches, l'impl\u00e9menter en python.</p> <p>J'accompagnerai ceux qui souhaitent r\u00e9aliser cette impl\u00e9mentation.</p>"},{"location":"projets/pendu/","title":"Le pendu","text":"<p>Objectifs</p> <p>Appliquer tout ce que nous avons vu depuis le d\u00e9but de l'ann\u00e9e. R\u00e9aliser des petits algorithmes.</p> <p>Se familiariser avec: - La prise en main d'un IDE - Ce qu'est un programme structur\u00e9</p>"},{"location":"projets/pendu/#architecture","title":"Architecture","text":"<p>Le fichier \u00e0 \u00e9crire est divis\u00e9 en 2 parties: - les fonctions relatives au jeu du pendu en g\u00e9n\u00e9ral. - les fonctions relatives \u00e0 son ex\u00e9cution en mode console (elles seront pr\u00e9fix\u00e9es par \"__\").</p>"},{"location":"projets/pendu/#preparation","title":"Pr\u00e9paration","text":"<ul> <li>Cr\u00e9ez un r\u00e9pertoire \"pendu\" et ouvrez le dans VSCode</li> <li>Cr\u00e9ez-y un fichier pendu.py</li> <li>Cr\u00e9ez-y un fichier tests.py</li> </ul> <p>je vous donnerai un fichier images.py contenant les \"images\" du pendu, que vous y ajouterez.</p>"},{"location":"projets/pendu/#mission-1","title":"Mission 1","text":"<p>Voici la premi\u00e8re partie du code de pendu.py que vous devez compl\u00e9ter.</p> <p>Vos fonctions doivent \u00eatre bien test\u00e9es avant de continuer. Vous pourrez les tester dans le fichier tests.py.</p> <p>Appeler des fonctions d'autres fichiers</p> <p>Dans le fichier tests.py, vous pouvez appeler des fonctions de pendu.py en utilisant <code>pendu.choisir_mot()</code> par exemple. Mais pour ceci, il faut ajouter <code>import pendu</code> au d\u00e9but du fichier tests.</p> <pre><code>import random\nimport images\n\nMOTS = [\"python\", \"ordinateur\", \"pendu\", \"clavier\", \"souris\", \"programmation\", \"console\"]\n\ndef choisir_mot() -&gt; str:\n    \"\"\"\n    Renvoie un mot al\u00e9atoire dans la liste de mots pr\u00e9d\u00e9finis.\n    \"\"\"\n    pass\n\ndef mot_a_afficher(mot: str, lettres_trouvees: str) -&gt; str:\n    \"\"\"\n    Renvoie le mot avec des lettres r\u00e9v\u00e9l\u00e9es si elles ont \u00e9t\u00e9 devin\u00e9es,\n    et des underscores pour les lettres restantes.\n    &gt;&gt;&gt; get_mot_ecran(\"garage\", \"u\")\n    '______'\n    &gt;&gt;&gt; get_mot_ecran(\"garage\", \"uae\")\n    '_a_a_e'\n\n    \"\"\"\n    pass\n\n\ndef valider_lettre(s: str, lettres_tentees: str) -&gt; int:\n    \"\"\"\n    Renvoie:\n    - 1 si \u00e7a n'est pas une lettre\n    - 2 si la lettre a d\u00e9j\u00e0 \u00e9t\u00e9 tent\u00e9e\n    - 0 sinon\n    \"\"\"\n    pass\n\n\ndef a_trouve(mot: str, lettres_trouvees: str) -&gt; bool:\n    \"\"\"Renvoie True si le mot est enti\u00e8rement devin\u00e9, False sinon.\n    &gt;&gt;&gt; a_trouve(\"garage\", \"\")\n    False\n    &gt;&gt;&gt; a_trouve(\"garage\", \"ae\")\n    False\n    &gt;&gt;&gt; a_trouve(\"garage\", \"gare\")\n    True\n    \"\"\"\n    pass\n\ndef intercaller_espaces(s:str) -&gt; str:\n    \"\"\"\n    Cette fonction renvoie la cha\u00eene o\u00f9 on a intercall\u00e9 des espaces entre chaque caract\u00e8re.\n    &gt;&gt;&gt; intercaller_espaces(\"python\")\n    'p y t h o n'\n    \"\"\"\n\ndef tour_de_jeu(mot: str, lettre: str, lettres_trouvees: str, lettres_tentees: str, essais_restants: int,\n                fn_message: Callable[[str], None]=print) -&gt; tuple[int, str, str]:\n    \"\"\"\n    V\u00e9rifie si la lettre est dans le mot et renvoie les variables essais_restants, lettres_trouvees et lettres_tentees mises \u00e0 jour.\n\n    Utilise la fonction fn_message pour afficher un message \u00e0 l'utilisateur pour lui indiquer s'il a trouv\u00e9 ou pas. Par d\u00e9faut, la fonction est print.\n\n    &gt;&gt;&gt; tour_de_jeu(\"garage\", \"a\", \"\", \"\", 5)\n    (5, 'a', 'a')\n    \"\"\"\n    pass\n</code></pre>"},{"location":"projets/pendu/#mission-2","title":"Mission 2","text":"<p>Ecrire la fonction __partie_pendu()</p> <pre><code>def __image_pendu(essais_restants: int) -&gt; str:\n    \"\"\"\n    Cette fonction renvoie l'image du pendu correspondant au nombre d'essais restants\n    \"\"\"\n    pass\n\n\ndef __partie_pendu_console() -&gt; bool:\n    \"\"\"\n    Lance une partie de pendu. Renvoie True si le joueur a gagn\u00e9, False sinon.\n    Description de ce que doit faire cette fonction:\n    - Initialise les variables de jeu:\n        - mot, le mot \u00e0 trouver\n        - lettres_trouvees, une str contenant toutes les lettres trouv\u00e9es par l'utilisateur\n        - lettres_tentees, une str contenant toutes les lettres tent\u00e9es par l'utilisateur\n        - essais_restants  le nombre d'essais restants\n    - Affiche un message de bienvenue\n    - Boucle jusqu'au fin de la partie\n        - Affiche le mot avec des lettres r\u00e9v\u00e9l\u00e9es si elles ont \u00e9t\u00e9 devin\u00e9es. Les lettres sont s\u00e9par\u00e9es par des espaces\n        - Demande une lettre au joueur, recommence \u00e0 demander si la lettre est invalide\n        - Proc\u00e8de \u00e0 un tour de jeu\n        - Affiche le pendu.\n    \"\"\"\n    pass\n</code></pre> <p>Ecrire la fonction</p> <pre><code>def __lancer_jeu_console():\n    \"\"\"\n    Cette fonction lance une partie et demande si l'utilisateur veut rejouer. Elle maintient un score.\n    D\u00e8s que le joueur a perdu, elle affiche son score (1 point par partie gagn\u00e9e)\n    \"\"\"\n</code></pre> <p>Am\u00e9liorations</p> <ul> <li>Gestion des accents et caract\u00e8res sp\u00e9ciaux. Lorsqu'on propose 'e', le jeu d\u00e9couvre les \u00e9, \u00e8, etc.</li> <li>R\u00e9cup\u00e9rer la liste des mots depuis un fichier contenant tous les mots du dictionnaire.</li> </ul> <p>God mode</p> <p>Cette vid\u00e9o parlant du jeu du pendu propose aussi une mani\u00e8re de le rendre tr\u00e8s difficile. Impl\u00e9mentez cette mani\u00e8re de faire. Ceci n'a de sens que si vous avez r\u00e9alis\u00e9 les am\u00e9liorations.</p> <p></p>"},{"location":"projets/space_invader/","title":"Projet space invader","text":"<p>L'objectif est de cr\u00e9er un \"space invader\" like  (original: https://freeinvaders.org )</p> <p>Nous allons utiliser le retro game engine pyxel (<code>pip install pyxel</code>)</p> <p>Propret\u00e9</p> <p>La tr\u00e8s grande majorit\u00e9 des exemples sur internet de jeux pyxels ne sont pas propres du tout. Merci de ne pas vous en inspirer afin de ne pas prendre de mauvaises habitudes. A ce titre, c'est la raison pour laquelle je vous guide afin de le faire proprement, dans la limite du raisonable.</p> <p>Voici la mod\u00e9lisation de ce space invader o\u00f9 nous utilisons l'h\u00e9ritage \u00e0 fin de simplification (Je consid\u00e8re l'h\u00e9ritage comme faisant partie de la zone proximale de d\u00e9veloppement). Sans h\u00e9ritage, il faudrait g\u00e9rer dans toutes les classes tous les attributs et m\u00e9thodes d'EltGraphique. Il reste toujours possible de les adapter dans les classes filles.</p> <pre><code>classDiagram\n    EltGraphique &lt;|-- Vaisseau\n    EltGraphique &lt;|-- Ennemi\n    EltGraphique &lt;|-- Missile\n    EltGraphique : +float x\n    EltGraphique : +float y\n    EltGraphique : +float dx\n    EltGraphique : +float dy\n    EltGraphique : +int height\n    EltGraphique : +int width\n    EltGraphique : +int u\n    EltGraphique : +int v\n    EltGraphique : +draw()\n    EltGraphique : +update()\n    EltGraphique : +bool collision(EltGraphique)\n\n    class Jeu{\n        +int score\n        +draw()\n        +update()\n        -check_collisions()\n    }\n    class Ennemi{\n        +tirer()\n    }\n    class Vaisseau{\n        +tirer()\n    }\n    Jeu \"1\"--\"1\" Vaisseau\n    Jeu \"1\"--\"*\" Ennemi\n    Ennemi \"1\"--\"*\" Missile\n    Vaisseau \"1\"--\"*\" Missile</code></pre>"},{"location":"projets/space_invader/#element-graphique","title":"Element graphique","text":"<p>Un El\u00e9ment Graphique est quelque chose qui peut appara\u00eetre \u00e0 l'\u00e9cran.</p> <ul> <li>Il a une position x, y dans le plan.</li> <li>Il a un vecteur de d\u00e9placement dx, dy duquel il se d\u00e9place en permanence</li> <li>Il a une coordonn\u00e9e dans le fichier de ressource pour aller y rechercher son image.</li> <li>Il a une largeur <code>width</code> et une hauteur <code>height</code>.</li> <li>Il sait se dessiner \u00e0 l'\u00e9cran.</li> <li>Il sait se mettre \u00e0 jour en fonction de son vecteur directeur.</li> <li>Il sait dire s'il est en collision avec un autre \u00e9l\u00e9ment graphique (voir fonction donn\u00e9e plus bas).</li> </ul> <p>Par exemple, Un Vaisseau EST UN Element Graphique.</p> <p>Danger</p> <p>Les vecteurs de position et de d\u00e9placement seront g\u00e9r\u00e9s en float. Par contre l'affichage attendra des ints. C'est \u00e9quivalent \u00e0 dire qu'on r\u00e9fl\u00e9chit au mouvement dans \\(\\mathbb{R^2}\\) mais qu'on affiche dans \\(\\mathbb{Z^2}\\)</p>"},{"location":"projets/space_invader/#le-jeu","title":"Le Jeu","text":"<p>Le jeu est le chef d'orchestre.</p> <p>il g\u00e8re:</p> <ul> <li>Un Vaisseau </li> <li>Des Ennemis</li> <li>Un Score</li> <li>Les \u00e9v\u00e8nements utilisateurs dans sa m\u00e9thode update</li> </ul> <p>Le Jeu doit pouvoir spawner un ennemi \u00e0 une certaine position pour un certain vecteur de d\u00e9placement. Le jeu sait se dessiner et demander \u00e0 ses vaisseaux et \u00e0 ses ennemis de se mettre \u00e0 jour et de se dessiner.</p> <p>Le jeu sait tester toutes les collisions et agir en cons\u00e9quence.</p>"},{"location":"projets/space_invader/#le-vaisseau","title":"Le Vaisseau","text":"<p>Un vaisseau doit pouvoir tirer un nouveau missile. Un vaisseau conna\u00eet la liste de ses missiles et sait leur demander de se mettre \u00e0 jour et de se dessiner. </p>"},{"location":"projets/space_invader/#lennemi","title":"L'ennemi","text":"<p>Un ennemi doit pouvoir tirer un nouveau missile. Un ennemi conna\u00eet la liste de ses missiles et sait leur demander de se mettre \u00e0 jour et de se dessiner. </p>"},{"location":"projets/space_invader/#le-missile","title":"Le missile","text":"<p>C'est un \u00e9l\u00e9ment Graphique simple.</p>"},{"location":"projets/space_invader/#optionnel","title":"Optionnel","text":"<ul> <li>Il existe plusieurs types d'ennemis plus ou moins puissants.</li> <li>Il y a un boss ded fin de niveau.</li> <li>Les ennemis et le vaisseau peuvent avoir des points de vie.</li> <li>Le jeu peut cr\u00e9er une explosion \u00e0 un certain endroit</li> <li>Les ennemis peuvent drop des Bonus (invincibilit\u00e9, changement de missile, ...) La liste est sans fin.</li> </ul> <p>Ne vous lancez pas dans les fonctionnalit\u00e9s optionnelles sans avoir un code propre et compl\u00e8tement test\u00e9. Ne vous lancez pas dans une am\u00e9lioration sans avoir pens\u00e9 sa mod\u00e9lisation. Si vous \u00e9crivez trop de code, c'est que vous avez peut-\u00eatre pris un mauvais chemin.</p>"},{"location":"projets/space_invader/#les-collisions","title":"Les collisions","text":"<p>Rajoutez cette m\u00e9thode dans votre classe EltGraphique. L'objectif ici, c'est que vous vous plongiez dans la POO, pas d'\u00e9tudier la collision d'objets dans l'espace (tr\u00e8s vaste sujet), donc je vous la donne. (La collision peut faire l'objet d'un grand oral maths/info.)</p> <pre><code>def collision(self, other: 'EltGraphique') -&gt; bool:\n    \"\"\" Cette m\u00e9thode d\u00e9tecte les collisions entre 2 boites\n    rectangulaires. Les rectangles doivent avoir des attributs:\n    x, y, width, height\n    Elle renvoie True si les deux bo\u00eetes sont en collision.\n    \"\"\"\n    return not ( \n               (other.x &gt;= self.x + self.width)   \n            or (other.x + other.width &lt;= self.x)  \n            or (other.y &gt;= self.y + self.height) \n            or (other.y + other.height &lt;= self.y) \n     )\n</code></pre> <p>Pour aller plus loin dans les collisions, vous pouvez vous int\u00e9resser au th\u00e9or\u00e8me des axes s\u00e9parateurs (Accessible sp\u00e9 math), ou encore \u00e0 GJK, qui utilise la somme de Minkowski (Difficile \u00e0 ce stade, mais je vous le mets quand m\u00eame parce que c'est beau)</p> <p>La d\u00e9tection de collisions utilise en fait plusieurs algorithmes. Un algorithme pour voir \"en gros\" qui pourrait entrer en collision en effectuant un partitionnement de l'espace (Broad phase). Un algorithme pour voir d'un peu plus pr\u00e8s ce qui pourrait \u00eatre en collision d'apr\u00e8s le r\u00e9sultat du broad en utilisant la fonction que je vous ai donn\u00e9, ou SAT, ou autre (Mid phase). Un algorithme pour d\u00e9terminer au pixel pr\u00e8s ce qui entre en collision d'apr\u00e8s le r\u00e9sultat du Mid avec par exemple GJK (Narrow phase).</p>"},{"location":"terminale/langages/","title":"Paradigmes de programmation","text":"<p>Il est inutile d'essayer de comprendre ces d\u00e9finitions avant d'avoir pratiqu\u00e9 l'approche mentale des paradigmes \u00e9voqu\u00e9s.</p> <p>Qu'est-ce qu'un paradigme de programmation?</p> <p>Un paradigme de programmation est un mod\u00e8le ou une approche particuli\u00e8re utilis\u00e9e pour \u00e9crire et structurer des programmes informatiques. Il d\u00e9finit un ensemble de concepts, de m\u00e9thodes et de styles qui influencent la mani\u00e8re dont les programmeurs organisent leur code et pensent \u00e0 la r\u00e9solution de probl\u00e8mes. Les paradigmes de programmation fournissent diff\u00e9rents outils mentaux pour exprimer des algorithmes et des structures de donn\u00e9es.</p> <p>Le Paradigme Fonctionnel</p> <p>Cette d\u00e9finition s'appuie sur le travail qui a \u00e9t\u00e9 fait sur les listes chain\u00e9es, afin de pouvoir vous la repr\u00e9senter plus facilement.</p> <p>Le paradigme fonctionnel se distingue principalement par :</p> <ul> <li>L'immuabilit\u00e9 des structures de donn\u00e9es : ici, chaque fonction renvoie une nouvelle liste, sans affecter l'originale. Lorsqu'on insere dans une liste, il faut comprendre \"renvoyer une nouvelle liste dans laquelle on a ins\u00e9r\u00e9\"</li> <li>L'usage intensif de la r\u00e9cursivit\u00e9 : au lieu de boucles, les fonctions comme <code>taille</code>, <code>somme</code>, ou <code>inverser</code> utiliseront la r\u00e9cursivit\u00e9 pour recueillir des informations sur la liste.</li> <li>L'importance des fonctions pures : chaque fonction renvoie toujours le m\u00eame r\u00e9sultat pour les m\u00eames arguments, sans effets de bord.</li> </ul> <p>Ce style de programmation garantit des comportements pr\u00e9visibles et s\u00fbrs, ce qui est particuli\u00e8rement utile en programmation concurrente et dans les applications o\u00f9 la fiabilit\u00e9 est critique.</p> <p>Le paradigme orient\u00e9 objet</p> <p>Ce paradigme est bas\u00e9 sur la notion d'objets, qui sont des instances de classes et encapsulent des donn\u00e9es (attributs) et des comportements (m\u00e9thodes).</p> <p>Ce paradigme est constitu\u00e9 de 5 piliers:</p> <ol> <li>Objet (et classe)</li> <li>Encapsulation</li> <li>Abstraction</li> <li>Polymorphisme</li> <li>H\u00e9ritage</li> </ol> <p>Nous insisterons sur le pilier 1. Nous parlerons un peu du pilier 2, mais python ne l'impl\u00e9mente pas vraiment. Nous verrons des usages simples du 5\u00e8me pilier, surtout \u00e0 des fins de simplification de code, afin de pouvoir ne pas crouler sous du code redondant.</p> <p>Il existe un malentendu majeur autour de la POO, li\u00e9 \u00e0 la mani\u00e8re dont le concept d'objet a \u00e9t\u00e9 interpr\u00e9t\u00e9 et utilis\u00e9. \u00c0 l'origine, des langages comme Simula, qui est souvent consid\u00e9r\u00e9 comme l'un des premiers langages orient\u00e9s objet, voyaient les objets comme une repr\u00e9sentation de concepts du monde r\u00e9el, avec des comportements propres. Cependant, avec la popularisation de la POO (notamment gr\u00e2ce \u00e0 C++ et Java), beaucoup de d\u00e9veloppeurs ont commenc\u00e9 \u00e0 concevoir des objets simplement comme des structures de donn\u00e9es am\u00e9lior\u00e9es. Ca a conduit \u00e0 des critiques sur le fait que la v\u00e9ritable philosophie de la POO, telle qu'envisag\u00e9e par ses cr\u00e9ateurs, avait \u00e9t\u00e9 dilu\u00e9e ou mal comprise.</p> <p>Alan Kay, qui a invent\u00e9 le terme \"orient\u00e9 objet\" (notamment avec Smalltalk), a exprim\u00e9 sa frustration face \u00e0 la mani\u00e8re dont ce paradigme a \u00e9volu\u00e9. Il a pr\u00e9cis\u00e9 que pour lui, la POO ne concernait pas simplement l'encapsulation ou l'h\u00e9ritage, mais plut\u00f4t la communication entre objets via des messages. Cette vision a souvent \u00e9t\u00e9 r\u00e9duite \u00e0 une simple organisation de donn\u00e9es et de m\u00e9thodes dans des classes, une simplification que Kay a critiqu\u00e9e. Il s\u2019est m\u00eame distanci\u00e9 de la mani\u00e8re dont le paradigme a \u00e9t\u00e9 interpr\u00e9t\u00e9 par des langages comme C++ ou Java.</p> <p>Ce malentendu est int\u00e9ressant car il montre comment une id\u00e9e technique peut \u00e9voluer de mani\u00e8re inattendue. Ce que nous cr\u00e9ons et livrons au monde nous appartient-il \u00e0 jamais?</p> <p>J'admets que nous touchons \u00e0 ce malentendu dans l'utilisation de la POO qui est faite dans l'impl\u00e9mentation mutable des structures de donn\u00e9es que nous avons rencontr\u00e9. C'est surtout unn pr\u00e9texte pour que vous manipuliez des objets. Cependant, elle trouve tout son sens dans le projet space invader, o\u00f9 des objets sont bien en communication.</p> <p>Meilleur paradigme?</p> <p>Au del\u00e0 du purisme, la plupart des nouveaux langages impl\u00e9mentent divers concepts provenant de multiples paradigmes. Ils sont dits multi-paradigmes. Pour la simple et bonne raison que ce qui est facile \u00e0 penser dans un paradigme l'est parfois moins dans un autre. Il convient de ne pas se r\u00e9duire \u00e0 une guerre inter-paradigme. La question \"Quel est le meilleur paradigme?\" n'a pas de sens lorsqu'on s'attaque \u00e0 des probl\u00e8mes r\u00e9els. La r\u00e9elle richesse provient de la connaissance initiale de ces paradigme et de savoir en faire la part des choses ind\u00e9pendament d'une suppos\u00e9e meilleure fa\u00e7on de penser. </p> <p>Les phrases suivantes sont de meilleures questions \u00e0 se poser: - \"Dans quel paradigme vais-je me sentir plus \u00e0 l'aise pour penser mon probl\u00e8me?\".  - \"Dans quel paradigme est-il raisonable de r\u00e9soudre mon probl\u00e8me \u00e9tant donn\u00e9 l'\u00e9tat du march\u00e9 des d\u00e9veloppeurs?\" - \"Dans quel paradigme est-il raisonable de r\u00e9soudre mon probl\u00e8me \u00e9tant donn\u00e9es les comp\u00e9tences de mes d\u00e9veloppeurs?\"</p>"},{"location":"terminale/langages/poo/","title":"Paradigme orient\u00e9 objets","text":"<p>D\u00e9finition</p> <p>En programmation orient\u00e9e objet, un programme est un ensemble d'entit\u00e9s qui interagissent. Ces entit\u00e9s sont appel\u00e9es des objets. Un objet poss\u00e8de un \u00e9tat (les donn\u00e9es qui le caract\u00e9risent) et des comportements (ce qu'il sait faire).</p> <p>L'\u00e9tat d'un objet est repr\u00e9sent\u00e9 par l'ensemble de ses attributs Les comportements d'un objet sont repr\u00e9sent\u00e9s par l'ensemble de ses m\u00e9thodes</p> <p>Une classe permet de d\u00e9finir une famille d'objets. A partir d'une classe, on peut cr\u00e9er autant d'objets que l'on veut. Ce sont des exemplaires, des instances de la classe.</p>"},{"location":"terminale/langages/poo/#classe-animal","title":"Classe <code>Animal</code>","text":"<p>Voici un exemple basique d'une classe en Python qui mod\u00e9lise la phrase \"Un animal porte un nom, et il sait parler.\"</p> <pre><code>class Animal:\n    def __init__(self, nom: str):\n        self.nom = nom  # Attribut d'instance\n\n    def parler(self):   # M\u00e9thode d'instance\n        print(f\"{self.nom} fait du bruit.\")\n\nx = Animal(\"Bidule\")   # cr\u00e9ation d'une instance d'Animal portant le nom bidule\nprint(x.nom)           # On acc\u00e8de aux attributs de l'instance avec le point. Affiche: Bidule\nx.nom = \"Truc\"         # Mutabilit\u00e9 -&gt; On peut modifier les attributs de l'instance de la m\u00eame mani\u00e8re \nx.parler()  # On acc\u00e8de aussi aux m\u00e9thodes d'instance par le point. Affiche: Truc fait du bruit.\n</code></pre> <p>Ce programme affichera <pre><code>Bidule\nTruc fait du bruit\n</code></pre></p> <p>Dans cet exemple :</p> <ul> <li><code>__init__</code> : Cette m\u00e9thode sera automatiquement charg\u00e9e d'initialiser les attributs de l'objet en cours d'instanciation. On le consid\u00e8re comme le constructeur de la classe.</li> <li><code>self</code> : Repr\u00e9sente l'instance actuelle de la classe. Il permet d'acc\u00e9der aux attributs et m\u00e9thodes de l'objet lui-m\u00eame.</li> </ul> <p>Constructeur</p> <p>Un constructeur est une fonction particuli\u00e8re appel\u00e9e lors de l'instanciation. Elle permet d'allouer la m\u00e9moire n\u00e9cessaire \u00e0 l'objet et d'initialiser ses attributs.</p> <p>Abus de langage</p> <p>Il est tr\u00e8s (trop) courant de consid\u00e9rer <code>__init__</code> comme le constructeur en Python, car il initialise l'objet apr\u00e8s sa cr\u00e9ation. Cependant, il ne fait que la moiti\u00e9 du travail. la m\u00e9thode charg\u00e9e de cr\u00e9er l'instance est le dunder <code>__new__</code>. La preuve en est que <code>__init__</code> prend self en param\u00e8tre, c'est donc bien que self existe d\u00e9j\u00e0 avant l'invocation d'<code>__init__</code>. Le constructeur est en r\u00e9alit\u00e9 le couple form\u00e9 par les m\u00e9thodes <code>__new__</code> et <code>__init__</code>.</p> <p>Voici une portion de code pour se rendre compte de ce qu'il se passe r\u00e9ellement:</p> <pre><code>class MaClasse:\n    def __new__(cls, *args, **kwargs):\n        '''Appel de __new__ pour cr\u00e9er une nouvelle instance de la classe'''\n        print(\"Appel de __new__ : Cr\u00e9ation de l'instance\")\n        instance = super(MaClasse, cls).__new__(cls)\n        return instance\n\n    def __init__(self, valeur):\n        '''Appel de __init__ pour initialiser l'instance avec les attributs'''\n        print(\"Appel de __init__ : Initialisation de l'instance\")\n        self.valeur = valeur\n\n    def afficher_valeur(self):\n        print(f\"Valeur : {self.valeur}\")\n\n# Instanciation d'un objet\nc = MaClasse(\"truc\")\nc.afficher_valeur()\n</code></pre> <p>On consid\u00e8rera malgr\u00e9 tout que <code>__init__</code> est le constructeur, car si on vous pose la question, c'est la r\u00e9ponse attendue.</p>"},{"location":"terminale/langages/poo/#interactions-entre-objets","title":"Interactions entre objets","text":"<p>Rajoutons la phrase \"Un Humain porte un nom, un prenom et peut adopter des animaux domestiques. On peut afficher la liste des animaux d'un Humain\".</p> <pre><code>class Humain:\n    def __init__(self, prenom: str, nom: str):\n        self.nom = nom\n        self.prenom = prenom\n        self.animaux: list[Animal] = []\n\n    def adopte(self, a: Animal):\n        self.animaux.append(a)\n\n    def afficher_animaux(self):\n        for a in self.animaux:\n            print(a.nom)\n\n\nx = Humain(\"Peter\", \"Quill\")\ny = Animal(\"Rocket\")\nx.adopte(y)\nx.afficher_animaux()   # Affiche Rocket\n</code></pre> <p>Ici, on a choisi que l'humain porte la liste de ses animaux. On aurait pu \u00e0 la place ajouter un attribut propri\u00e9taire \u00e0 la classe Animal pour dire qu'un animal est la propri\u00e9t\u00e9 d'un humain particulier. Mais on aurait perdu la possibilit\u00e9 d'afficher les animaux d'un humain sans disposer de la liste de tous les animaux. Il faut souvent choisir quelle classe est le \"chef d'orchestre\" en fonction du probl\u00e8me qu'on a \u00e0 traiter.</p> <p>H\u00e9ritage</p> <p>L\u2019h\u00e9ritage est un autre pilier fondamental en POO. Il permet \u00e0 une classe (dite sous classe) d\u2019h\u00e9riter des attributs et m\u00e9thodes d\u2019une autre classe (dite super classe).</p>"},{"location":"terminale/langages/poo/#exemple-classe-ratonlaveur-heritant-de-animal","title":"Exemple : Classe <code>RatonLaveur</code> h\u00e9ritant de <code>Animal</code>","text":"<p>Nous pourrions ajouter un attribut <code>espece</code> \u00e0 la classe Animal pour les distinguer, mais ici, pour introduire le concept, nous allons choisir cette phrase en Fran\u00e7ais: \"Un RatonLaveur EST UN Animal\"</p> <pre><code>class RatonLaveur(Animal):\n\n    def __init__(self, nom: str):\n        super().__init__(nom) # cette ligne appelle le constructeur de la super classe\n\n    def parler(self):\n        print(f\"{self.nom} \u00e9met des grognements.\")\n</code></pre> <p>La classe <code>RatonLaveur</code> h\u00e9rite de <code>Animal</code> mais peut red\u00e9finir certaines m\u00e9thodes (ici, <code>parler</code>), ou encore en cr\u00e9er d'autres. Ainsi, un objet de la classe <code>Chien</code> pourra aboyer au lieu de \"faire du bruit\". Un Raton laveur pourra \u00e9mettre das grognements</p> <p>En fran\u00e7ais, on peut tr\u00e8s bien dire d\u00e8s lors \"Un Chien EST UN Animal\"</p> <p>Programme exemple: <pre><code>x = Animal(\"Animal quelconque\")\nx.parler()\ny = RatonLaveur(\"Rocket\")\ny.parler()\nprint(isinstance(x, Animal), isinstance(x, RatonLaveur))\nprint(isinstance(y, Animal), isinstance(y, RatonLaveur))\n</code></pre> Affichage: <pre><code>Animal quelconque fait du bruit\nRocket \u00e9met des grognements\nTrue False\nTrue True\n</code></pre></p> <p>La fonction <code>isinstance</code> sert \u00e0 savoir si un objet est une instance d'une classe. Si on a besoin de l'utiliser hors debugging, c'est s\u00fbrement du \u00e0 un d\u00e9faut de conception. On n'aura pas besoin de l'utiliser.</p> <p>Mod\u00e9lisation objet</p> <p>Une voiture a une marque, un mod\u00e8le, un prix, un nombre de kilom\u00e8tres parcourus, une quantite de carburant dans le r\u00e9servoir (en litres), et une consommation (litres au 100). Une voiture peut rouler sur une certaine distance. \u00c0 chaque fois qu'elle roule, le kilom\u00e9trage augmente, et le carburant diminue. Le r\u00e9servoir de la voiture a une capacit\u00e9 maximale. On peut afficher les caract\u00e9ristiques de la voiture.</p> <p>Un Humain a une quantit\u00e9 d'argent disponible sur son compte en banque. Un Humain peut acheter des voitures. Un Humain peut faire des trajets avec une voiture pour un certain nombre de kilom\u00e8tres. Avant de commencer un trajet, l'humain v\u00e9rifie s'il a assez d'essence, sinon, il va \u00e0 la station service faire le plein. Lorsqu'un humain fait le plein de sa voiture, son compte en banque diminue. </p> <ul> <li>Ecrivez une classe Humain et une classe Voiture compatibles avec cette description.</li> <li>Instanciez ensuite Humain et Voiture afin de tester des scenarios d'utilisation.</li> </ul>"},{"location":"terminale/structures-de-donnees/listes/","title":"Listes - Paradigme fonctionnel","text":"<p>Attention</p> <p>Ici, nous ne parlons pas du tout des listes python. Nous n'en utiliserons d'ailleurs pas.</p>"},{"location":"terminale/structures-de-donnees/listes/#definition","title":"D\u00e9finition","text":"<p>Les listes sont une structure de donn\u00e9es lin\u00e9aire qui permet de stocker une s\u00e9quence d'\u00e9l\u00e9ments. Il existe une multitude de mani\u00e8re de les impl\u00e9menter. Nous en verrons 2. </p> <p>Les listes sont un outil formidable pour faire ses premiers pas en r\u00e9cursivit\u00e9. C'est aussi l'occasion de d\u00e9couvrir le paradigme fonctionnel, et aussi d'aller juste un peu plus loin dans le paradigme orient\u00e9 objet.</p> <p>Ici, nous allons cr\u00e9er des listes immuables, ce qui signifie qu'elles ne peuvent pas \u00eatre modifi\u00e9es une fois cr\u00e9\u00e9es. Toute op\u00e9ration qui \"modifie\" une liste renvoie une nouvelle liste, tout en pr\u00e9servant l'ancienne.</p> <p>D\u00e9finition r\u00e9cursive</p> <p>Nous travaillerons avec des listes o\u00f9 chaque \u00e9l\u00e9ment est un entier. </p> <p>Chaque liste peut \u00eatre :</p> <ol> <li>vide</li> <li>Contenir un \u00e9l\u00e9ment appel\u00e9 la t\u00eate, suivi de la queue, qui est une autre liste.</li> </ol> <p>Nous d\u00e9finissons une liste \u00e0 l'aide de sa propre d\u00e9finition. Selon cette d\u00e9finition, nous travaillons sur une structure d\u00e9finie r\u00e9cursivement.</p>"},{"location":"terminale/structures-de-donnees/listes/#implementation-en-python","title":"Impl\u00e9mentation en python","text":"<p>Nous utiliserons des tuples pour contenir une liste car les tuples sont immuables, ils collent bien au cadre de la programmation fonctionnelle.</p> <p>Nous mat\u00e9rialiserons la liste vide par un tuple vide.</p> <p>Une liste non vide sera un tuple contienant 2 \u00e9l\u00e9ments, la t\u00eate, ainsi que la queue.</p> <p>Le tuple suivant repr\u00e9sente une liste o\u00f9 la t\u00eate est <code>2</code>, et la queue est une liste dont la t\u00eate est <code>3</code>, suivie d'une liste ou la tete est 4, suivie elle-m\u00eame de la liste vide.</p> <pre><code>(2, (3, (4, ())))\n</code></pre>"},{"location":"terminale/structures-de-donnees/listes/#traduction-de-notre-definition-en-python","title":"Traduction de notre d\u00e9finition en python:","text":"<p><pre><code>type vide = tuple[()]\nLISTE_VIDE: vide = ()\n\ntype liste = vide | tuple[int, liste]\n</code></pre> Nous cr\u00e9ons ici deux types :</p> <ul> <li><code>vide</code> repr\u00e9sente le vide mod\u00e9lis\u00e9 par un tuple vide.</li> <li><code>liste</code> est une structure r\u00e9cursive qui peut \u00eatre soit vide, soit un 2-uplet: t\u00eate (int) et queue(liste).</li> </ul>"},{"location":"terminale/structures-de-donnees/listes/#creation-et-acces-aux-elements","title":"Cr\u00e9ation et Acc\u00e8s aux \u00c9l\u00e9ments","text":""},{"location":"terminale/structures-de-donnees/listes/#creation-dune-liste","title":"Cr\u00e9ation d'une Liste","text":"<p>Une fonction typique pour cr\u00e9er une nouvelle liste \u00e0 partir d'un entier et d'une autre liste : <pre><code>def creer(t: int, q: liste) -&gt; liste:\n    return (t, q)\n</code></pre> Elle prend deux arguments :</p> <ul> <li><code>t</code> : la t\u00eate (l'\u00e9l\u00e9ment \u00e0 ajouter).</li> <li><code>q</code> : la queue (la liste suivante).</li> </ul>"},{"location":"terminale/structures-de-donnees/listes/#acces-aux-elements","title":"Acc\u00e8s aux \u00c9l\u00e9ments","text":"<p>Les deux op\u00e9rations d'acc\u00e8s principales sont : - T\u00eate : obtenir le premier \u00e9l\u00e9ment de la liste. - Queue : obtenir la sous-liste \u00e0 partir du deuxi\u00e8me \u00e9l\u00e9ment.</p> <pre><code>def tete(lst: liste) -&gt; int:\n    assert len(lst) == 2, \"Liste vide\"\n    return lst[0]\n\ndef queue(lst: liste) -&gt; liste:\n    assert len(lst) == 2, \"Liste vide\"\n    return lst[1]\n</code></pre> <p>Nous reviendrons sur ces fonctions car il se peut qu'on les modifie juste un peu en fin de parcours.</p> <p>Attention</p> <p>A partir de maintenant, nous n'utiliserons plus les tuples. Nous n'utiliserons que les fonctions que nous avons d\u00e9finies ainsi que la constante LISTE_VIDE.</p>"},{"location":"terminale/structures-de-donnees/listes/#fonctions-en-lecture","title":"Fonctions en lecture","text":""},{"location":"terminale/structures-de-donnees/listes/#tester-si-une-liste-est-vide","title":"Tester si une Liste est Vide","text":"<pre><code>def est_vide(lst: liste) -&gt; bool:\n    return lst == LISTE_VIDE\n</code></pre>"},{"location":"terminale/structures-de-donnees/listes/#calculer-la-taille-dune-liste","title":"Calculer la Taille d'une Liste","text":"<pre><code>def taille(lst: liste) -&gt; int:\n    if est_vide(lst):\n        return 0\n    return 1 + taille(queue(lst))\n</code></pre>"},{"location":"terminale/structures-de-donnees/listes/#calculer-la-somme-des-elements","title":"Calculer la Somme des \u00c9l\u00e9ments","text":"<pre><code>def somme(lst: liste) -&gt; int:\n    if est_vide(lst):\n        return 0\n    return tete(lst) + somme(queue(lst))\n</code></pre> <p>A vous</p> <p>Ecrivez toutes les autres fonctions demand\u00e9es. On r\u00e9alisera une disjonction de cas au papier avant de coder. </p>"},{"location":"terminale/structures-de-donnees/listes/#fonctions-en-creation","title":"Fonctions en cr\u00e9ation","text":"<p>Attention</p> <p>Bien comprendre que les listes sont immuables. On ne peut pas les modifier. Par \"Ins\u00e9rer\", on entendra \"Renvoyer une liste dans laquelle on a ins\u00e9r\u00e9\".</p>"},{"location":"terminale/structures-de-donnees/listes/#ajouter-un-element-a-la-fin","title":"Ajouter un \u00c9l\u00e9ment \u00e0 la fin","text":"<pre><code>def ajouter_fin(e: int, lst: liste) -&gt; liste:\n    if est_vide(lst):\n        return LISTE_VIDE\n    else:\n        return creer(tete(lst), ajouter_fin(queue(lst)))\n</code></pre> <p>Si on reprend la m\u00e9taphore des lutins.</p> <p></p> <p>Je suis un lutin-ajouteur. </p> <ul> <li>Si on me donne une liste vide et qu'on me dit d'y ajouter l'\u00e9l\u00e9ment e, je renvoie une liste ne comportant que l'\u00e9l\u00e9ment e</li> <li>Sinon, c'est qu'on me donne une liste avec une tete et une queue. Alors je cr\u00e9\u00e9 une liste avec la m\u00eame t\u00eate, et pour la queue, je la donne \u00e0 un autre lutin ajouteur pour qu'il me la renvoie augment\u00e9e de e</li> </ul> <p>A vous</p> <p>Ecrivez toutes les autres fonctions demand\u00e9es. On r\u00e9alisera une disjonction de cas au papier avant de coder. </p>"},{"location":"terminale/structures-de-donnees/listeschainees/","title":"Listes cha\u00een\u00e9es - Approche Orient\u00e9e Objet","text":"<p>Requis</p> <p>Vous devez savoir refaire les exercices sur la cr\u00e9ation et l'utilisation de classes en POO sans regarder le corrig\u00e9.</p>"},{"location":"terminale/structures-de-donnees/listeschainees/#introduction","title":"Introduction","text":"<p>Une liste cha\u00een\u00e9e est aussi une structure permettant d'impl\u00e9menter une liste.</p> <p>La cha\u00eene que repr\u00e9sente la liste est compos\u00e9e de plusieurs maillons.</p> <p>Chaque Maillon est compos\u00e9 d'un \u00e9l\u00e9ment et d'une r\u00e9f\u00e9rence vers le maillon suivant.</p> <p>Il existe plusieurs fa\u00e7ons d'organiser ces maillons:</p> <p></p> <p>Il reste un bon exercice d'essayer de temps en temps d'impl\u00e9menter une autre version de liste cha\u00een\u00e9e.</p>"},{"location":"terminale/structures-de-donnees/listeschainees/#definition-de-la-classe-maillon","title":"D\u00e9finition de la classe <code>Maillon</code>","text":"<p>Un <code>Maillon</code> de la cha\u00eene poss\u00e8de une donn\u00e9e ainsi qu'une r\u00e9f\u00e9rence \u00e0 son maillon suivant. </p> <p>Un maillon a donc deux attributs :</p> <ol> <li><code>data</code> : La donn\u00e9e contenue dans le maillon (ici un entier).</li> <li><code>next</code> : Une r\u00e9f\u00e9rence vers le maillon suivant.</li> </ol> <pre><code>class Maillon:\n    def __init__(self, data: int, next: 'Maillon'):\n        self.data = data\n        self.next = next\n</code></pre>"},{"location":"terminale/structures-de-donnees/listeschainees/#probleme-initial","title":"Probl\u00e8me initial","text":"<p>Cette d\u00e9finition pr\u00e9sente un probl\u00e8me. Lorsqu\u2019on cr\u00e9e un maillon, on doit sp\u00e9cifier le maillon suivant (<code>next</code>), mais ce maillon suivant n\u2019existe pas encore \u00e0 ce stade de la cr\u00e9ation. Nous devons r\u00e9soudre ce probl\u00e8me pour pouvoir cr\u00e9er une cha\u00eene. </p> <pre><code>premier_maillon = Maillon(3, ...euh, j'ai pas de maillon...)\n</code></pre>"},{"location":"terminale/structures-de-donnees/listeschainees/#sentinelle","title":"Sentinelle","text":"<p>D\u00e9finition</p> <p>En informatique, une sentinelle est une valeur sp\u00e9ciale qui indique une ou plusieurs bornes d'une structure de donn\u00e9es. </p> <p>Appliqu\u00e9 \u00e0 notre cas, en consid\u00e9rant que la sentinelle et dans notre cha\u00eene, et qu'il n'y a que des maillons dans la cha\u00eene:</p> <ul> <li>La sentinelle est dans la cha\u00eene, donc la Sentinelle EST UN Maillon.</li> <li>Mais tout maillon a un prochain maillon.    </li> <li>Vu que la sentinelle est un Maillon, elle doit donc avoir un prochain maillon. </li> </ul> <p>Il semble que nous soyons de retour \u00e0 notre probl\u00e8me initial, mais en r\u00e9alit\u00e9, pas du tout. Pour r\u00e9soudre ce casse t\u00eate, On va lui dire que son prochain maillon, c'est initialement elle-m\u00eame.</p>"},{"location":"terminale/structures-de-donnees/listeschainees/#classe-sentinelle","title":"Classe <code>Sentinelle</code>","text":"<pre><code>class Sentinelle(Maillon):    # Une Sentinelle EST UN Maillon\n    def __init__(self):\n        super().__init__(0, self)   # Son prochain Maillon est initialement elle-m\u00eame\n</code></pre> <p>Cette classe h\u00e9rite de la classe <code>Maillon</code>.  Gr\u00e2ce \u00e0 l\u2019appel de <code>super()</code>, nous invoquons le constructeur de <code>Maillon</code> tout en assignant la sentinelle comme le maillon suivant d'elle-m\u00eame. Sa donn\u00e9e est arbitrairement mise \u00e0 0.</p> <p>Voici comment \u00e9voluera progressivement notre sentinelle (0) lorsqu'on ajoutera en t\u00eate les \u00e9l\u00e9ments 5, 3, puis 12:</p> <pre><code>---\ntitle: Maillon sentinelle\n---\ngraph LR\n0((0)) --&gt; 0</code></pre> <pre><code>---\ntitle: Ajout de la donn\u00e9e 5\n---\ngraph LR\n0((0)) --&gt; 5((5))\n5 --&gt; 0</code></pre> <pre><code>---\ntitle: Ajout de la donn\u00e9e 3\n---\ngraph LR\n0((0)) --&gt; 3((3))\n3 --&gt; 5((5))\n5 --&gt; 0</code></pre> <pre><code>---\ntitle: Ajout de la donn\u00e9e 12\n---\ngraph LR\n0((0)) --&gt; 12((12))\n12((12)) --&gt; 3((3))\n3 --&gt; 5((5))\n5 --&gt; 0</code></pre> <p>Sauf lorsque la liste est vide, le premier \u00e9l\u00e9ment de la liste est juste apr\u00e8s la sentinelle. Le dernier est juste avant.</p> <p>Note</p> <p>Il est important de r\u00e9aliser que l'attribut next est une r\u00e9f\u00e9rence \u00e0 un noeud. \"next, c'est la fl\u00e8che qui va vers\"</p>"},{"location":"terminale/structures-de-donnees/listeschainees/#definition-de-la-classe-liste","title":"D\u00e9finition de la classe <code>Liste</code>","text":"<p>Nous allons g\u00e9rer une liste \u00e0 partir de sa sentinelle. Nous assimilerons alors une liste \u00e0 sa sentinelle, en renommant tout simplement la classe sentinelle en Liste. On OUBLIE donc la classe sentinelle qui n'\u00e9tait l\u00e0 que pour la d\u00e9marche de r\u00e9flexion. La sentinelle d'une liste, c'est elle-m\u00eame en tant que Maillon.</p> <p>La classe <code>Liste</code> h\u00e9rite de <code>Maillon</code> et repr\u00e9sente notre liste cha\u00een\u00e9e compl\u00e8te.</p> <p>Lorsqu'elle est cr\u00e9\u00e9e (donc vide), c'est un maillon pointant sur lui-m\u00eame et qui repr\u00e9sentera toujours sa propre sentinelle.</p>"},{"location":"terminale/structures-de-donnees/listeschainees/#attributs-de-liste","title":"Attributs de <code>Liste</code>","text":"<ul> <li><code>__taille</code> : Stocke la taille de la liste.</li> <li><code>ajouter_tete</code> : Ajoute un nouvel \u00e9l\u00e9ment en t\u00eate de la liste.</li> </ul> <pre><code>class Liste(Maillon):\n    def __init__(self):\n        super().__init__(0, self)\n        self.__taille = 0\n</code></pre> <p>Dans une m\u00e9thode, self.next repr\u00e9sente toujours le premier Maillon, \u00e0 moins que la liste ne soit vide, auquel cas elle pointe sur elle m\u00eame.</p> <p>Ici, on choisit de plus de maintenir la taille du maillon en permanence. On marque cet attribut comme priv\u00e9 gr\u00e2ce au double underscore, afin de signifier qu'il ne doit pas \u00eatre modifi\u00e9 par les programmeurs qui utilisent cette classe.</p> <p>Vu que la r\u00e9cup\u00e9ration de la taille est une op\u00e9rationn courante, sa r\u00e9cup\u00e9ration sera donc en \\(\\mathcal{O}(1)\\), au lieu de \\(\\mathcal{O}(n)\\) s'il faut parcourir tous les maillons d'une liste de taille \\(n\\). Ceci se fait au prix de l'augmentation de la taille de stockage de la liste, mais on ne peut pas tout avoir.</p> <p>Tout ce qui suit est du l\u00e9go avec les maillons, il faut juste penser \u00e0 bien faire les op\u00e9rations dans l'ordre \u00e0 chaque fois. On proc\u00e8dera de mani\u00e8re imp\u00e9rative, avec des while.</p>"},{"location":"terminale/structures-de-donnees/listeschainees/#ajouter-un-element","title":"Ajouter un \u00e9l\u00e9ment","text":"<p>On veut ajouter un nouveau maillon portant la donn\u00e9e 12 en t\u00eate de liste:</p> <pre><code>---\ntitle: Liste initiale\n---\ngraph LR\n0((0)) --&gt; 3((3))\n3 --&gt; 5((5))\n5 --&gt; 0</code></pre> <ol> <li>On cr\u00e9\u00e9 un Maillon portant la donn\u00e9e 12 et pointant vers le Maillon suivant la sentinelle (donc suivant la liste elle meme, puisqu'elle est sa sentinelle) <pre><code>---\ntitle: \n---\ngraph LR\n0((0)) ====&gt; 3((3))\n12((12)) --&gt; 3\n3 --&gt; 5((5))\n5 --&gt; 0</code></pre></li> <li>La fl\u00e8che 0-&gt;3 repr\u00e9sente la r\u00e9f\u00e9rence self.next il faut la remplacer par une r\u00e9f\u00e9rence au maillon 12 <pre><code>---\ntitle: \n---\ngraph LR\n0((0)) ==&gt; 12((12))\n12 --&gt; 3((3))\n3 --&gt; 5((5))\n5 --&gt; 0</code></pre></li> <li>Vu qu'on a choisi de maintenir la taille, il ne faut pas oublier de lui ajouter 1</li> </ol> <p>La m\u00e9thode <code>ajouter_tete</code> \u00e9crite en cons\u00e9quence ins\u00e8re un nouveau maillon juste apr\u00e8s la sentinelle.</p> <pre><code>def ajouter_tete(self, e: int):\n    m = Maillon(e, self.next)     # 1\n    self.next = m                 # 2\n    self.__taille += 1            # 3\n</code></pre> <p>L'approche propos\u00e9e permet de simplifier le code des m\u00e9thodes. En effet, \u00e7a marche ind\u00e9pendamment du fait que la liste soit vide ou pas.</p> <p><pre><code>---\ntitle: Liste initiale\n---\ngraph RL\n0((0)) --&gt; 0</code></pre> 1. On cr\u00e9\u00e9 un Maillon portant la donn\u00e9e 12 et pointant vers le Maillon suivant la sentinelle  <pre><code>---\ntitle: \n---\ngraph RL\n0((0)) ==&gt; 0\n12((12)) --&gt; 0</code></pre></p> <ol> <li>La fl\u00e8che en gras repr\u00e9sente la r\u00e9f\u00e9rence self.next il faut la remplacer par une r\u00e9f\u00e9rence au maillon 12</li> </ol> <pre><code>---\ntitle: \n---\ngraph LR\n0((0)) ==&gt; 12((12))\n12 --&gt; 0</code></pre>"},{"location":"terminale/structures-de-donnees/listeschainees/#methodes-de-depart","title":"M\u00e9thodes de d\u00e9part","text":"<p>Afin de vous lancer sur le parcours de cette structure, je vous donne votre deuxi\u00e8me m\u00e9thode, la m\u00e9thode <code>est_vide</code>.</p> <pre><code>def est_vide(self) -&gt; bool:\n    \"\"\"\n    Renvoie True si la liste est vide, False sinon.\n    \"\"\"\n    return self.next is self\n</code></pre> <p>ainsi que la m\u00e9thode longueur, qui renvoie la taille calcul\u00e9e de la liste.</p> <p>A l'origine, le maillon courant est le premier maillon de la liste, ou elle m\u00eame si la liste est vide. Tant que courant n'est pas self (sinon \u00e7a veut dire qu'on est revenu \u00e0 la sentinelle), on incremente l'accumulateur et on passe au maillon suivant.</p> <pre><code>def longueur(self) -&gt; int:\n    \"\"\"\n    Renvoie la taille calcul\u00e9e de la liste.\n    \"\"\"\n    acc = 0\n    courant = self.next\n    while courant is not self:\n        acc += 1\n        courant = courant.next\n    return acc\n</code></pre> <p>Tip</p> <p>l'op\u00e9rateur is sert \u00e0 comparer les objets, non pas en termes de valeur, mais en termes d'adresse m\u00e9moire.</p> <p>Question</p> <p>A vous maintenant de recr\u00e9er les fonctions que vous avez vues en programmation fonctionnelles en tant que m\u00e9thodes de la classe liste en commen\u00e7ant par la m\u00e9thode ajouter_fin. Vous n'utiliserez pas la r\u00e9cursivit\u00e9.</p> <p>Tout comme nous l'avons fait avec OCaml en programmation fonctionnelle, compl\u00e9tez aussi le programme en C++.</p>"}]}