{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"","text":"<p>Hal Abelson, 1986</p> <p>Computer science is not really about computers -- and it's not about computers in the same sense that physics is not really about particle accelerators, and biology is not about microscopes and Petri dishes...and geometry isn't really about using surveying instruments. Now the reason that we think computer science is about computers is pretty much the same reason that the Egyptians thought geometry was about surveying instruments: when some field is just getting started and you don't really understand it very well, it's very easy to confuse the essence of what you're doing with the tools that you use.</p>"},{"location":"les-outils/","title":"Outils pour d\u00e9velopper","text":"<p>Cette s\u00e9lection d'outils a \u00e9t\u00e9 choisie pour \u00eatre \u00e0 la fois r\u00e9aliste et abordable. </p> <p>L'installation propos\u00e9e se fait dans l'invite de commandes windows gr\u00e2ce \u00e0 l'outil winget qui est d\u00e9j\u00e0 pr\u00e9sent.</p> <p>Il aussi est tout \u00e0 fait possible d'installer ces outils en les t\u00e9l\u00e9chargeant et en ex\u00e9cutant leur programme d'installation. </p>"},{"location":"les-outils/#vs-code","title":"VS Code","text":"<p>Le couteau suisse de la programmation.</p> <pre><code>    winget install Microsoft.VisualStudioCode\n</code></pre>"},{"location":"les-outils/#miniforge","title":"Miniforge","text":"<p>Si python est install\u00e9 sur votre machine, d\u00e9sinstallez-le. Nous allons utiliser ce gestionnaire d'environnements \u00e0 la place.</p> <pre><code>    winget install CondaForge.Miniforge3\n</code></pre>"},{"location":"les-outils/#msys2","title":"MSYS2","text":"<p>Cet outil simule l'environnement linux et vous permettra m\u00eame de programmer dans d'autres langages de programmation <pre><code>    winget install MSYS2.MSYS2\n</code></pre></p>"},{"location":"les-outils/#dbeaver","title":"DBeaver","text":"<p>DBeaver permet d'interagir avec des syst\u00e8mes de gestion de bases de donn\u00e9es.</p> <pre><code>    winget install dbeaver.dbeaver\n</code></pre>"},{"location":"les-outils/setup-vscode/","title":"Setup vscode","text":""},{"location":"les-outils/setup-vscode/#setup-de-vscode","title":"Setup de VSCode","text":"<p>Un IDE (environnement de d\u00e9veloppement int\u00e9gr\u00e9) est un logiciel qui aide les programmeurs \u00e0 d\u00e9velopper.</p> <p>VSCode est de loin l'IDE le plus utilis\u00e9 (73,6% des d\u00e9veloppeurs et 77% des \u00e9tudiants du monde entier en 2024 d'apr\u00e8s la c\u00e9l\u00e8bre enqu\u00eate annuelle de stackoverflow)</p>"},{"location":"les-outils/setup-vscode/#pre-requis","title":"Pr\u00e9-requis","text":"<p>Vous avez install\u00e9 les outils recommand\u00e9s avec winget</p>"},{"location":"les-outils/setup-vscode/#configurer-vscode-pour-developper-en-python","title":"Configurer VSCode pour d\u00e9velopper en python.","text":"<p>Cliquez sur l'ic\u00f4ne des extensions </p> <p>Recherchez <code>nsi-dev</code> dans la petite barre de recherche. Cliquez sur le petit bouton bleu \"install\"</p> <p></p> <p>Ca-y-est, c'est configur\u00e9.</p>"},{"location":"les-outils/setup-vscode/#comment-travailler-avec-vscode","title":"Comment travailler avec VSCode?","text":"<p>Attention, sinon \u00e7a ne fonctionnera pas</p> <p>Dans VSCode, on ouvre TOUJOURS un r\u00e9pertoire, JAMAIS un fichier.</p> <p>File &gt; Open Folder</p> <p>Quand vous rouvrez VSCode, vous retrouvez tout comme vous l'avez laiss\u00e9 la derni\u00e8re fois que vous l'avez ouvert.</p> <p>Lorsque vous ouvrez un r\u00e9pertoire pour la premi\u00e8re fois, VSCode vous demande s'il peut avoir confiance en ce r\u00e9pertoire. Cochez la case et cliquez sur le bouton bleu, \"Yes i trust\". Il ne vous le redemandera plus pour ce r\u00e9pertoire ni pour le r\u00e9pertoire parent.</p> <p></p>"},{"location":"les-outils/setup-vscode/#gerer-les-fichiers-du-repertoire","title":"G\u00e9rer les fichiers du r\u00e9pertoire.","text":"<p>Vous pouvez directement cr\u00e9er des fichiers et des dossiers dans L'explorer de VSCode \u00e0 l'aide de ces boutons </p>"},{"location":"les-outils/setup-vscode/#gerer-vos-environnements-python","title":"G\u00e9rer vos environnements Python","text":"<p>L'extension NSI-DEV vous fournit une mani\u00e8re simplifi\u00e9e de g\u00e9rer vos environnements python. Il ne faut pas que vous ayez install\u00e9 python sur votre machine, c'est miniforge qui va se charger de faire coexister une ou pusieurs installations de python.</p> <p></p> <p>Sur l'image ci-dessus, on voit 2 environnements python utilisables que j'ai appel\u00e9 py312 (pour la version 12 de python) et py313 (pour la version 13 de python).</p> <p>Lorsque vous l'utiliserez pour la premi\u00e8re fois, il n'y en aura pas, il faudra en cr\u00e9er un en appuyant sur le bouton +</p> <p>On vous demandera alors de valider une version de python pour votre environnement, puis un nom.</p> <p>A l'heure o\u00f9 j'\u00e9cris ces lignes, je vous conseille de demander la version 3.13 et d'appeler cet environnement py313.</p> <p>Apr\u00e8s quelques instants (\u00e7a peut \u00eatre un peu long), vous verrez appara\u00eetre votre environnement.</p>"},{"location":"les-outils/setup-vscode/#programmer-en-python","title":"Programmer en Python","text":"<p>VSCode doit savoir quel environnement python utiliser pour ex\u00e9cuter vos programme, \u00e9tant donn\u00e9 qu'il peut en exister plusieurs.</p> <p>Lorsque vous avez un fichier python ouvert, il faut cliquer sur la barre d'\u00e9tat en bas \u00e0 droite, \u00e0 l'emplacement o\u00f9 vous voyez sur l'image 3.12.7('py312': conda). Une liste d\u00e9roulante va alors s'afficher o\u00f9 vous pourrez s\u00e9lectionner votre environnement. Si c'est la premi\u00e8re fois que vous ouvrez VS code, vous verrez peut-\u00eatre un bouton \"Select interpreter\" \u00e0 la place.</p> <p></p> <p>Jamais dans base</p> <p>Il existe un environnement par d\u00e9faut qui s'appelle base. L'extension le masque volontairement. N'utilisez jamais cet environnement.</p>"},{"location":"les-outils/setup-vscode/#ajouter-des-modules-python","title":"Ajouter des modules python","text":"<p>Lorsque vous voulez installer un module python, il faut ouvrir un terminal configur\u00e9 pour votre environnement. Ca se fait directement en appuyant sur le petit cube de l'image ci-dessous. (La poubelle vous permet de supprimer l'environnement)</p> <p></p> <p>Un terminal MSYS2 appara\u00eet.</p> <p>Imaginons que vous vouliez installer le module pyxel, vous pouvez alors y ex\u00e9cuter cette commande:</p> <p><code>pip install pyxel</code></p> <p>Ca y est, vous pouvez maintenant \u00e9crire <code>import pyxel</code> dans vos programmes.</p> <p>Au quotidien</p> <p>Une fois que tout \u00e7a est fait, au quotidien, il faut juste s'assurer qu'on est sur le bon environnement en bas \u00e0 droite de VSCode, \u00e9crire ses programmes et les ex\u00e9cuter avec le bouton play en haut \u00e0 droite de l'\u00e9cran.</p>"},{"location":"terminale/bdd/","title":"Base de donn\u00e9es et SGBD","text":"<p>Une base de donn\u00e9es est un ensemble de donn\u00e9es structur\u00e9es.</p> <p>Un syst\u00e8me de gestion de bases de donn\u00e9es (SGBD) est un outil permattant de stocker et d'interagir avec des bases de donn\u00e9es.</p> <p>Il existe plusieurs mod\u00e8les pour stocker les donn\u00e9es dans une base de donn\u00e9es.</p> <p>Nous allons nous int\u00e9resser au mod\u00e8le dit relationnel.</p> <p>Nous utiliserons le SGBD Postgresql</p>"},{"location":"terminale/bdd/#le-modele-relationnel","title":"Le mod\u00e8le relationnel","text":"<p>Nous travaillerons avec cette base de donn\u00e9es.</p> <p></p>"},{"location":"terminale/bdd/#algebre-relationnelle","title":"Alg\u00e8bre relationnelle","text":"<p>Ici, nous allons d\u00e9finir quelques termes de l'alg\u00e8bre relationnelle.</p> <p>Relation</p> <p>Une relation est un ensemble fini d'entit\u00e9s relevant d'un m\u00eame concept. les entit\u00e9s sont d\u00e9crites par certaines de leur caract\u00e9ristiques. Une relation a un nom par lequel elle est identifi\u00e9e.</p> <p>Sur le dessin de la base de donn\u00e9es, Chaque \"bo\u00eete\" est uue relation. Par exemple, on a la relation Artiste.</p> <p>Attributs</p> <p>Toute caract\u00e9ristique d\u00e9crivant les entit\u00e9s de la relation est appel\u00e9e attribut de la relation.</p> <p>Par exemple, la relation Artiste a l'attribut Name.</p> <p>Domaine d'un attribut</p> <p>Chaque attribut a un domaine. Il s'agit de l'ensemble des valeurs que peut prendre l'attribut. Le domaine de l'attribut Name de la relation Artiste est \"cha\u00eene de caract\u00e8res\"</p>"},{"location":"terminale/langages/","title":"Paradigmes de programmation","text":"<p>Il est inutile d'essayer de comprendre ces d\u00e9finitions avant d'avoir pratiqu\u00e9 l'approche mentale des paradigmes \u00e9voqu\u00e9s.</p> <p>Qu'est-ce qu'un paradigme de programmation?</p> <p>Un paradigme de programmation est un mod\u00e8le ou une approche particuli\u00e8re utilis\u00e9e pour \u00e9crire et structurer des programmes informatiques. Il d\u00e9finit un ensemble de concepts, de m\u00e9thodes et de styles qui influencent la mani\u00e8re dont les programmeurs organisent leur code et pensent \u00e0 la r\u00e9solution de probl\u00e8mes. Les paradigmes de programmation fournissent diff\u00e9rents outils mentaux pour exprimer des algorithmes et des structures de donn\u00e9es.</p> <p>Le Paradigme Fonctionnel</p> <p>Cette d\u00e9finition s'appuie sur le travail qui a \u00e9t\u00e9 fait sur les listes chain\u00e9es, afin de pouvoir vous la repr\u00e9senter plus facilement.</p> <p>Le paradigme fonctionnel se distingue principalement par :</p> <ul> <li>L'immuabilit\u00e9 des structures de donn\u00e9es : ici, chaque fonction renvoie une nouvelle liste, sans affecter l'originale. Lorsqu'on insere dans une liste, il faut comprendre \"renvoyer une nouvelle liste dans laquelle on a ins\u00e9r\u00e9\"</li> <li>L'usage intensif de la r\u00e9cursivit\u00e9 : au lieu de boucles, les fonctions comme <code>taille</code>, <code>somme</code>, ou <code>inverser</code> utiliseront la r\u00e9cursivit\u00e9 pour recueillir des informations sur la liste.</li> <li>L'importance des fonctions pures : chaque fonction renvoie toujours le m\u00eame r\u00e9sultat pour les m\u00eames arguments, sans effets de bord.</li> </ul> <p>Ce style de programmation garantit des comportements pr\u00e9visibles et s\u00fbrs, ce qui est particuli\u00e8rement utile en programmation concurrente et dans les applications o\u00f9 la fiabilit\u00e9 est critique.</p> <p>Le paradigme orient\u00e9 objet</p> <p>Ce paradigme est bas\u00e9 sur la notion d'objets, qui sont des instances de classes et encapsulent des donn\u00e9es (attributs) et des comportements (m\u00e9thodes).</p> <p>Ce paradigme est constitu\u00e9 de 5 piliers:</p> <ol> <li>Objet (et classe)</li> <li>Encapsulation</li> <li>Abstraction</li> <li>Polymorphisme</li> <li>H\u00e9ritage</li> </ol> <p>Nous insisterons sur le pilier 1. Nous parlerons un peu du pilier 2, mais python ne l'impl\u00e9mente pas vraiment. Nous verrons des usages simples du 5\u00e8me pilier, surtout \u00e0 des fins de simplification de code, afin de pouvoir ne pas crouler sous du code redondant.</p> <p>Il existe un malentendu majeur autour de la POO, li\u00e9 \u00e0 la mani\u00e8re dont le concept d'objet a \u00e9t\u00e9 interpr\u00e9t\u00e9 et utilis\u00e9. \u00c0 l'origine, des langages comme Simula, qui est souvent consid\u00e9r\u00e9 comme l'un des premiers langages orient\u00e9s objet, voyaient les objets comme une repr\u00e9sentation de concepts du monde r\u00e9el, avec des comportements propres. Cependant, avec la popularisation de la POO (notamment gr\u00e2ce \u00e0 C++ et Java), beaucoup de d\u00e9veloppeurs ont commenc\u00e9 \u00e0 concevoir des objets simplement comme des structures de donn\u00e9es am\u00e9lior\u00e9es. Ca a conduit \u00e0 des critiques sur le fait que la v\u00e9ritable philosophie de la POO, telle qu'envisag\u00e9e par ses cr\u00e9ateurs, avait \u00e9t\u00e9 dilu\u00e9e ou mal comprise.</p> <p>Alan Kay, qui a invent\u00e9 le terme \"orient\u00e9 objet\" (notamment avec Smalltalk), a exprim\u00e9 sa frustration face \u00e0 la mani\u00e8re dont ce paradigme a \u00e9volu\u00e9. Il a pr\u00e9cis\u00e9 que pour lui, la POO ne concernait pas simplement l'encapsulation ou l'h\u00e9ritage, mais plut\u00f4t la communication entre objets via des messages. Cette vision a souvent \u00e9t\u00e9 r\u00e9duite \u00e0 une simple organisation de donn\u00e9es et de m\u00e9thodes dans des classes, une simplification que Kay a critiqu\u00e9e. Il s\u2019est m\u00eame distanci\u00e9 de la mani\u00e8re dont le paradigme a \u00e9t\u00e9 interpr\u00e9t\u00e9 par des langages comme C++ ou Java.</p> <p>Ce malentendu est int\u00e9ressant car il montre comment une id\u00e9e technique peut \u00e9voluer de mani\u00e8re inattendue. Ce que nous cr\u00e9ons et livrons au monde nous appartient-il \u00e0 jamais?</p> <p>J'admets que nous touchons \u00e0 ce malentendu dans l'utilisation de la POO qui est faite dans l'impl\u00e9mentation mutable des structures de donn\u00e9es que nous avons rencontr\u00e9. C'est surtout unn pr\u00e9texte pour que vous manipuliez des objets. Cependant, elle trouve tout son sens dans le projet space invader, o\u00f9 des objets sont bien en communication.</p> <p>Meilleur paradigme?</p> <p>Au del\u00e0 du purisme, la plupart des nouveaux langages impl\u00e9mentent divers concepts provenant de multiples paradigmes. Ils sont dits multi-paradigmes. Pour la simple et bonne raison que ce qui est facile \u00e0 penser dans un paradigme l'est parfois moins dans un autre. Il convient de ne pas se r\u00e9duire \u00e0 une guerre inter-paradigme. La question \"Quel est le meilleur paradigme?\" n'a pas de sens lorsqu'on s'attaque \u00e0 des probl\u00e8mes r\u00e9els. La r\u00e9elle richesse provient de la connaissance initiale de ces paradigme et de savoir en faire la part des choses ind\u00e9pendament d'une suppos\u00e9e meilleure fa\u00e7on de penser. </p> <p>Les phrases suivantes sont de meilleures questions \u00e0 se poser: - \"Dans quel paradigme vais-je me sentir plus \u00e0 l'aise pour penser mon probl\u00e8me?\".  - \"Dans quel paradigme est-il raisonable de r\u00e9soudre mon probl\u00e8me \u00e9tant donn\u00e9 l'\u00e9tat du march\u00e9 des d\u00e9veloppeurs?\" - \"Dans quel paradigme est-il raisonable de r\u00e9soudre mon probl\u00e8me \u00e9tant donn\u00e9es les comp\u00e9tences de mes d\u00e9veloppeurs?\"</p>"},{"location":"terminale/langages/calculabilite/","title":"Calculabilit\u00e9 et D\u00e9cidabilit\u00e9","text":""},{"location":"terminale/langages/calculabilite/#un-programme-est-une-donnee","title":"Un programme est une donn\u00e9e","text":"<p>Exemple 1</p> <p>Un exemple bien concret pour s'en rendre compte est le processus de compilation d'un programme.</p> <p>Vous avez ex\u00e9cut\u00e9 cette commande pour compiler du code C++:</p> <pre><code>g++ -o liste liste.cpp\n</code></pre> <p>Le compilateur g++ est un programme charg\u00e9 de traduire votre proramme \u00e9crit en C++ en programme \u00e9crit en langage machine.</p> <p>les programmes prennent en entr\u00e9e des donn\u00e9es. Ici, le programme g++ prend votre programme C++ en entr\u00e9e. Votre programme C++ est donc une donn\u00e9e.</p> <p>Le programme <code>liste</code> g\u00e9n\u00e9r\u00e9 en langage machine est lui m\u00eame une donn\u00e9e que va lire le CPU pour l'ex\u00e9cuter.</p> <p>Plus g\u00e9n\u00e9ralement, on peut consid\u00e9rer que toute information est une donn\u00e9e.</p> <p>Exemple 2</p> <p>Soit une liste de points, ainsi que la fonction qui renvoie la distance \u00e0 l'origine d'un point.</p> <pre><code>points = [(8, 6), (0, 0), (-4, 9)]\n\ndef distance_org(p: tuple[float, float]):\n    return (x**2 + y**2)**(0.5)\n</code></pre> <p>Consid\u00e9rons une fonction comme un sous-programme, donc un programme.</p> <p>Vous avez d\u00e9j\u00e0 vu qu'en python, on peut trier ces points en fonction de leur distance \u00e0 l'origine gr\u00e2ce \u00e0 l'appel:</p> <pre><code>points_tries = sorted(points, key=distance_org)\n</code></pre> <p>Ici, le programme sorted prend bien en param\u00e8tre le programme distance_org.</p>"},{"location":"terminale/langages/calculabilite/#definitions","title":"D\u00e9finitions","text":"<p>Calculabilit\u00e9</p> <p>Un probl\u00e8me est calculable s'il existe un algorithme qui le r\u00e9soud en temps fini pour toutes les entr\u00e9es possibles.</p> <p>D\u00e9cidabilit\u00e9</p> <p>La d\u00e9cidabilit\u00e9 est un sous-ensemble de la calculabilit\u00e9. La d\u00e9cidabilit\u00e9 ne s'int\u00e9resse qu'aux probl\u00e8mes dont la r\u00e9ponse est oui ou non.</p>"},{"location":"terminale/langages/calculabilite/#machine-de-turing","title":"Machine de Turing","text":"<p>Une machine de turing est un concept abstrait. Il existe une d\u00e9finition tr\u00e8s formelle de ce qu'est une machine de Turing, mais \u00e7a n'est pas l'objectif ici. On peut consid\u00e9rer une machine de Turing comme un automate poss\u00e9dant des \u00e9tats.</p> <p>Site de simulation</p> <p>Elle est constitu\u00e9e d'un ruban infini comportant des cases.</p>"},{"location":"terminale/langages/calculabilite/#la-calculabilite-ne-depend-pas-du-langage","title":"La calculabilit\u00e9 ne d\u00e9pend pas du langage","text":"<p>Il faut bien comprendre que la calculabilit\u00e9 ne d\u00e9pend pas du langage qu'on veut utiliser, et pour cause, tous les langages de programmation turing-complets sont th\u00e9oriquement \u00e9quivalents.</p> <p>Un langage de programmation est dit Turing-complet s'il peut exprimer au moins ce qu'une machine de Turing exprime.</p> <p>Etant donn\u00e9 qu'une machine de Turing universelle peut calculer tout ce qui est calculable, le langage le pourra aussi.</p>"},{"location":"terminale/langages/poo/","title":"Paradigme orient\u00e9 objets","text":"<p>D\u00e9finition</p> <p>En programmation orient\u00e9e objet, un programme est un ensemble d'entit\u00e9s qui interagissent. Ces entit\u00e9s sont appel\u00e9es des objets. Un objet poss\u00e8de un \u00e9tat (les donn\u00e9es qui le caract\u00e9risent) et des comportements (ce qu'il sait faire).</p> <p>L'\u00e9tat d'un objet est repr\u00e9sent\u00e9 par l'ensemble de ses attributs Les comportements d'un objet sont repr\u00e9sent\u00e9s par l'ensemble de ses m\u00e9thodes</p> <p>Une classe permet de d\u00e9finir une famille d'objets. A partir d'une classe, on peut cr\u00e9er autant d'objets que l'on veut. Ce sont des exemplaires, des instances de la classe.</p>"},{"location":"terminale/langages/poo/#classe-animal","title":"Classe <code>Animal</code>","text":"<p>Voici un exemple basique d'une classe en Python qui mod\u00e9lise la phrase \"Un animal porte un nom, et il sait parler.\"</p> <pre><code>class Animal:\n    def __init__(self, nom: str):\n        self.nom = nom  # Attribut d'instance\n\n    def parler(self):   # M\u00e9thode d'instance\n        print(f\"{self.nom} fait du bruit.\")\n\nx = Animal(\"Bidule\")   # cr\u00e9ation d'une instance d'Animal portant le nom bidule\nprint(x.nom)           # On acc\u00e8de aux attributs de l'instance avec le point. Affiche: Bidule\n\nx.nom = \"Truc\"         # Mutabilit\u00e9 -&gt; On peut modifier les attributs de l'instance de la m\u00eame mani\u00e8re \nx.parler()  # On acc\u00e8de aussi aux m\u00e9thodes d'instance par le point. Affiche: Truc fait du bruit.\n</code></pre> <p>Bidule  Truc fait du bruit.</p> <p>Dans cet exemple :</p> <ul> <li><code>__init__</code> : Cette m\u00e9thode sera automatiquement charg\u00e9e d'initialiser les attributs de l'objet en cours d'instanciation. On le consid\u00e8re comme le constructeur de la classe.</li> <li><code>self</code> : Repr\u00e9sente l'instance actuelle de la classe. Il permet d'acc\u00e9der aux attributs et m\u00e9thodes de l'objet lui-m\u00eame.</li> </ul> <p>Constructeur</p> <p>Un constructeur est une fonction particuli\u00e8re appel\u00e9e lors de l'instanciation. Elle permet d'allouer la m\u00e9moire n\u00e9cessaire \u00e0 l'objet et d'initialiser ses attributs.</p> <p>Abus de langage</p> <p>Il est tr\u00e8s (trop) courant de consid\u00e9rer <code>__init__</code> comme le constructeur en Python, car il initialise l'objet apr\u00e8s sa cr\u00e9ation. Cependant, il ne fait que la moiti\u00e9 du travail. la m\u00e9thode charg\u00e9e de cr\u00e9er l'instance est le dunder <code>__new__</code>. La preuve en est que <code>__init__</code> prend self en param\u00e8tre, c'est donc bien que self existe d\u00e9j\u00e0 avant l'invocation d'<code>__init__</code>. Le constructeur est en r\u00e9alit\u00e9 le couple form\u00e9 par les m\u00e9thodes <code>__new__</code> et <code>__init__</code>.</p> <p>Voici une portion de code pour se rendre compte de ce qu'il se passe r\u00e9ellement:</p> <pre><code>class MaClasse:\n    def __new__(cls, *args, **kwargs):\n        '''Appel de __new__ pour cr\u00e9er une nouvelle instance de la classe'''\n        print(\"Appel de __new__ : Cr\u00e9ation de l'instance\")\n        instance = super(MaClasse, cls).__new__(cls)\n        return instance\n\n    def __init__(self, valeur):\n        '''Appel de __init__ pour initialiser l'instance avec les attributs'''\n        print(\"Appel de __init__ : Initialisation de l'instance\")\n        self.valeur = valeur\n\ndef afficher_valeur(self):\n    print(f\"Valeur : {self.valeur}\")\n</code></pre> <p>On consid\u00e8rera malgr\u00e9 tout que <code>__init__</code> est le constructeur, car si on vous pose la question, c'est la r\u00e9ponse attendue.</p>"},{"location":"terminale/langages/poo/#interactions-entre-objets","title":"Interactions entre objets","text":"<p>Rajoutons la phrase \"Un Humain porte un nom, un prenom et peut adopter des animaux domestiques. On peut afficher la liste des animaux d'un Humain\".</p> <pre><code>class Humain:\n    def __init__(self, prenom: str, nom: str):\n        self.nom = nom\n        self.prenom = prenom\n        self.animaux: list[Animal] = []\n\n    def adopte(self, a: Animal):\n        self.animaux.append(a)\n\n    def afficher_animaux(self):\n        for a in self.animaux:\n            print(a.nom)\n\n\nx = Humain(\"Peter\", \"Quill\")\ny = Animal(\"Rocket\")\nx.adopte(y)\nx.afficher_animaux()   # Affiche Rocket\n</code></pre> <p>Rocket</p> <p>Ici, on a choisi que l'humain porte la liste de ses animaux. On aurait pu \u00e0 la place ajouter un attribut propri\u00e9taire \u00e0 la classe Animal pour dire qu'un animal est la propri\u00e9t\u00e9 d'un humain particulier. Mais on aurait perdu la possibilit\u00e9 d'afficher les animaux d'un humain sans disposer de la liste de tous les animaux. Il faut souvent choisir quelle classe est le \"chef d'orchestre\" en fonction du probl\u00e8me qu'on a \u00e0 traiter.</p> <p>H\u00e9ritage</p> <p>L\u2019h\u00e9ritage est un autre concept fondamental en POO. Il permet \u00e0 une classe (dite classe d\u00e9riv\u00e9e, ou sous classe) d\u2019h\u00e9riter des attributs et m\u00e9thodes d\u2019une autre classe (dite classe de base, ou super classe).</p>"},{"location":"terminale/langages/poo/#exemple-classe-ratonlaveur-heritant-de-animal","title":"Exemple : Classe <code>RatonLaveur</code> h\u00e9ritant de <code>Animal</code>","text":"<p>Nous pourrions ajouter un attribut <code>espece</code> \u00e0 la classe Animal pour les distinguer, mais ici, pour introduire le concept, nous allons choisir cette phrase en Fran\u00e7ais: \"Un RatonLaveur EST UN Animal\"</p> <pre><code>class RatonLaveur(Animal):\n\n    def __init__(self, nom: str):\n        super().__init__(nom) # cette ligne appelle le constructeur de la super classe\n\n    def parler(self):\n        print(f\"{self.nom} \u00e9met des grognements.\")\n</code></pre> <p>La classe <code>RatonLaveur</code> h\u00e9rite de <code>Animal</code> mais peut red\u00e9finir certaines m\u00e9thodes (ici, <code>parler</code>), ou encore en cr\u00e9er d'autres. Ainsi, un objet de la classe <code>Chien</code> pourra aboyer au lieu de \"faire du bruit\". Un Raton laveur pourra \u00e9mettre das grognements</p> <p>En fran\u00e7ais, on peut tr\u00e8s bien dire d\u00e8s lors \"Un Chien EST UN Animal\"</p> <p>Programme exemple: <pre><code>x = Animal(\"Animal quelconque\")\nx.parler()\ny = RatonLaveur(\"Rocket\")\ny.parler()\nprint(isinstance(x, Animal), isinstance(x, RatonLaveur))\nprint(isinstance(y, Animal), isinstance(y, RatonLaveur))\n</code></pre> Affichage: <pre><code>Animal quelconque fait du bruit\nRocket \u00e9met des grognements\nTrue False\nTrue True\n</code></pre></p> <p>La fonction <code>isinstance</code> sert \u00e0 savoir si un objet est une instance d'une classe. Si on a besoin de l'utiliser, c'est presque toujours du \u00e0 un d\u00e9faut de conception. On n'aura pas besoin de l'utiliser.</p> <p>Mod\u00e9lisation objet</p> <p>Une voiture a une marque, un mod\u00e8le, un prix, un nombre de kilom\u00e8tres parcourus, une quantite de carburant dans le r\u00e9servoir (en litres), et une consommation (litres au 100). Une voiture peut rouler sur une certaine distance. \u00c0 chaque fois qu'elle roule, le kilom\u00e9trage augmente, et le carburant diminue. Le r\u00e9servoir de la voiture a une capacit\u00e9 maximale. On peut afficher les caract\u00e9ristiques de la voiture.</p> <p>Un Humain a une quantit\u00e9 d'argent disponible sur son compte en banque. Un Humain peut acheter des voitures. Un Humain peut faire des trajets avec une voiture pour un certain nombre de kilom\u00e8tres. Avant de commencer un trajet, l'humain v\u00e9rifie s'il a assez d'essence, sinon, il va \u00e0 la station service faire le plein. Lorsqu'un humain fait le plein de sa voiture, son compte en banque diminue. </p> <p>Ecrivez une classe Humain et une classe Voiture compatibles avec cette description. Instanciez ensuite Humain et Voiture afin de tester des scenarios d'utilisation.</p>"},{"location":"terminale/projets/space_invader/","title":"Projet space invader","text":"<p>L'objectif est de cr\u00e9er un \"space invader\" like  (original: https://freeinvaders.org )</p> <p>Nous allons utiliser le retro game engine pyxel (<code>pip install pyxel</code>)</p> <p>Propret\u00e9</p> <p>La tr\u00e8s grande majorit\u00e9 des exemples sur internet de jeux pyxels ne sont pas propres du tout. Merci de ne pas vous en inspirer afin de ne pas prendre de mauvaises habitudes. A ce titre, c'est la raison pour laquelle je vous guide afin de le faire proprement, dans la limite du raisonable.</p> <p>Voici la mod\u00e9lisation de ce space invader o\u00f9 nous utilisons l'h\u00e9ritage \u00e0 fin de simplification (Je consid\u00e8re l'h\u00e9ritage comme faisant partie de la zone proximale de d\u00e9veloppement). Sans h\u00e9ritage, il faudrait g\u00e9rer dans toutes les classes tous les attributs et m\u00e9thodes d'EltGraphique. Il reste toujours possible de les adapter dans les classes filles.</p> <pre><code>classDiagram\n    EltGraphique &lt;|-- Vaisseau\n    EltGraphique &lt;|-- Ennemi\n    EltGraphique &lt;|-- Missile\n    EltGraphique : +float x\n    EltGraphique : +float y\n    EltGraphique : +float dx\n    EltGraphique : +float dy\n    EltGraphique : +int height\n    EltGraphique : +int width\n    EltGraphique : +int u\n    EltGraphique : +int v\n    EltGraphique : +draw()\n    EltGraphique : +update()\n    EltGraphique : +bool collision(EltGraphique)\n\n    class Jeu{\n        +int score\n        +draw()\n        +update()\n        -check_collisions()\n    }\n    class Ennemi{\n        +tirer()\n    }\n    class Vaisseau{\n        +tirer()\n    }\n    Jeu \"1\"--\"1\" Vaisseau\n    Jeu \"1\"--\"*\" Ennemi\n    Ennemi \"1\"--\"*\" Missile\n    Vaisseau \"1\"--\"*\" Missile</code></pre>"},{"location":"terminale/projets/space_invader/#element-graphique","title":"Element graphique","text":"<p>Un El\u00e9ment Graphique est quelque chose qui peut appara\u00eetre \u00e0 l'\u00e9cran.</p> <ul> <li>Il a une position x, y dans le plan.</li> <li>Il a un vecteur de d\u00e9placement dx, dy duquel il se d\u00e9place en permanence</li> <li>Il a une coordonn\u00e9e dans le fichier de ressource pour aller y rechercher son image.</li> <li>Il a une largeur <code>width</code> et une hauteur <code>height</code>.</li> <li>Il sait se dessiner \u00e0 l'\u00e9cran.</li> <li>Il sait se mettre \u00e0 jour en fonction de son vecteur directeur.</li> <li>Il sait dire s'il est en collision avec un autre \u00e9l\u00e9ment graphique (voir fonction donn\u00e9e plus bas).</li> </ul> <p>Par exemple, Un Vaisseau EST UN Element Graphique.</p> <p>Danger</p> <p>Les vecteurs de position et de d\u00e9placement seront g\u00e9r\u00e9s en float. Par contre l'affichage attendra des ints. C'est \u00e9quivalent \u00e0 dire qu'on r\u00e9fl\u00e9chit au mouvement dans \\(\\mathbb{R^2}\\) mais qu'on affiche dans \\(\\mathbb{Z^2}\\)</p>"},{"location":"terminale/projets/space_invader/#le-jeu","title":"Le Jeu","text":"<p>Le jeu est le chef d'orchestre.</p> <p>il g\u00e8re:</p> <ul> <li>Un Vaisseau </li> <li>Des Ennemis</li> <li>Un Score</li> <li>Les \u00e9v\u00e8nements utilisateurs dans sa m\u00e9thode update</li> </ul> <p>Le Jeu doit pouvoir spawner un ennemi \u00e0 une certaine position pour un certain vecteur de d\u00e9placement. Le jeu sait se dessiner et demander \u00e0 ses vaisseaux et \u00e0 ses ennemis de se mettre \u00e0 jour et de se dessiner.</p> <p>Le jeu sait tester toutes les collisions et agir en cons\u00e9quence.</p>"},{"location":"terminale/projets/space_invader/#le-vaisseau","title":"Le Vaisseau","text":"<p>Un vaisseau doit pouvoir tirer un nouveau missile. Un vaisseau conna\u00eet la liste de ses missiles et sait leur demander de se mettre \u00e0 jour et de se dessiner. </p>"},{"location":"terminale/projets/space_invader/#lennemi","title":"L'ennemi","text":"<p>Un ennemi doit pouvoir tirer un nouveau missile. Un ennemi conna\u00eet la liste de ses missiles et sait leur demander de se mettre \u00e0 jour et de se dessiner. </p>"},{"location":"terminale/projets/space_invader/#le-missile","title":"Le missile","text":"<p>C'est un \u00e9l\u00e9ment Graphique simple.</p>"},{"location":"terminale/projets/space_invader/#optionnel","title":"Optionnel","text":"<ul> <li>Il existe plusieurs types d'ennemis plus ou moins puissants.</li> <li>Il y a un boss ded fin de niveau.</li> <li>Les ennemis et le vaisseau peuvent avoir des points de vie.</li> <li>Le jeu peut cr\u00e9er une explosion \u00e0 un certain endroit</li> <li>Les ennemis peuvent drop des Bonus (invincibilit\u00e9, changement de missile, ...) La liste est sans fin.</li> </ul> <p>Ne vous lancez pas dans les fonctionnalit\u00e9s optionnelles sans avoir un code propre et compl\u00e8tement test\u00e9. Ne vous lancez pas dans une am\u00e9lioration sans avoir pens\u00e9 sa mod\u00e9lisation. Si vous \u00e9crivez trop de code, c'est que vous avez peut-\u00eatre pris un mauvais chemin.</p>"},{"location":"terminale/projets/space_invader/#les-collisions","title":"Les collisions","text":"<p>Rajoutez cette m\u00e9thode dans votre classe EltGraphique. L'objectif ici, c'est que vous vous plongiez dans la POO, pas d'\u00e9tudier la collision d'objets dans l'espace (tr\u00e8s vaste sujet), donc je vous la donne. (La collision peut faire l'objet d'un grand oral maths/info.)</p> <pre><code>def collision(self, other: 'EltGraphique') -&gt; bool:\n    \"\"\" Cette m\u00e9thode d\u00e9tecte les collisions entre 2 boites\n    rectangulaires. Les rectangles doivent avoir des attributs:\n    x, y, width, height\n    Elle renvoie True si les deux bo\u00eetes sont en collision.\n    \"\"\"\n    return not ( \n               (other.x &gt;= self.x + self.width)   \n            or (other.x + other.width &lt;= self.x)  \n            or (other.y &gt;= self.y + self.height) \n            or (other.y + other.height &lt;= self.y) \n     )\n</code></pre> <p>Pour aller plus loin dans les collisions, vous pouvez vous int\u00e9resser au th\u00e9or\u00e8me des axes s\u00e9parateurs (Accessible sp\u00e9 math), ou encore \u00e0 GJK, qui utilise la somme de Minkowski (Difficile \u00e0 ce stade, mais je vous le mets quand m\u00eame parce que c'est beau)</p> <p>La d\u00e9tection de collisions utilise en fait plusieurs algorithmes. Un algorithme pour voir \"en gros\" qui pourrait entrer en collision en effectuant un partitionnement de l'espace (Broad phase). Un algorithme pour voir d'un peu plus pr\u00e8s ce qui pourrait \u00eatre en collision d'apr\u00e8s le r\u00e9sultat du broad en utilisant la fonction que je vous ai donn\u00e9, ou SAT, ou autre (Mid phase). Un algorithme pour d\u00e9terminer au pixel pr\u00e8s ce qui entre en collision d'apr\u00e8s le r\u00e9sultat du Mid avec par exemple GJK (Narrow phase).</p>"},{"location":"terminale/structures-de-donnees/arbrebinaire/","title":"Arbre binaire","text":"<p>Arbre</p> <p>Un arbre est soit vide, soit compos\u00e9 d'une donn\u00e9e ainsi que de plusieurs sous-arbres.</p> <p>Exercice</p> <p>Proposez une impl\u00e9mentation python du type arbre.</p> <p>On nomme noeud chaque sous-arbre d'un arbre.</p> <p>On nomme racine le noeud qui n'a pas de parent.</p> <p>On nomme feuille un noeud qui n'a pas d'enfant.</p> <p>On nomme hauteur d'un arbre la longueur du chemin de sa racine \u00e0 sa feuille la plus \u00e9loign\u00e9e.</p> <p>On nomme taille d'un arbre son nombre de noeuds.</p> <p>Arbre binaire</p> <p>Un arbre binaire est une structure compos\u00e9e d'une cl\u00e9 (ou \u00e9tiquette), ainsi que de 2 arbres, le sous-arbre gauche (sag) ainsi que le sous-arbre droit (sad). C'est un arbre tr\u00e8s particulier car on distingue bien la position de chaque sous-arbre.</p> <p>Exercice</p> <p>En vous inspirant du travail fait sur les listes:</p> <ol> <li>Proposez une impl\u00e9mentation python du type arbrebin.</li> <li>Proposez une impl\u00e9mentation OCaml du type arbrebin.</li> </ol> <p>Exercices</p> <p>Impl\u00e9menter les fonctions d'acc\u00e8s de base: - <code>cle(a: arbrebin) -&gt; int</code> - <code>sag(a: arbrebin) -&gt; arbrebin</code> - <code>sad(a: arbrebin) -&gt; arbrebin</code> - <code>est_vide(a: arbrebin) -&gt; bool</code></p> <p>Impl\u00e9menter en cons\u00e9quence les fonctions r\u00e9cursives:</p> <ul> <li><code>hauteur</code> calcule la hauteur d'un arbre</li> <li><code>taille</code> calcule le nombre de noeuds d'un arbre</li> <li><code>somme</code> calcule la somme des \u00e9lements d'un arbre</li> <li><code>to_str</code> renvoie une str comportant toutes les cl\u00e9s d'un arbre.</li> <li><code>minimum</code> renvoie la cl\u00e9 minimum d'un arbre binaire.</li> <li><code>minimum</code> renvoie la cl\u00e9 minimum d'un arbre binaire.</li> </ul> <p>Arbre \u00e9quilibr\u00e9</p> <p>Un arbre est \u00e9quilibr\u00e9 s'il est vide ou que:</p> <ul> <li>la diff\u00e9rence de hauteur de ses enfants est au maximum 1.</li> <li>ses enfants sont \u00e9quilibr\u00e9s.</li> </ul> <p>Ecrire la fonction <code>est_equilibre(a: arbrebin) -&gt; bool</code>.</p> <p>Impl\u00e9mentation mutable</p> <p>L'impl\u00e9mentation ci-dessous utilise aussi une sentinelle, mais ne l'utilise pas de mani\u00e8re aussi sioux que pour les listes. Elle signifie seulement l'absence d'enfant. La cr\u00e9ation d'une sentinelle nous permet de ne pas utiliser la valeur g\u00e9n\u00e9rique None, qui pourrait signifier bien autre chose qu'une absence d'enfant, car None n'est pas propre \u00e0 notre structure.</p> <pre><code>class Noeud:\n    def __init__(self, cle, gauche: 'Noeud', droit: 'Noeud'):\n        self.cle = cle\n        self.gauche = gauche\n        self.droit = droit\n\n    def est_feuille(self):\n        return self.gauche is NIL and self.droite is NIL\n\nclass Sentinelle(Noeud):\n    def __init__(self):\n        super().__init__(0, self, self)\n\nNIL = Sentinelle()\n\nclass ArbreBin:\n    def __init__(self, racine: 'Noeud'):\n        self.racine = racine\n\n    def est_vide(self) -&gt; bool:\n        return self.racine is NIL\n</code></pre> <p>Exercice</p> <p>Impl\u00e9mentez les m\u00eames fonctions pour la version mutable.</p>"},{"location":"terminale/structures-de-donnees/arbrebinaire/#les-methodes-de-parcours-en-profondeur-dun-arbre","title":"Les m\u00e9thodes de parcours en profondeur d'un arbre","text":""},{"location":"terminale/structures-de-donnees/arbrebinaire/#prefixe","title":"pr\u00e9fixe","text":""},{"location":"terminale/structures-de-donnees/arbrebinaire/#infixe","title":"infixe","text":""},{"location":"terminale/structures-de-donnees/arbrebinaire/#postfixe","title":"postfixe","text":""},{"location":"terminale/structures-de-donnees/arbrebinaire/#parcours-en-largeur-dun-arbre","title":"Parcours en largeur d'un arbre.","text":"<p>Pour parcourir un arbre en largeur, nous allons nous appuyer sur la structure  de file.</p> <p>Arbre binaire de recherche (ABR)</p> <p>Un arbre binaire de recherche (ABR) est un arbre binaire vide ou poss\u00e8dant ces propri\u00e9t\u00e9s: - la cl\u00e9 du sag non vide est inf\u00e9rieure ou \u00e9gale \u00e0 sa cl\u00e9. - la cl\u00e9 du sad non vide est sup\u00e9rieure ou \u00e9gale \u00e0 sa cl\u00e9. - Le sad et le sag sont des ABR.</p> <p>L'objectif est ici de disposer d'une structure qui nous permette de rechercher de l'information tr\u00e8s rapidement.</p> <pre><code>graph TD;\n    A[8] --&gt; B[4]\n    A --&gt; C[12]\n    B --&gt; D[2]\n    B --&gt; E[6]\n    C --&gt; F[10]\n    C --&gt; G[14]\n    D --&gt; H[1]\n    D --&gt; I[3]\n    E --&gt; J[5]\n    E --&gt; K[7]\n    F --&gt; L[9]\n    F --&gt; M[11]\n    G --&gt; N[13]\n    G --&gt; O[15]</code></pre> <p>Exercices</p> <ul> <li> <p>Dessiner 3 ABR o\u00f9, partant d'un arbre vide, on ins\u00e8re successivement les valeurs:</p> <ul> <li>3, 7, 1, 9, 4, 8, 2, 5, 6</li> <li>6, 2, 9, 1, 5, 3, 8, 4, 7</li> <li>9, 5, 3, 7, 2, 6, 1, 8, 4</li> </ul> </li> <li> <p>Ecrire une fonction <code>est_abr(a: arbrebin) -&gt; bool</code></p> </li> <li>Ecrire une fonction <code>insere_abr(e: int, a: arbrebin) -&gt; arbrebin</code></li> </ul>"},{"location":"terminale/structures-de-donnees/listes/","title":"Listes - Paradigme fonctionnel","text":"<p>Attention</p> <p>Ici, nous ne parlons pas du tout des listes python. Nous n'en utiliserons d'ailleurs pas.</p>"},{"location":"terminale/structures-de-donnees/listes/#definition","title":"D\u00e9finition","text":"<p>Les listes sont une structure de donn\u00e9es lin\u00e9aire qui permet de stocker une s\u00e9quence d'\u00e9l\u00e9ments. Il existe une multitude de mani\u00e8re de les impl\u00e9menter. Nous en verrons 2. </p> <p>Les listes sont un outil formidable pour faire ses premiers pas en r\u00e9cursivit\u00e9. C'est aussi l'occasion de d\u00e9couvrir le paradigme fonctionnel, et aussi d'aller juste un peu plus loin dans le paradigme orient\u00e9 objet.</p> <p>Ici, nous allons cr\u00e9er des listes immuables, ce qui signifie qu'elles ne peuvent pas \u00eatre modifi\u00e9es une fois cr\u00e9\u00e9es. Toute op\u00e9ration qui \"modifie\" une liste renvoie une nouvelle liste, tout en pr\u00e9servant l'ancienne.</p> <p>D\u00e9finition r\u00e9cursive</p> <p>Nous travaillerons avec des listes o\u00f9 chaque \u00e9l\u00e9ment est un entier. </p> <p>Chaque liste peut \u00eatre :</p> <ol> <li>vide</li> <li>Contenir un \u00e9l\u00e9ment appel\u00e9 la t\u00eate, suivi de la queue, qui est une autre liste.</li> </ol> <p>Nous d\u00e9finissons une liste \u00e0 l'aide de sa propre d\u00e9finition. Selon cette d\u00e9finition, nous travaillons sur une structure d\u00e9finie r\u00e9cursivement.</p>"},{"location":"terminale/structures-de-donnees/listes/#implementation-en-python","title":"Impl\u00e9mentation en python","text":"<p>Nous utiliserons des tuples pour contenir une liste car les tuples sont immuables, ils collent bien au cadre de la programmation fonctionnelle.</p> <p>Nous mat\u00e9rialiserons la liste vide par un tuple vide.</p> <p>Une liste non vide sera un tuple contienant 2 \u00e9l\u00e9ments, la t\u00eate, ainsi que la queue.</p> <p>Le tuple suivant repr\u00e9sente une liste o\u00f9 la t\u00eate est <code>2</code>, et la queue est une liste dont la t\u00eate est <code>3</code>, suivie d'une liste ou la tete est 4, suivie elle-m\u00eame de la liste vide.</p> <pre><code>(2, (3, (4, ())))\n</code></pre>"},{"location":"terminale/structures-de-donnees/listes/#traduction-de-notre-definition-en-python","title":"Traduction de notre d\u00e9finition en python:","text":"<p><pre><code>type vide = tuple[()]\nLISTE_VIDE: vide = ()\n\ntype liste = vide | tuple[int, liste]\n</code></pre> Nous cr\u00e9ons ici deux types :</p> <ul> <li><code>vide</code> repr\u00e9sente le vide mod\u00e9lis\u00e9 par un tuple vide.</li> <li><code>liste</code> est une structure r\u00e9cursive qui peut \u00eatre soit vide, soit un 2-uplet: t\u00eate (int) et queue(liste).</li> </ul>"},{"location":"terminale/structures-de-donnees/listes/#creation-et-acces-aux-elements","title":"Cr\u00e9ation et Acc\u00e8s aux \u00c9l\u00e9ments","text":""},{"location":"terminale/structures-de-donnees/listes/#creation-dune-liste","title":"Cr\u00e9ation d'une Liste","text":"<p>Une fonction typique pour cr\u00e9er une nouvelle liste \u00e0 partir d'un entier et d'une autre liste : <pre><code>def creer(t: int, q: liste) -&gt; liste:\n    return (t, q)\n</code></pre> Elle prend deux arguments :</p> <ul> <li><code>t</code> : la t\u00eate (l'\u00e9l\u00e9ment \u00e0 ajouter).</li> <li><code>q</code> : la queue (la liste suivante).</li> </ul>"},{"location":"terminale/structures-de-donnees/listes/#acces-aux-elements","title":"Acc\u00e8s aux \u00c9l\u00e9ments","text":"<p>Les deux op\u00e9rations d'acc\u00e8s principales sont : - T\u00eate : obtenir le premier \u00e9l\u00e9ment de la liste. - Queue : obtenir la sous-liste \u00e0 partir du deuxi\u00e8me \u00e9l\u00e9ment.</p> <pre><code>def tete(lst: liste) -&gt; int:\n    assert len(lst) == 2, \"Liste vide\"\n    return lst[0]\n\ndef queue(lst: liste) -&gt; liste:\n    assert len(lst) == 2, \"Liste vide\"\n    return lst[1]\n</code></pre> <p>Nous reviendrons sur ces fonctions car il se peut qu'on les modifie juste un peu en fin de parcours.</p> <p>Attention</p> <p>A partir de maintenant, nous n'utiliserons plus les tuples. Nous n'utiliserons que les fonctions que nous avons d\u00e9finies ainsi que la constante LISTE_VIDE.</p>"},{"location":"terminale/structures-de-donnees/listes/#fonctions-en-lecture","title":"Fonctions en lecture","text":""},{"location":"terminale/structures-de-donnees/listes/#tester-si-une-liste-est-vide","title":"Tester si une Liste est Vide","text":"<pre><code>def est_vide(lst: liste) -&gt; bool:\n    return lst == LISTE_VIDE\n</code></pre>"},{"location":"terminale/structures-de-donnees/listes/#calculer-la-taille-dune-liste","title":"Calculer la Taille d'une Liste","text":"<pre><code>def taille(lst: liste) -&gt; int:\n    if est_vide(lst):\n        return 0\n    return 1 + taille(queue(lst))\n</code></pre>"},{"location":"terminale/structures-de-donnees/listes/#calculer-la-somme-des-elements","title":"Calculer la Somme des \u00c9l\u00e9ments","text":"<pre><code>def somme(lst: liste) -&gt; int:\n    if est_vide(lst):\n        return 0\n    return tete(lst) + somme(queue(lst))\n</code></pre> <p>A vous</p> <p>Ecrivez toutes les autres fonctions demand\u00e9es. On r\u00e9alisera une disjonction de cas au papier avant de coder. </p>"},{"location":"terminale/structures-de-donnees/listes/#fonctions-en-creation","title":"Fonctions en cr\u00e9ation","text":"<p>Attention</p> <p>Bien comprendre que les listes sont immuables. On ne peut pas les modifier. Par \"Ins\u00e9rer\", on entendra \"Renvoyer une liste dans laquelle on a ins\u00e9r\u00e9\".</p>"},{"location":"terminale/structures-de-donnees/listes/#ajouter-un-element-a-la-fin","title":"Ajouter un \u00c9l\u00e9ment \u00e0 la fin","text":"<pre><code>def ajouter_fin(e: int, lst: liste) -&gt; liste:\n    if est_vide(lst):\n        return LISTE_VIDE\n    else:\n        return creer(tete(lst), ajouter_fin(queue(lst)))\n</code></pre> <p>Si on reprend la m\u00e9taphore des lutins.</p> <p></p> <p>Je suis un lutin-ajouteur. </p> <ul> <li>Si on me donne une liste vide et qu'on me dit d'y ajouter l'\u00e9l\u00e9ment e, je renvoie une liste ne comportant que l'\u00e9l\u00e9ment e</li> <li>Sinon, c'est qu'on me donne une liste avec une tete et une queue. Alors je cr\u00e9\u00e9 une liste avec la m\u00eame t\u00eate, et pour la queue, je la donne \u00e0 un autre lutin ajouteur pour qu'il me la renvoie augment\u00e9e de e</li> </ul> <p>A vous</p> <p>Ecrivez toutes les autres fonctions demand\u00e9es. On r\u00e9alisera une disjonction de cas au papier avant de coder. </p>"},{"location":"terminale/structures-de-donnees/listeschainees/","title":"Listes cha\u00een\u00e9es - Approche Orient\u00e9e Objet","text":"<p>Requis</p> <p>Vous devez savoir refaire les exercices sur la cr\u00e9ation et l'utilisation de classes en POO sans regarder le corrig\u00e9.</p>"},{"location":"terminale/structures-de-donnees/listeschainees/#introduction","title":"Introduction","text":"<p>Une liste cha\u00een\u00e9e est aussi une structure permettant d'impl\u00e9menter une liste.</p> <p>La cha\u00eene que repr\u00e9sente la liste est compos\u00e9e de plusieurs maillons.</p> <p>Chaque Maillon est compos\u00e9 d'un \u00e9l\u00e9ment et d'une r\u00e9f\u00e9rence vers le maillon suivant.</p> <p>Il existe plusieurs fa\u00e7ons d'organiser ces maillons:</p> <p></p> <p>Il reste un bon exercice d'essayer de temps en temps d'impl\u00e9menter une autre version de liste cha\u00een\u00e9e.</p>"},{"location":"terminale/structures-de-donnees/listeschainees/#definition-de-la-classe-maillon","title":"D\u00e9finition de la classe <code>Maillon</code>","text":"<p>Un <code>Maillon</code> de la cha\u00eene poss\u00e8de une donn\u00e9e ainsi qu'une r\u00e9f\u00e9rence \u00e0 son maillon suivant. </p> <p>Un maillon a donc deux attributs :</p> <ol> <li><code>data</code> : La donn\u00e9e contenue dans le maillon (ici un entier).</li> <li><code>next</code> : Une r\u00e9f\u00e9rence vers le maillon suivant.</li> </ol> <pre><code>class Maillon:\n    def __init__(self, data: int, next: 'Maillon'):\n        self.data = data\n        self.next = next\n</code></pre>"},{"location":"terminale/structures-de-donnees/listeschainees/#probleme-initial","title":"Probl\u00e8me initial","text":"<p>Cette d\u00e9finition pr\u00e9sente un probl\u00e8me. Lorsqu\u2019on cr\u00e9e un maillon, on doit sp\u00e9cifier le maillon suivant (<code>next</code>), mais ce maillon suivant n\u2019existe pas encore \u00e0 ce stade de la cr\u00e9ation. Nous devons r\u00e9soudre ce probl\u00e8me pour pouvoir cr\u00e9er une cha\u00eene. </p> <pre><code>premier_maillon = Maillon(3, ...euh, j'ai pas de maillon...)\n</code></pre>"},{"location":"terminale/structures-de-donnees/listeschainees/#sentinelle","title":"Sentinelle","text":"<p>D\u00e9finition</p> <p>En informatique, une sentinelle est une valeur sp\u00e9ciale qui indique une ou plusieurs bornes d'une structure de donn\u00e9es. </p> <p>Appliqu\u00e9 \u00e0 notre cas, en consid\u00e9rant que la sentinelle et dans notre cha\u00eene, et qu'il n'y a que des maillons dans la cha\u00eene:</p> <ul> <li>La sentinelle est dans la cha\u00eene, donc la Sentinelle EST UN Maillon.</li> <li>Mais tout maillon a un prochain maillon.    </li> <li>Vu que la sentinelle est un Maillon, elle doit donc avoir un prochain maillon. </li> </ul> <p>Il semble que nous soyons de retour \u00e0 notre probl\u00e8me initial, mais en r\u00e9alit\u00e9, pas du tout. Pour r\u00e9soudre ce casse t\u00eate, On va lui dire que son prochain maillon, c'est initialement elle-m\u00eame.</p>"},{"location":"terminale/structures-de-donnees/listeschainees/#classe-sentinelle","title":"Classe <code>Sentinelle</code>","text":"<pre><code>class Sentinelle(Maillon):    # Une Sentinelle EST UN Maillon\n    def __init__(self):\n        super().__init__(0, self)   # Son prochain Maillon est initialement elle-m\u00eame\n</code></pre> <p>Cette classe h\u00e9rite de la classe <code>Maillon</code>.  Gr\u00e2ce \u00e0 l\u2019appel de <code>super()</code>, nous invoquons le constructeur de <code>Maillon</code> tout en assignant la sentinelle comme le maillon suivant d'elle-m\u00eame. Sa donn\u00e9e est arbitrairement mise \u00e0 0.</p> <p>Voici comment \u00e9voluera progressivement notre sentinelle (0) lorsqu'on ajoutera en t\u00eate les \u00e9l\u00e9ments 5, 3, puis 12:</p> <pre><code>---\ntitle: Maillon sentinelle\n---\ngraph LR\n0((0)) --&gt; 0</code></pre> <pre><code>---\ntitle: Ajout de la donn\u00e9e 5\n---\ngraph LR\n0((0)) --&gt; 5((5))\n5 --&gt; 0</code></pre> <pre><code>---\ntitle: Ajout de la donn\u00e9e 3\n---\ngraph LR\n0((0)) --&gt; 3((3))\n3 --&gt; 5((5))\n5 --&gt; 0</code></pre> <pre><code>---\ntitle: Ajout de la donn\u00e9e 12\n---\ngraph LR\n0((0)) --&gt; 12((12))\n12((12)) --&gt; 3((3))\n3 --&gt; 5((5))\n5 --&gt; 0</code></pre> <p>Sauf lorsque la liste est vide, le premier \u00e9l\u00e9ment de la liste est juste apr\u00e8s la sentinelle. Le dernier est juste avant.</p> <p>Note</p> <p>Il est important de r\u00e9aliser que l'attribut next est une r\u00e9f\u00e9rence \u00e0 un noeud. \"next, c'est la fl\u00e8che qui va vers\"</p>"},{"location":"terminale/structures-de-donnees/listeschainees/#definition-de-la-classe-liste","title":"D\u00e9finition de la classe <code>Liste</code>","text":"<p>Nous allons g\u00e9rer une liste \u00e0 partir de sa sentinelle. Nous assimilerons alors une liste \u00e0 sa sentinelle, en renommant tout simplement la classe sentinelle en Liste. On OUBLIE donc la classe sentinelle qui n'\u00e9tait l\u00e0 que pour la d\u00e9marche de r\u00e9flexion. La sentinelle d'une liste, c'est elle-m\u00eame en tant que Maillon.</p> <p>La classe <code>Liste</code> h\u00e9rite de <code>Maillon</code> et repr\u00e9sente notre liste cha\u00een\u00e9e compl\u00e8te.</p> <p>Lorsqu'elle est cr\u00e9\u00e9e (donc vide), c'est un maillon pointant sur lui-m\u00eame et qui repr\u00e9sentera toujours sa propre sentinelle.</p>"},{"location":"terminale/structures-de-donnees/listeschainees/#attributs-de-liste","title":"Attributs de <code>Liste</code>","text":"<ul> <li><code>__taille</code> : Stocke la taille de la liste.</li> <li><code>ajouter_tete</code> : Ajoute un nouvel \u00e9l\u00e9ment en t\u00eate de la liste.</li> </ul> <pre><code>class Liste(Maillon):\n    def __init__(self):\n        super().__init__(0, self)\n        self.__taille = 0\n</code></pre> <p>Dans une m\u00e9thode, self.next repr\u00e9sente toujours le premier Maillon, \u00e0 moins que la liste ne soit vide, auquel cas elle pointe sur elle m\u00eame.</p> <p>Ici, on choisit de plus de maintenir la taille du maillon en permanence. On marque cet attribut comme priv\u00e9 gr\u00e2ce au double underscore, afin de signifier qu'il ne doit pas \u00eatre modifi\u00e9 par les programmeurs qui utilisent cette classe.</p> <p>Vu que la r\u00e9cup\u00e9ration de la taille est une op\u00e9rationn courante, sa r\u00e9cup\u00e9ration sera donc en \\(\\mathcal{O}(1)\\), au lieu de \\(\\mathcal{O}(n)\\) s'il faut parcourir tous les maillons d'une liste de taille \\(n\\). Ceci se fait au prix de l'augmentation de la taille de stockage de la liste, mais on ne peut pas tout avoir.</p> <p>Tout ce qui suit est du l\u00e9go avec les maillons, il faut juste penser \u00e0 bien faire les op\u00e9rations dans l'ordre \u00e0 chaque fois. On proc\u00e8dera de mani\u00e8re imp\u00e9rative, avec des while.</p>"},{"location":"terminale/structures-de-donnees/listeschainees/#ajouter-un-element","title":"Ajouter un \u00e9l\u00e9ment","text":"<p>On veut ajouter un nouveau maillon portant la donn\u00e9e 12 en t\u00eate de liste:</p> <pre><code>---\ntitle: Liste initiale\n---\ngraph LR\n0((0)) --&gt; 3((3))\n3 --&gt; 5((5))\n5 --&gt; 0</code></pre> <ol> <li>On cr\u00e9\u00e9 un Maillon portant la donn\u00e9e 12 et pointant vers le Maillon suivant la sentinelle (donc suivant la liste elle meme, puisqu'elle est sa sentinelle) <pre><code>---\ntitle: \n---\ngraph LR\n0((0)) ====&gt; 3((3))\n12((12)) --&gt; 3\n3 --&gt; 5((5))\n5 --&gt; 0</code></pre></li> <li>La fl\u00e8che 0-&gt;3 repr\u00e9sente la r\u00e9f\u00e9rence self.next il faut la remplacer par une r\u00e9f\u00e9rence au maillon 12 <pre><code>---\ntitle: \n---\ngraph LR\n0((0)) ==&gt; 12((12))\n12 --&gt; 3((3))\n3 --&gt; 5((5))\n5 --&gt; 0</code></pre></li> <li>Vu qu'on a choisi de maintenir la taille, il ne faut pas oublier de lui ajouter 1</li> </ol> <p>La m\u00e9thode <code>ajouter_tete</code> \u00e9crite en cons\u00e9quence ins\u00e8re un nouveau maillon juste apr\u00e8s la sentinelle.</p> <pre><code>def ajouter_tete(self, e: int):\n    m = Maillon(e, self.next)     # 1\n    self.next = m                 # 2\n    self.__taille += 1            # 3\n</code></pre> <p>L'approche propos\u00e9e permet de simplifier le code des m\u00e9thodes. En effet, \u00e7a marche ind\u00e9pendamment du fait que la liste soit vide ou pas.</p> <p><pre><code>---\ntitle: Liste initiale\n---\ngraph RL\n0((0)) --&gt; 0</code></pre> 1. On cr\u00e9\u00e9 un Maillon portant la donn\u00e9e 12 et pointant vers le Maillon suivant la sentinelle  <pre><code>---\ntitle: \n---\ngraph RL\n0((0)) ==&gt; 0\n12((12)) --&gt; 0</code></pre></p> <ol> <li>La fl\u00e8che en gras repr\u00e9sente la r\u00e9f\u00e9rence self.next il faut la remplacer par une r\u00e9f\u00e9rence au maillon 12</li> </ol> <pre><code>---\ntitle: \n---\ngraph LR\n0((0)) ==&gt; 12((12))\n12 --&gt; 0</code></pre>"},{"location":"terminale/structures-de-donnees/listeschainees/#la-methode-est_vide","title":"La m\u00e9thode est_vide","text":"<p>Afin de vous lancer sur le parcours de cette structure, je vous donne votre deuxi\u00e8me m\u00e9thode, la m\u00e9thode <code>est_vide</code>.</p> <p>Tip</p> <p>l'op\u00e9rateur is sert \u00e0 comparer les objets, non pas en termes de valeur, mais en termes d'adresse m\u00e9moire. <pre><code>def est_vide(self) -&gt; bool:\n    return self.next is self\n</code></pre></p> <p>M\u00e9thode exemple</p> <p>Cette m\u00e9thode sp\u00e9ciale (c'est une m\u00e9thode de classe) pourra \u00eatre utilis\u00e9e dans les doctests:</p> <pre><code>@staticmethod\ndef exemple() -&gt; 'Liste':\n    lst = Liste()\n    lst.ajouter_tete(89)\n    lst.ajouter_tete(3)\n    lst.ajouter_tete(2)\n    return lst\n</code></pre> <p>On l'appellera ainsi:</p> <pre><code>lst = Liste.exemple()\n</code></pre> <p>Question</p> <p>A vous maintenant de recr\u00e9er les fonctions que vous avez vues en programmation fonctionnelles en tant que m\u00e9thodes de la classe liste en commen\u00e7ant par la m\u00e9thode ajouter_fin. Vous n'utiliserez pas la r\u00e9cursivit\u00e9.</p> <p>Tout comme nous l'avons fait avec OCaml en programmation fonctionnelle, compl\u00e9tez aussi le programme en C++.</p>"}]}