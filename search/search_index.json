{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Welcome to MkDocs","text":"<p>qekqfe For full documentation visit mkdocs.org.</p>"},{"location":"#commands","title":"Commands","text":"<ul> <li><code>mkdocs new [dir-name]</code> - Create a new project.</li> <li><code>mkdocs serve</code> - Start the live-reloading docs server.</li> <li><code>mkdocs build</code> - Build the documentation site.</li> <li><code>mkdocs -h</code> - Print help message and exit.</li> </ul>"},{"location":"#project-layout","title":"Project layout","text":"<pre><code>mkdocs.yml    # The configuration file.\ndocs/\n    index.md  # The documentation homepage.\n    ...       # Other markdown pages, images and other files.\n</code></pre>"},{"location":"les-outils/","title":"Outils pour d\u00e9velopper","text":"<p>Cette s\u00e9lection d'outils a \u00e9t\u00e9 choisie pour \u00eatre \u00e0 la fois r\u00e9aliste et abordable. </p> <p>L'installation propos\u00e9e se fait dans l'invite de commandes windows gr\u00e2ce \u00e0 l'outil winget qui est d\u00e9j\u00e0 pr\u00e9sent.</p> <p>Il aussi est tout \u00e0 fait possible d'installer ces outils en les t\u00e9l\u00e9chargeant et en ex\u00e9cutant leur programme d'installation. </p>"},{"location":"les-outils/#vs-code","title":"VS Code","text":"<p>Le couteau suisse de la programmation.</p> <pre><code>    winget install Microsoft.VisualStudioCode\n</code></pre>"},{"location":"les-outils/#miniforge","title":"Miniforge","text":"<p>Si python est install\u00e9 sur votre machine, d\u00e9sinstallez-le. Nous allons utiliser ce gestionnaire d'environnements \u00e0 la place.</p> <pre><code>    winget install CondaForge.Miniforge3\n</code></pre>"},{"location":"les-outils/#msys2","title":"MSYS2","text":"<p>Cet outil simule l'environnement linux et vous permettra m\u00eame de programmer dans d'autres langages de programmation <pre><code>    winget install MSYS2.MSYS2\n</code></pre></p>"},{"location":"les-outils/#dbeaver","title":"DBeaver","text":"<p>DBeaver permet d'interagir avec des syst\u00e8mes de gestion dde bases de donn\u00e9es.</p> <pre><code>    winget install dbeaver.dbeaver\n</code></pre>"},{"location":"les-outils/setup-vscode/","title":"Setup vscode","text":""},{"location":"les-outils/setup-vscode/#setup-de-vscode","title":"Setup de VSCode","text":"<p>Un IDE (environnement de d\u00e9veloppement int\u00e9gr\u00e9) est un logiciel qui aide les programmeurs \u00e0 d\u00e9velopper.</p> <p>VSCode est de loin l'IDE le plus utilis\u00e9 (73,6% des d\u00e9veloppeurs et 77% des \u00e9tudiants du monde entier en 2024 d'apr\u00e8s la c\u00e9l\u00e8bre enqu\u00eate annuelle de stackoverflow)</p>"},{"location":"les-outils/setup-vscode/#pre-requis","title":"Pr\u00e9-requis","text":"<p>Vous avez install\u00e9 les outils recommand\u00e9s avec winget</p>"},{"location":"les-outils/setup-vscode/#configurer-vscode-pour-developper-en-python","title":"Configurer VSCode pour d\u00e9velopper en python.","text":"<p>Cliquez sur l'ic\u00f4ne des extensions </p> <p>Recherchez <code>nsi-dev</code> dans la petite barre de recherche. Cliquez sur le petit bouton bleu \"install\"</p> <p></p> <p>Ca-y-est, c'est configur\u00e9.</p>"},{"location":"les-outils/setup-vscode/#comment-travailler-avec-vscode","title":"Comment travailler avec VSCode?","text":"<p>Attention, sinon \u00e7a ne fonctionnera pas</p> <p>Dans VSCode, on ouvre TOUJOURS un r\u00e9pertoire, JAMAIS un fichier.</p> <p>File &gt; Open Folder</p> <p>Quand vous rouvrez VSCode, vous retrouvez tout comme vous l'avez laiss\u00e9 la derni\u00e8re fois que vous l'avez ouvert.</p> <p>Lorsque vous ouvrez un r\u00e9pertoire pour la premi\u00e8re fois, VSCode vous demande s'il peut avoir confiance en ce r\u00e9pertoire. Cochez la case et cliquez sur le bouton bleu, \"Yes i trust\". Il ne vous le redemandera plus pour ce r\u00e9pertoire ni pour le r\u00e9pertoire parent.</p> <p></p>"},{"location":"les-outils/setup-vscode/#gerer-les-fichiers-du-repertoire","title":"G\u00e9rer les fichiers du r\u00e9pertoire.","text":"<p>Vous pouvez directement cr\u00e9er des fichiers et des dossiers dans L'explorer de VSCode \u00e0 l'aide de ces boutons </p>"},{"location":"les-outils/setup-vscode/#gerer-vos-environnements-python","title":"G\u00e9rer vos environnements Python","text":"<p>L'extension NSI-DEV vous fournit une mani\u00e8re simplifi\u00e9e de g\u00e9rer vos environnements python. Il ne faut pas que vous ayez install\u00e9 python sur votre machine, c'est miniforge qui va se charger de faire coexister une ou pusieurs installations de python.</p> <p></p> <p>Sur l'image ci-dessus, on voit 2 environnements python utilisables que j'ai appel\u00e9 py312 (pour la version 12 de python) et py313 (pour la version 13 de python).</p> <p>Lorsque vous l'utiliserez pour la premi\u00e8re fois, il n'y en aura pas, il faudra en cr\u00e9er un en appuyant sur le bouton +</p> <p>On vous demandera alors de valider une version de python pour votre environnement, puis un nom.</p> <p>A l'heure o\u00f9 j'\u00e9cris ces lignes, je vous conseille de demander la version 3.13 et d'appeler cet environnement py313.</p> <p>Apr\u00e8s quelques instants (\u00e7a peut \u00eatre un peu long), vous verrez appara\u00eetre votre environnement.</p>"},{"location":"les-outils/setup-vscode/#programmer-en-python","title":"Programmer en Python","text":"<p>VSCode doit savoir quel environnement python utiliser pour ex\u00e9cuter vos programme, \u00e9tant donn\u00e9 qu'il peut en exister plusieurs.</p> <p>Lorsque vous avez un fichier python ouvert, il faut cliquer sur la barre d'\u00e9tat en bas \u00e0 droite, \u00e0 l'emplacement o\u00f9 vous voyez sur l'image 3.12.7('py312': conda). Une liste d\u00e9roulante va alors s'afficher o\u00f9 vous pourrez s\u00e9lectionner votre environnement. Si c'est la premi\u00e8re fois que vous ouvrez VS code, vous verrez peut-\u00eatre un bouton \"Select interpreter\" \u00e0 la place.</p> <p></p> <p>Jamais dans base</p> <p>Il existe un environnement par d\u00e9faut qui s'appelle base. L'extension le masque volontairement. N'utilisez jamais cet environnement.</p>"},{"location":"les-outils/setup-vscode/#ajouter-des-modules-python","title":"Ajouter des modules python","text":"<p>Lorsque vous voulez installer un module python, il faut ouvrir un terminal configur\u00e9 pour votre environnement. Ca se fait directement en appuyant sur le petit cube de l'image ci-dessous. (La poubelle vous permet de supprimer l'environnement)</p> <p></p> <p>Un terminal MSYS2 appara\u00eet.</p> <p>Imaginons que vous vouliez installer le module pyxel, vous pouvez alors y ex\u00e9cuter cette commande:</p> <p><code>pip install pyxel</code></p> <p>Ca y est, vous pouvez maintenant \u00e9crire <code>import pyxel</code> dans vos programmes.</p> <p>Au quotidien</p> <p>Une fois que tout \u00e7a est fait, au quotidien, il faut juste s'assurer qu'on est sur le bon environnement en bas \u00e0 droite de VSCode, \u00e9crire ses programmes et les ex\u00e9cuter avec le bouton play en haut \u00e0 droite de l'\u00e9cran.</p>"},{"location":"terminale/structures-de-donnees/listeschainees/","title":"Listes Cha\u00een\u00e9es","text":"<p>Attention</p> <p>Ici, nous ne parlons pas du tout des listes python. Nous n'en utiliserons d'ailleurs pas.</p> <p>Les listes cha\u00een\u00e9es sont une structure de donn\u00e9es lin\u00e9aire qui permet de stocker une s\u00e9quence d'\u00e9l\u00e9ments. Il existe une multitude de mani\u00e8re de les impl\u00e9menter. Nous en verrons 2. </p> <p>Les listes cha\u00een\u00e9es sont un outil formidable pour faire ses premiers pas en r\u00e9cursivit\u00e9. C'est aussi l'occasion de d\u00e9couvrir le paradigme fonctionnel, et aussi d'aller juste un peu plus loin dans le paradigme orient\u00e9 objet.</p>"},{"location":"terminale/structures-de-donnees/listeschainees/#partie-1-paradigme-fonctionnel","title":"Partie 1 - Paradigme fonctionnel","text":"<p>Le Paradigme Fonctionnel</p> <p>Le paradigme fonctionnel se distingue principalement par :</p> <ul> <li>L'immuabilit\u00e9 des structures de donn\u00e9es : ici, chaque fonction renvoie une nouvelle liste, sans affecter l'originale. Lorsqu'on insere dans une liste, il faut comprendre \"renvoyer une nouvelle liste dans laquelle on a ins\u00e9r\u00e9\"</li> <li>L'usage intensif de la r\u00e9cursivit\u00e9 : au lieu de boucles, les fonctions comme <code>taille</code>, <code>somme</code>, ou <code>inverser</code> utiliseront la r\u00e9cursivit\u00e9 pour recueillir des informations sur la liste.</li> <li>L'importance des fonctions pures : chaque fonction renvoie toujours le m\u00eame r\u00e9sultat pour les m\u00eames arguments, sans effets de bord.</li> </ul> <p>Ce style de programmation garantit des comportements pr\u00e9visibles et s\u00fbrs, ce qui est particuli\u00e8rement utile en programmation concurrente et dans les applications o\u00f9 la fiabilit\u00e9 est critique.</p> <p>Dans cette partie, nous allons explorer les bases des listes cha\u00een\u00e9es immuables, ce qui signifie qu'elles ne peuvent pas \u00eatre modifi\u00e9es par le code une fois cr\u00e9\u00e9es. Toute op\u00e9ration qui \"modifie\" une liste renvoie une nouvelle liste, tout en pr\u00e9servant l'ancienne.</p> <p>D\u00e9finition</p> <p>Nous travaillerons avec des listes cha\u00een\u00e9es o\u00f9 chaque \u00e9l\u00e9ment est un entier. </p> <p>Chaque liste peut \u00eatre :</p> <ol> <li>vide</li> <li>Contenir un \u00e9l\u00e9ment appel\u00e9 la t\u00eate, suivi de la queue, qui est une autre liste cha\u00een\u00e9e.</li> </ol>"},{"location":"terminale/structures-de-donnees/listeschainees/#exemple-concret-de-representation-en-python","title":"Exemple concret de repr\u00e9sentation en python","text":"<p>Nous utiliserons des tuples pour contenir une liste chain\u00e9e car les tuples sont immuables, ils collent bien au cadre de la programmation fonctionnelle.</p> <p>Nous mat\u00e9rialiserons la liste vide par un tuple vide.</p> <p>Le tuple suivant repr\u00e9sente une liste o\u00f9 la t\u00eate est <code>2</code>, et la queue est une liste dont la t\u00eate est <code>3</code>, suivie d'une liste ou la tete est 4, suivie elle-m\u00eame de la liste vide.</p> <pre><code>(2, (3, (4, ())))\n</code></pre>"},{"location":"terminale/structures-de-donnees/listeschainees/#traduction-de-notre-definition-en-python","title":"Traduction de notre d\u00e9finition en python:","text":"<p><pre><code>type vide = tuple[()]\nLISTE_VIDE: vide = ()\n\ntype liste = vide | tuple[int, liste]\n</code></pre> Nous cr\u00e9ons ici deux types :</p> <ul> <li><code>vide</code> repr\u00e9sente le vide mod\u00e9lis\u00e9 par un tuple vide.</li> <li><code>liste</code> est une structure r\u00e9cursive qui peut \u00eatre soit vide, soit un 2-uplet: t\u00eate (int) et queue(liste).</li> </ul>"},{"location":"terminale/structures-de-donnees/listeschainees/#creation-et-acces-aux-elements","title":"Cr\u00e9ation et Acc\u00e8s aux \u00c9l\u00e9ments","text":""},{"location":"terminale/structures-de-donnees/listeschainees/#creation-dune-liste","title":"Cr\u00e9ation d'une Liste","text":"<p>Une fonction typique pour cr\u00e9er une nouvelle liste \u00e0 partir d'un entier et d'une autre liste : <pre><code>def creer(t: int, q: liste) -&gt; liste:\n    return (t, q)\n</code></pre> Elle prend deux arguments : - <code>t</code> : la t\u00eate (l'\u00e9l\u00e9ment \u00e0 ajouter). - <code>q</code> : la queue (la liste suivante).</p>"},{"location":"terminale/structures-de-donnees/listeschainees/#acces-aux-elements","title":"Acc\u00e8s aux \u00c9l\u00e9ments","text":"<p>Les deux op\u00e9rations d'acc\u00e8s principales sont : - T\u00eate : obtenir le premier \u00e9l\u00e9ment de la liste. - Queue : obtenir la sous-liste \u00e0 partir du deuxi\u00e8me \u00e9l\u00e9ment.</p> <pre><code>def tete(lst: liste) -&gt; int:\n    assert len(lst) == 2, \"Liste vide\"\n    return lst[0]\n\ndef queue(lst: liste) -&gt; liste:\n    assert len(lst) == 2, \"Liste vide\"\n    return lst[1]\n</code></pre>"},{"location":"terminale/structures-de-donnees/listeschainees/#fonctions-de-base","title":"Fonctions de Base","text":""},{"location":"terminale/structures-de-donnees/listeschainees/#tester-si-une-liste-est-vide","title":"Tester si une Liste est Vide","text":"<p><pre><code>def est_vide(lst: liste) -&gt; bool:\n    return lst == LISTE_VIDE\n</code></pre> Cette fonction retourne <code>True</code> si la liste est vide, sinon <code>False</code>.</p>"},{"location":"terminale/structures-de-donnees/listeschainees/#calculer-la-taille-dune-liste","title":"Calculer la Taille d'une Liste","text":"<p><pre><code>def taille(lst: liste) -&gt; int:\n    if est_vide(lst):\n        return 0\n    return 1 + taille(queue(lst))\n</code></pre> Ici, on calcule r\u00e9cursivement la taille en comptant chaque \u00e9l\u00e9ment jusqu'\u00e0 atteindre la liste vide.</p>"},{"location":"terminale/structures-de-donnees/listeschainees/#calculer-la-somme-des-elements","title":"Calculer la Somme des \u00c9l\u00e9ments","text":"<pre><code>def somme(lst: liste) -&gt; int:\n    if est_vide(lst):\n        return 0\n    return tete(lst) + somme(queue(lst))\n</code></pre>"},{"location":"terminale/structures-de-donnees/listeschainees/#fonctions-de-modification","title":"Fonctions De modification","text":""},{"location":"terminale/structures-de-donnees/listeschainees/#ajouter-un-element-en-tete","title":"Ajouter un \u00c9l\u00e9ment en T\u00eate","text":"<p>Success</p> <p><pre><code>def supprimer_tete(lst: liste) -&gt; liste:\n    assert not est_vide(lst), \"La liste est vide\"\n    return queue(lst)\n</code></pre> On peut supprimer la t\u00eate de la liste, mais il est n\u00e9cessaire de v\u00e9rifier que la liste n'est pas vide avant de le faire.</p> <p>Inverser une Liste</p> <p><pre><code>def inverser(lst: liste) -&gt; liste:\n    if est_vide(lst):\n        return LISTE_VIDE\n    else:\n        return ajouter_fin(tete(lst), inverser(queue(lst)))\n</code></pre> La fonction part du constat qu'il faut inverser la queue et lui ajouter la tete \u00e0 la fin pour renverser une liste en sachant qu'on sait d\u00e9j\u00e0 renverser une sous-liste.</p>"},{"location":"terminale/structures-de-donnees/listeschainees/#partie-2-poo","title":"Partie 2 - POO","text":""},{"location":"terminale/structures-de-donnees/listeschainees/#listes-chainees-programmation-orientee-objet","title":"Listes cha\u00een\u00e9es - Programmation Orient\u00e9e Objet","text":"<p>Les listes cha\u00een\u00e9es sont un pr\u00e9texte pour apprendre plein de choses \u00e0 base d'une structure simple, avant de passer \u00e0 des structures plus \u00e9volu\u00e9es. Vous croyez en avoir fini apr\u00e8s la programmation fonctionnelle? Que nenni! Accrochez vous \u00e0 votre poney, c'est parti!</p> <p>Abstract</p> <p>En programmation orient\u00e9e objet, un programme est un ensemble d'entit\u00e9s qui interagissent. Ces entit\u00e9s sont appel\u00e9es des objets. Un objet poss\u00e8de un \u00e9tat (les donn\u00e9es qui le caract\u00e9risent) et des comportements (ce qu'il sait faire).</p> <p>L'\u00e9tat d'un objet est repr\u00e9sent\u00e9 par l'ensemble de ses attributs Les comportements d'un objet sont repr\u00e9sent\u00e9s par l'ensemble de ses m\u00e9thodes</p> <p>Une classe permet de d\u00e9finir une famille d'objets. A partir d'une classe, on peut cr\u00e9er autant d'objets que l'on veut. Ce sont des exemplaires, des instances de la classe.</p>"},{"location":"terminale/structures-de-donnees/listeschainees/#exemple-classe-animal","title":"Exemple : Classe <code>Animal</code>","text":"<p>Voici un exemple basique d'une classe en Python :</p> <pre><code>class Animal:\n    def __init__(self, nom: str):\n        self.nom = nom  # Attribut d'instance\n\n    def parler(self):   # M\u00e9thode d'instance\n        print(f\"{self.nom} fait du bruit.\")\n</code></pre> <p>Dans cet exemple : - <code>__init__</code> : Le constructeur de la classe. Il initialise les objets de la classe avec des attributs sp\u00e9cifiques (ici, le nom de l'animal). - <code>self</code> : Repr\u00e9sente l'instance actuelle de la classe. Il permet d'acc\u00e9der aux attributs et m\u00e9thodes de l'objet lui-m\u00eame.</p> <p>Exemple d'instanciation :</p> <pre><code>x = Animal(\"Bidule\")   # cr\u00e9ation d'une instance d'Animal\nprint(x.nom)           # On acc\u00e8de aux attributs avec le point. Affiche: Bidule\nx.nom = \"Truc\"         # (mutabilit\u00e9) On modifie les attributs de la m\u00eame mani\u00e8re \nx.parler()  # On acc\u00e8de aussi aux m\u00e9thodes par le point. Affiche: Truc fait du bruit.\n</code></pre> <p>Danger</p> <p>Vous devez savoir refaire les exercices sur la cr\u00e9ation et l'utilisation de classes en POO sans regarder le corrig\u00e9.</p> <p>!!! info Classe <code>Maillon</code></p> <pre><code>Nous allons maintenant appliquer ces concepts \u00e0 la structure de donn\u00e9es **liste cha\u00een\u00e9e**. En programmation fonctionnelle, nous avons consid\u00e9r\u00e9 qu'une liste est un couple d'\u00e9l\u00e9ments t\u00eate et queue, la queue \u00e9tant elle m\u00eame une liste, et nous avons d\u00e9fini la liste vide.\n\nIci nous allons commencer par nous concentrer sur un Maillon d'une cha\u00eene.\n\nUn maillon porte une donn\u00e9e, ainsi qu'une r\u00e9f\u00e9rence vers son maillon suivant.\n</code></pre>"},{"location":"terminale/structures-de-donnees/listeschainees/#definition-de-la-classe-maillon","title":"D\u00e9finition de la classe <code>Maillon</code>","text":"<p>La classe <code>Maillon</code> repr\u00e9sente un \u00e9l\u00e9ment de notre liste cha\u00een\u00e9e. Chaque maillon contient deux attributs : 1. <code>data</code> : La donn\u00e9e contenue dans le maillon (ici un entier). 2. <code>next</code> : Une r\u00e9f\u00e9rence vers le maillon suivant. (nous reviendrons sur ce terme)</p> <pre><code>class Maillon:\n    def __init__(self, data: int, next: 'Maillon'):\n        self.data = data\n        self.next = next\n</code></pre>"},{"location":"terminale/structures-de-donnees/listeschainees/#probleme-initial","title":"Probl\u00e8me initial","text":"<p>Cependant, cette d\u00e9finition pr\u00e9sente un probl\u00e8me. Lorsqu\u2019on cr\u00e9e un maillon, on doit sp\u00e9cifier le maillon suivant (<code>next</code>), mais ce maillon suivant n\u2019existe pas encore \u00e0 ce stade de la cr\u00e9ation. Nous devons r\u00e9soudre ce probl\u00e8me pour pouvoir cr\u00e9er une cha\u00eene. </p> <pre><code>premier_maillon = Maillon(3, ...euh, j'ai pas de maillon...)\n</code></pre> <p>Il existe plusieurs fa\u00e7ons de palier ce probl\u00e8me, mais j'ai fait le choix de l'\u00e9l\u00e9gance car vous le valez bien.</p> <p>Ce choix n\u00e9cessite de vous introduire \u00e0 un concept fondamental en POO: L'h\u00e9ritage.</p> <p>Info</p> <p>L\u2019h\u00e9ritage est un autre concept fondamental en POO. Il permet \u00e0 une classe (dite classe d\u00e9riv\u00e9e, ou sous classe) d\u2019h\u00e9riter des attributs et m\u00e9thodes d\u2019une autre classe (dite classe de base, ou super classe).</p>"},{"location":"terminale/structures-de-donnees/listeschainees/#exemple-classe-chien-heritant-de-animal","title":"Exemple : Classe <code>Chien</code> h\u00e9ritant de <code>Animal</code>","text":"<pre><code>class Chien(Animal):\n\n    def __init__(self):\n        super().__init__()\n\n    def parler(self):\n        print(f\"{self.nom} aboie.\")\n</code></pre> <p>La classe <code>Chien</code> h\u00e9rite de <code>Animal</code> mais peut red\u00e9finir certaines m\u00e9thodes (ici, <code>parler</code>), ou encore en cr\u00e9er d'autres. Ainsi, un objet de la classe <code>Chien</code> pourra aboyer au lieu de \"faire du bruit\"</p> <p>Programme exemple: <pre><code>x = Animal(\"Animal quelconque\")\nx.parler()\ny = Chien(\"Rex\")\ny.parler()\nprint(isinstance(x, Animal), isinstance(x, Chien))\nprint(isinstance(y, Animal), isinstance(y, Chien))\n</code></pre> Affichage: <pre><code>Animal quelconque fait du bruit\nRex aboie\nTrue False\nTrue True\n</code></pre></p> <p>La fonction <code>isinstance</code> sert \u00e0 savoir si un objet est une instance d'une classe. Si on a besoin de l'utiliser, c'est presque toujours du \u00e0 un d\u00e9faut de conception. On n'aura pas besoin de l'utiliser.</p> <p>En fran\u00e7ais, on peut tr\u00e8s bien dire d\u00e8s lors \"Un Chien EST UN Animal\"</p>"},{"location":"terminale/structures-de-donnees/listeschainees/#sentinelle-dans-les-listes-chainees","title":"Sentinelle dans les Listes Cha\u00een\u00e9es","text":"<p>Revenons maintenant \u00e0 notre probl\u00e8me initial.</p> <p>Info</p> <p>En informatique, une sentinelle est une valeur sp\u00e9ciale qui indique une ou plusieurs bornes d'une structure de donn\u00e9es. </p> <p>Appliqu\u00e9 \u00e0 notre cas, en consid\u00e9rant que la sentinelle et dans notre cha\u00eene: - Il n'y a que des maillons dans la chaine.  - La sentinelle est dans la cha\u00eene, donc la Sentinelle EST UN Maillon. - Mais tout maillon a un prochain maillon.   - Vu que la sentinelle est un Maillon, elle doit donc avoir un prochain maillon. </p> <p>Il semble que nous soyons de retour \u00e0 notre probl\u00e8me initial, mais en fait non. Pour r\u00e9soudre ce casse t\u00eate, On va lui dire que son prochain maillon, c'est initialement elle-m\u00eame.</p>"},{"location":"terminale/structures-de-donnees/listeschainees/#classe-sentinelle","title":"Classe <code>Sentinelle</code>","text":"<pre><code>class Sentinelle(Maillon):    # Une Sentinelle EST UN Maillon\n    def __init__(self):\n        super().__init__(0, self)   # Son prochain Maillon est initialement elle-m\u00eame\n</code></pre> <p>Cette classe h\u00e9rite de la classe <code>Maillon</code>.  Gr\u00e2ce \u00e0 l\u2019appel de <code>super()</code>, nous invoquons le constructeur de <code>Maillon</code> tout en assignant la sentinelle comme le maillon suivant d'elle-m\u00eame. Sa donn\u00e9e est arbitrairement mise \u00e0 0.</p> <p>Notre liste cha\u00een\u00e9e circulaire revient \u00e0 sa sentinelle, cr\u00e9ant ainsi une boucle. Ici, la sentinelle est utilis\u00e9e pour maintenir cette boucle en pointant vers elle-m\u00eame.</p> <p>Voici comment \u00e9voluera progressivement notre sentinelle (0) lorsqu'on ajoutera en t\u00eate les \u00e9l\u00e9ments 5, 3, puis 12:</p> <pre><code>---\ntitle: Maillon sentinelle\n---\ngraph LR\n0((0)) --&gt; 0</code></pre> <pre><code>---\ntitle: Ajout de la donn\u00e9e 5\n---\ngraph LR\n0((0)) --&gt; 5((5))\n5 --&gt; 0</code></pre> <pre><code>---\ntitle: Ajout de la donn\u00e9e 3\n---\ngraph LR\n0((0)) --&gt; 3((3))\n3 --&gt; 5((5))\n5 --&gt; 0</code></pre> <pre><code>---\ntitle: Ajout de la donn\u00e9e 12\n---\ngraph LR\n0((0)) --&gt; 12((12))\n12((12)) --&gt; 3((3))\n3 --&gt; 5((5))\n5 --&gt; 0</code></pre> <p>Il est tr\u00e8s important de comprendre que l'attribut next est une r\u00e9f\u00e9rence \u00e0 un noeud. \"next, c'est la fl\u00e8che qui va vers\"</p>"},{"location":"terminale/structures-de-donnees/listeschainees/#definition-de-la-liste-chainee","title":"D\u00e9finition de la liste cha\u00een\u00e9e","text":"<p>Comme il peut se deviner \u00e0 partir des dessins pr\u00e9c\u00e9dents, nous allons g\u00e9rer une liste \u00e0 partir de sa sentinelle. Nous assimilerons alors une liste \u00e0 sa sentinelle, en renommant tout simplement la classe sentinelle en Liste. On OUBLIE donc la classe sentinelle qui n'\u00e9tait l\u00e0 que pour la d\u00e9marche de r\u00e9flexion. La sentinelle d'une liste, c'est elle-m\u00eame en tant que Maillon</p>"},{"location":"terminale/structures-de-donnees/listeschainees/#classe-liste","title":"Classe <code>Liste</code>","text":"<p>La classe <code>Liste</code> h\u00e9rite de <code>Maillon</code> et repr\u00e9sente notre liste cha\u00een\u00e9e compl\u00e8te.</p> <p>Lorsqu'elle est cr\u00e9\u00e9e, c'est un maillon pointant sur lui-m\u00eame et qui repr\u00e9sentera toujours sa propre sentinelle.</p>"},{"location":"terminale/structures-de-donnees/listeschainees/#attributs-de-liste","title":"Attributs de <code>Liste</code>","text":"<ul> <li><code>__taille</code> : Stocke la taille de la liste.</li> <li><code>ajouter_tete</code> : Ajoute un nouvel \u00e9l\u00e9ment en t\u00eate de la liste.</li> </ul> <pre><code>class Liste(Maillon):\n    def __init__(self):\n        super(0, self).__init__()\n        self.__taille = 0\n</code></pre> <p>Dans une m\u00e9thode, self.next repr\u00e9sente toujours le premier Maillon, \u00e0 moins que la liste ne soit vide, auquel cas elle pointe sur elle m\u00eame.</p> <p>Ici, on choisit de plus de maintenir la taille du maillon en permanence. On marque cet attribut comme priv\u00e9 gr\u00e2ce au double underscore, afin de signifier qu'il ne doit pas \u00eatre modifi\u00e9 par les programmeurs qui utilisent cette classe.</p> <p>Vu que la r\u00e9cup\u00e9ration de la taille est une op\u00e9rationn courante, sa r\u00e9cup\u00e9ration sera donc en \\(\\mathcal{O}(1)\\), au lieu de \\(\\mathcal{O}(n)\\) s'il faut parcourir tous les maillons d'une liste de taille \\(n\\). Ceci se fait au prix de l'augmentation de la taille de stockage de la liste, mais on ne peut pas tout avoir.</p> <p>Tout ce qui suit est du l\u00e9go avec les maillons, il faut juste penser \u00e0 bien faire les op\u00e9rations dans l'ordre \u00e0 chaque fois. On proc\u00e8dera de mani\u00e8re imp\u00e9rative, avec des while.</p>"},{"location":"terminale/structures-de-donnees/listeschainees/#ajouter-un-element","title":"Ajouter un \u00e9l\u00e9ment","text":"<p>On veut ajouter un nouveau maillon portant la donn\u00e9e 12 en t\u00eate de liste:</p> <p><pre><code>---\ntitle: Liste initiale\n---\ngraph LR\n0((0)) --&gt; 3((3))\n3 --&gt; 5((5))\n5 --&gt; 0</code></pre> 1. On cr\u00e9\u00e9 un Maillon portant la donn\u00e9e 12 et pointant vers le Maillon suivant la sentinelle (donc la liste elle meme, puisqu'elle est sa sentinelle) <pre><code>---\ntitle: \n---\ngraph LR\n0((0)) ====&gt; 3((3))\n12((12)) --&gt; 3\n3 --&gt; 5((5))\n5 --&gt; 0</code></pre></p> <ol> <li>La fl\u00e8che en gras repr\u00e9sente la r\u00e9f\u00e9rence self.next il faut la remplacer par une r\u00e9f\u00e9rence au maillon 12</li> </ol> <pre><code>---\ntitle: \n---\ngraph LR\n0((0)) ==&gt; 12((12))\n12 --&gt; 3((3))\n3 --&gt; 5((5))\n5 --&gt; 0</code></pre> <ol> <li>Vu qu'on a choisi de maintenir la taille, il ne faut pas oublier de lui ajouter 1</li> </ol> <p>La m\u00e9thode <code>ajouter_tete</code> \u00e9crite en cons\u00e9quence ins\u00e8re un nouveau maillon juste apr\u00e8s la sentinelle.</p> <pre><code>def ajouter_tete(self, e: int):\n    m = Maillon(e, self.next)     # 1\n    self.next = m                 # 2\n    self.__taille += 1            # 3\n</code></pre> <p>L'approche propos\u00e9e permet de simplifier le code des m\u00e9thodes. En effet, \u00e7a marche ind\u00e9pendamment du fait que la liste soit vide ou pas.</p> <p><pre><code>---\ntitle: Liste initiale\n---\ngraph RL\n0((0)) --&gt; 0</code></pre> 1. On cr\u00e9\u00e9 un Maillon portant la donn\u00e9e 12 et pointant vers le Maillon suivant la sentinelle  <pre><code>---\ntitle: \n---\ngraph RL\n0((0)) ==&gt; 0\n12((12)) --&gt; 0</code></pre></p> <ol> <li>La fl\u00e8che en gras repr\u00e9sente la r\u00e9f\u00e9rence self.next il faut la remplacer par une r\u00e9f\u00e9rence au maillon 12</li> </ol> <pre><code>---\ntitle: \n---\ngraph LR\n0((0)) ==&gt; 12((12))\n12 --&gt; 0</code></pre>"},{"location":"terminale/structures-de-donnees/listeschainees/#la-methode-str","title":"La m\u00e9thode str","text":"<p>Afin de vous lancer sur le parcours de cette structure, je vous donne votre deuxi\u00e8me m\u00e9thode, la m\u00e9thode <code>__str__</code>, car je veux pointer du doigt comment d\u00e9terminer si on est arriv\u00e9s \u00e0 la fin de la cha\u00eene lorsqu'on la parcourt du d\u00e9but.</p> <p>Nous utilisons la traditionnelle technique d'accumulation.</p> <pre><code>def __str__(self) -&gt; str:\n    acc = \"\"                 # Accumulateur\n    courant = self.next      # Element en cours de traitement\n    while courant is not self:\n        acc += f\"{courant.data} -&gt; \"\n        courant = courant.next\n    return acc + \"_|_\"\n</code></pre> <p>On saute de maillon en maillon en utilisant <code>courant = courant.next</code> On avance tant que le maillon courant n'est pas la sentinelle, \u00e0 savoir self.</p> <p>Tip</p> <p>l'op\u00e9rateur is sert \u00e0 comparer les objets, non pas en termes de valeur, mais en termes d'adresse m\u00e9moire.</p>"},{"location":"terminale/structures-de-donnees/listeschainees/#le-probleme-de-la-mutabilite","title":"Le probl\u00e8me de la mutabilit\u00e9","text":"<p>TODO</p> <p>Question</p> <p>A vous maintenant de recr\u00e9er toutes les fonctionalit\u00e9s que vous avez vues en programmation fonctionnelles en tant que m\u00e9thodes de ces listes.</p>"}]}